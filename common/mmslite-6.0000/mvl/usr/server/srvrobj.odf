##########################################################################
# MMS OBJECT CONFIGURATION FILE
# This file is used as input to the 'foundry' utility application.
# It is used to create the following objects for use with MMS-LITE:
#	Types
#	Domains
#	Named Variables
#	Named Variable Lists
#
# Note: All objects except for the types can also be created 
#       by user code at initialization time. The creation of the
#	Domains, Variables, and Variable Lists via this utility
#	is for convenience only.
#
# Lines beginning with pound-signs are comments and are ignored.
# The general format of object definitions in this file is described 
# below. All object definition information is supplied in quotes, and
# can span multiple lines if desired. A object definition string is of 
# the form :
#
#   "{objectType}","Object Specific String1", "String2", ...
#
# Where the objectType field is used to specify the object and some of 
# it's optional attributes. The format of the 'objectType' field is as 
# follows -
#
# 	":X{flags}"
#
# Where X is one of the set {I,T,D,V,L}, and the set of valid flag
# characters depends on the object type.
#
# 	C == Control string
# 	  Flags  
# 	    C : Config, next string is alignment file to use
# 	    P : Path, next string is include path for ODF files
# 	    F : Flags, next string contains flags to set defaults
#		":VD"
#		":VP"
#		":TU"
#		":TT"
#		":TV"
#		"-notypedefs"
#		"-nosuffix"
# 	    U : UCA control, next string contains UCA control info
#		"MVL_UCA"
#		"MVLU_USE_REF"
#
# 	I == User specified include file, for user object definitions
# 	  Flags  
#           None
#
# 	T == Type
# 	  Flags  
# 	    U : Unique, do not 'twin' this type
# 	    T : Transient type, do not keep
# 	    V : Keep only if referenced by a variable
# 	    K : Keep this type unconditionally
#
# 	D == Domain
# 	  Flags  
#           None
#
# 	V == Named Variable
# 	  Flags  
#           D : Use 3rd string to set data pointer
#           P : Use 4th (3rd for no D) string to set processing fun
#           U : Use 5th (4rd for no D, 3rd for no P) string to set usr_info
#
# 	L == Named Variable List
# 	  Flags  
#           U : Use 5th (4rd for no D, 3rd for no P) string to set usr_info
#          String ":S" : End of list of variables
#
# 	N == UCA Model Name Generation 
# 	  Flags  
#           None
#
##########################################################################
# EXECUTION CONTROL
#
##########################################################################
# INCLUDE FILE DEFINITION SECTION
# This section is used to specify user include files that are to be
# included in the output 'C' file. This may be necessary when creating
# variables with data or processing initialzation strings.
#   Example - Include the user header file 'umvlinit.h'
#      ":I", "server.h"
#

":I", "server.h"

##########################################################################
# TYPE CREATION SECTION
# This section is used to specify MMS-LITE types. There are three
# required parameters per type (plus flags) - 
#  1. Type Select Define : The define created to reference the type
#  2. TDL : The SISCO type definition language string
#  3. Comment: Used only in the output 'C' file
# 
#  Optional flags are - 
#    U : Do not 'twin' this type
#    T : Transient type, do not write; use only as base type
#    K : Keep this type unconditionally
# 
#   Example - Create a 16 bit integer type
#      ":T", "I16_TYPE","Short","Single 16-bit signed integer"

":T", "I16","Short","Single 16-bit signed integer"
":T", "I32","Long","Single 32-bit signed integer"
":TK", "U32","ULong","Single 32-bit unsigned integer"
":T", "STRUCT1","{(s)Short,(l)Long}", "Basic simple structure"
":T", "ARR1","[10:Short]","Array Of 10 16-bit signed integers"
":T", "LARGE_ARR","[400:Short]","Array Of 400 16-bit signed integers"
":TK", "UTC_TM","Utctime","UTC Time"
":T", "UTF8VSTRING13","UTF8Vstring13","variable len Unicode UTF8 string"



##########################################################################
# DOMAIN CREATION SECTION
# This section is used to create MMS-LITE domains. The single parameter 
# is the domain name, which must be a legal MMS domain name.
#   Example - Create a domain named mvlLiteDomain
#      ":D", "mvlLiteDomain"

":D", "mvlLiteDom"
":D", "mvlLiteDom1"

##########################################################################
# VARIABLE ASSOCIATION CREATION SECTION
# This section is used to specify MMS-LITE named variables. There are two
# required parameters per variable, and three optional parameters (plus 
# flags) - 
#  1. Variable Name (must be valid MMS variable name). Note that the 
#     name can be of the form "domainName:VariableName" for domain vars.
#  2. Type ID : This Type ID must have been created previously
#  3. Data (optional): Used to initialize the va->data element.
#  4. Proc (optional): Used to initialize the va->proc element.
#  5. User (optional): Used to initialize the va->usr_info element.
# 
#  Optional flags are - 
#    D : Use 3rd string to set va->data
#    P : Use 4th (3rd for no D) string to set va->proc
#    U : Use 5th (4th, 3rd for no D, no P) string to set va->usr_info
# 
# Note that it may ne necessary to specify an include file to be used
# to resolve the 'data' and 'proc' initialization code.
# 
#   Example - Create a VMD variable named 'Temperature'
#     ":VDP", "Temperature", "I16", "&Temperature", "&varProcFuns"

":VDP", "Temperature", "I16",     "&Temperature", "&varProcFuns"
":VDP", "arr1",        "ARR1",    "arr1",         "&varProcFuns"
":VDP", "struct1",     "STRUCT1", "&struct1",     "&varProcFuns"
":VDP", "struct1$l",   "I32",     "&struct1.l",   "&varProcFuns"
":VDP", "struct1$s",   "I16",     "&struct1.s",   "&varProcFuns"

":VDP", "mvlLiteDom:domTemperature", "I16",     "&domTemperature", "&varProcFuns"
":VDP", "mvlLiteDom:domArr1", 	     "ARR1",    "domArr1", 	   "&varProcFuns"
":VDP", "mvlLiteDom:domStruct1",     "STRUCT1", "&domStruct1",     "&varProcFuns"
":VDP", "mvlLiteDom:domStruct1$l",   "I32",     "&domStruct1.l",   "&varProcFuns"
":VDP", "mvlLiteDom:domStruct1$s",   "I16",     "&domStruct1.s",   "&varProcFuns"

":VDP", "UtcTimeNow", "UTC_TM", "&UtcTimeNow", "&varProcFuns"
":VD", "UTF8Vstring13test", "UTF8VSTRING13",     "&UTF8Vstring13test"

##########################################################################
# NAMED VARIABLE LIST CREATION SECTION
# This section is used to specify MMS-LITE named variable lists. 
# There are two required parameters per variable list, and a list of
# variables to be included in the list (plus flags) - 
#  1. Variable list Name (must be valid MMS variable name). Note that the 
#     name can be of the form "domainName:VariableListName" for domain vars.
#  2. List of variables to be part of the named variable list.
#  3. End of variables marker. This is a string of form ":S",
# 
#   Example - Create a VMD Variable List named 'nvl1' with 'Temperature',
#             and 'arr1' as members.
#       ":L", "nvl1", "arr1", "Temperature", ":S"

":L", "nvl1", "arr1", "struct1", "Temperature", ":S"

":L", "mvlLiteDom:nvl1", 
		"mvlLiteDom:domArr1", 
		"mvlLiteDom:domStruct1", 
		"mvlLiteDom:domTemperature", 
":S"

":L", "allButAaVars", 
		"Temperature", 
		"arr1",        
		"struct1",     
		"struct1$l",   
		"struct1$s",   
		"mvlLiteDom:domTemperature", 
		"mvlLiteDom:domArr1", 	  
		"mvlLiteDom:domStruct1",     
		"mvlLiteDom:domStruct1$l",   
		"mvlLiteDom:domStruct1$s",   
		 ":S"

##########################################################################
# JOURNAL CREATION SECTION
# This section is used to create MMS-LITE Journals. The single parameter 
# is the journal name, which must be a legal MMS journal name.
#   Example - Create a journal named mvlLiteJournal
#      ":J", "mvlLiteJournal"

":J", "SampleJournal"
":J", "mvlLiteDom1:MyJournal"

##########################################################################
# UCA MODEL NAME GENERATION SECTION
# This section is used to generate UCA variable names from a selected
# structure type. The first parameter is the name base to be used. The
# second parameter is the type to use in extracting the names, and will
# generally be a high level UCA object type.
# Note: These objects are used only when the '-v' or '-n' command line
#       parameters is used. 
#   Example - Extract the names for the 
#			"Automatic Switch Controller Device Model"
#":N","ASWC","ASWC"

