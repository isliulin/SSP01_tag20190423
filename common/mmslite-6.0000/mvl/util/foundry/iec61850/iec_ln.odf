# ODF file generated by 'genodf'.
# MMS-LITE-80X-001 Version 4.2951, Build #3
# Copyright (c) 1986-2008 SISCO, Inc. All Rights Reserved.

########################################################################
#Copyright 2003, Systems Integration Specialists Company, Inc.
#               All Rights Reserved
########################################################################
# 02/01/08  RKR  Merged CDC changes for INTs and Enumerated8
#                Common LN attributes were removed from LPHD
# 05/09/03  RKR  Started from 61850-7-4_IS-17Apr03_v05.doc
# Derived from Part 7-4 Basic Communication structure for substation and
# feeder equipment - Compatible logical node classes and data classes
":CI", "gentypes.odf"		# Generic Types
":CI", "iec_cdc.odf"		# IEC 61850-7-3
########################################################################
# section 5.3.2 LN: Physical device information Name: LPHD
########################################################################
":T", "IEC_LPHD"		#Logical Node Class = 'LPHD'
"{
  (ST){
    (PhyHealth)	<INS_ENUM8_ST>,	#M
    (OutOv)	<SPS_ST>,	#O
    (Proxy)	<SPS_ST>,	#M
    (InOv)	<SPS_ST>,	#O
    (NumPwrUp)	<INS_INT_ST>,	#O
    (WrmStr)	<INS_INT_ST>,	#O
    (WacTrg)	<INS_INT_ST>,	#O
    (PwrUp)	<SPS_ST>,	#O
    (PwrDn)	<SPS_ST>,	#O
    (PwrSupAlm)	<SPS_ST>,	#O
    (RsStat)	<SPC_ST>,	#O
  },
  (CO){
    (RsStat)	<SPC_CO>,	#O
  },
  (CF){
    (RsStat)	<SPC_CF>,	#O
  },
  (DC){
    (PhyNam)	<DPL_DC>,	#M
    (PhyHealth)	<INS_DC>,	#M
    (OutOv)	<SPS_DC>,	#O
    (Proxy)	<SPS_DC>,	#M
    (InOv)	<SPS_DC>,	#O
    (NumPwrUp)	<INS_DC>,	#O
    (WrmStr)	<INS_DC>,	#O
    (WacTrg)	<INS_DC>,	#O
    (PwrUp)	<SPS_DC>,	#O
    (PwrDn)	<SPS_DC>,	#O
    (PwrSupAlm)	<SPS_DC>,	#O
    (RsStat)	<SPC_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (PhyHealth)	<INS_ENUM8_SV>,	#M
    (OutOv)	<SPS_SV>,	#O
    (Proxy)	<SPS_SV>,	#M
    (InOv)	<SPS_SV>,	#O
    (NumPwrUp)	<INS_INT_SV>,	#O
    (WrmStr)	<INS_INT_SV>,	#O
    (WacTrg)	<INS_INT_SV>,	#O
    (PwrUp)	<SPS_SV>,	#O
    (PwrDn)	<SPS_SV>,	#O
    (PwrSupAlm)	<SPS_SV>,	#O
    (RsStat)	<SPC_SV>,	#O
  },
  (EX){
    (PhyNam)	<DPL_EX>,	#M
    (PhyHealth)	<INS_EX>,	#M
    (OutOv)	<SPS_EX>,	#O
    (Proxy)	<SPS_EX>,	#M
    (InOv)	<SPS_EX>,	#O
    (NumPwrUp)	<INS_EX>,	#O
    (WrmStr)	<INS_EX>,	#O
    (WacTrg)	<INS_EX>,	#O
    (PwrUp)	<SPS_EX>,	#O
    (PwrDn)	<SPS_EX>,	#O
    (PwrSupAlm)	<SPS_EX>,	#O
    (RsStat)	<SPC_EX>,	#O
  },
}","Physical device information"

########################################################################
# section 5.3.4 LN: Logical node zero Name: LLN0
########################################################################
":T", "IEC_LLN0"		#Logical Node Class = 'LLN0'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (Diag)	<SPC_ST>,	#O
    (LEDRs)	<SPC_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (Diag)	<SPC_CO>,	#O
    (LEDRs)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Diag)	<SPC_CF>,	#O
    (LEDRs)	<SPC_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (Diag)	<SPC_DC>,	#O
    (LEDRs)	<SPC_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (Diag)	<SPC_SV>,	#O
    (LEDRs)	<SPC_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (Diag)	<SPC_EX>,	#O
    (LEDRs)	<SPC_EX>,	#O
  },
}","Logical node zero"

########################################################################
# section 5.4.2 LN: Differential Name: PDIF
########################################################################
":T", "IEC_PDIF"		#Logical Node Class = 'PDIF'
"{
  (MX){
    (DifAClc)	<WYE_MX>,	#O
    (RstA)	<WYE_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#O
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (DifAClc)	<WYE_CF>,	#O
    (RstA)	<WYE_CF>,	#O
    (LinCapac)	<ASG_CF>,	#O
    (LoSet)	<ING_INT_CF>,	#O
    (HiSet)	<ING_INT_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (RstMod)	<ING_ENUM8_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#O
    (Op)	<ACT_DC>,	#M
    (TmASt)	<CSD_DC>,	#O
    (DifAClc)	<WYE_DC>,	#O
    (RstA)	<WYE_DC>,	#O
    (LinCapac)	<ASG_DC>,	#O
    (LoSet)	<ING_DC>,	#O
    (HiSet)	<ING_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (RstMod)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
  },
  (SP){
    (LinCapac)	<ASG_SP>,	#O
    (LoSet)	<ING_INT_SP>,	#O
    (HiSet)	<ING_INT_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (RstMod)	<ING_ENUM8_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (TmACrv)	<CURVE_SP>,	#O
  },
  (SG){
    (LinCapac)	<ASG_SG>,	#O
    (LoSet)	<ING_INT_SG>,	#O
    (HiSet)	<ING_INT_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (RstMod)	<ING_ENUM8_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (TmACrv)	<CURVE_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (DifAClc)	<WYE_SV>,	#O
    (RstA)	<WYE_SV>,	#O
  },
  (SE){
    (LinCapac)	<ASG_SE>,	#O
    (LoSet)	<ING_INT_SE>,	#O
    (HiSet)	<ING_INT_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (RstMod)	<ING_ENUM8_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (TmACrv)	<CURVE_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#O
    (Op)	<ACT_EX>,	#M
    (TmASt)	<CSD_EX>,	#O
    (DifAClc)	<WYE_EX>,	#O
    (RstA)	<WYE_EX>,	#O
    (LinCapac)	<ASG_EX>,	#O
    (LoSet)	<ING_EX>,	#O
    (HiSet)	<ING_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (RstMod)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
  },
}","Differential"

########################################################################
# section 5.4.3 LN: Direction comparison Name: PDIR
########################################################################
":T", "IEC_PDIR"		#Logical Node Class = 'PDIR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (RsDlTmms)	<ING_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
  },
  (SP){
    (RsDlTmms)	<ING_INT_SP>,	#O
    (TmACrv)	<CURVE_SP>,	#O
  },
  (SG){
    (RsDlTmms)	<ING_INT_SG>,	#O
    (TmACrv)	<CURVE_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (RsDlTmms)	<ING_INT_SE>,	#O
    (TmACrv)	<CURVE_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (RsDlTmms)	<ING_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
  },
}","Direction comparison"

########################################################################
# section 5.4.4 LN: Distance Name: PDIS
########################################################################
":T", "IEC_PDIS"		#Logical Node Class = 'PDIS'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (PoRch)	<ASG_CF>,	#O
    (PhStr)	<ASG_CF>,	#O
    (GndStr)	<ASG_CF>,	#O
    (DirMod)	<ING_ENUM8_CF>,	#O
    (PctRch)	<ASG_CF>,	#O
    (Ofs)	<ASG_CF>,	#O
    (PctOfs)	<ASG_CF>,	#O
    (RisLod)	<ASG_CF>,	#O
    (AngLod)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (PhDlTmms)	<ING_INT_CF>,	#O
    (GndDlTmms)	<ING_INT_CF>,	#O
    (X1)	<ASG_CF>,	#O
    (LinAng)	<ASG_CF>,	#O
    (RisGndRch)	<ASG_CF>,	#O
    (RisPhRch)	<ASG_CF>,	#O
    (K0Fact)	<ASG_CF>,	#O
    (K0FactAng)	<ASG_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (PoRch)	<ASG_DC>,	#O
    (PhStr)	<ASG_DC>,	#O
    (GndStr)	<ASG_DC>,	#O
    (DirMod)	<ING_DC>,	#O
    (PctRch)	<ASG_DC>,	#O
    (Ofs)	<ASG_DC>,	#O
    (PctOfs)	<ASG_DC>,	#O
    (RisLod)	<ASG_DC>,	#O
    (AngLod)	<ASG_DC>,	#O
    (TmDlMod)	<SPG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (PhDlMod)	<SPG_DC>,	#O
    (PhDlTmms)	<ING_DC>,	#O
    (GndDlMod)	<SPG_DC>,	#O
    (GndDlTmms)	<ING_DC>,	#O
    (X1)	<ASG_DC>,	#O
    (LinAng)	<ASG_DC>,	#O
    (RisGndRch)	<ASG_DC>,	#O
    (RisPhRch)	<ASG_DC>,	#O
    (K0Fact)	<ASG_DC>,	#O
    (K0FactAng)	<ASG_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (PoRch)	<ASG_SP>,	#O
    (PhStr)	<ASG_SP>,	#O
    (GndStr)	<ASG_SP>,	#O
    (DirMod)	<ING_ENUM8_SP>,	#O
    (PctRch)	<ASG_SP>,	#O
    (Ofs)	<ASG_SP>,	#O
    (PctOfs)	<ASG_SP>,	#O
    (RisLod)	<ASG_SP>,	#O
    (AngLod)	<ASG_SP>,	#O
    (TmDlMod)	<SPG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (PhDlMod)	<SPG_SP>,	#O
    (PhDlTmms)	<ING_INT_SP>,	#O
    (GndDlMod)	<SPG_SP>,	#O
    (GndDlTmms)	<ING_INT_SP>,	#O
    (X1)	<ASG_SP>,	#O
    (LinAng)	<ASG_SP>,	#O
    (RisGndRch)	<ASG_SP>,	#O
    (RisPhRch)	<ASG_SP>,	#O
    (K0Fact)	<ASG_SP>,	#O
    (K0FactAng)	<ASG_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (PoRch)	<ASG_SG>,	#O
    (PhStr)	<ASG_SG>,	#O
    (GndStr)	<ASG_SG>,	#O
    (DirMod)	<ING_ENUM8_SG>,	#O
    (PctRch)	<ASG_SG>,	#O
    (Ofs)	<ASG_SG>,	#O
    (PctOfs)	<ASG_SG>,	#O
    (RisLod)	<ASG_SG>,	#O
    (AngLod)	<ASG_SG>,	#O
    (TmDlMod)	<SPG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (PhDlMod)	<SPG_SG>,	#O
    (PhDlTmms)	<ING_INT_SG>,	#O
    (GndDlMod)	<SPG_SG>,	#O
    (GndDlTmms)	<ING_INT_SG>,	#O
    (X1)	<ASG_SG>,	#O
    (LinAng)	<ASG_SG>,	#O
    (RisGndRch)	<ASG_SG>,	#O
    (RisPhRch)	<ASG_SG>,	#O
    (K0Fact)	<ASG_SG>,	#O
    (K0FactAng)	<ASG_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (PoRch)	<ASG_SE>,	#O
    (PhStr)	<ASG_SE>,	#O
    (GndStr)	<ASG_SE>,	#O
    (DirMod)	<ING_ENUM8_SE>,	#O
    (PctRch)	<ASG_SE>,	#O
    (Ofs)	<ASG_SE>,	#O
    (PctOfs)	<ASG_SE>,	#O
    (RisLod)	<ASG_SE>,	#O
    (AngLod)	<ASG_SE>,	#O
    (TmDlMod)	<SPG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (PhDlMod)	<SPG_SE>,	#O
    (PhDlTmms)	<ING_INT_SE>,	#O
    (GndDlMod)	<SPG_SE>,	#O
    (GndDlTmms)	<ING_INT_SE>,	#O
    (X1)	<ASG_SE>,	#O
    (LinAng)	<ASG_SE>,	#O
    (RisGndRch)	<ASG_SE>,	#O
    (RisPhRch)	<ASG_SE>,	#O
    (K0Fact)	<ASG_SE>,	#O
    (K0FactAng)	<ASG_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (PoRch)	<ASG_EX>,	#O
    (PhStr)	<ASG_EX>,	#O
    (GndStr)	<ASG_EX>,	#O
    (DirMod)	<ING_EX>,	#O
    (PctRch)	<ASG_EX>,	#O
    (Ofs)	<ASG_EX>,	#O
    (PctOfs)	<ASG_EX>,	#O
    (RisLod)	<ASG_EX>,	#O
    (AngLod)	<ASG_EX>,	#O
    (TmDlMod)	<SPG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (PhDlMod)	<SPG_EX>,	#O
    (PhDlTmms)	<ING_EX>,	#O
    (GndDlMod)	<SPG_EX>,	#O
    (GndDlTmms)	<ING_EX>,	#O
    (X1)	<ASG_EX>,	#O
    (LinAng)	<ASG_EX>,	#O
    (RisGndRch)	<ASG_EX>,	#O
    (RisPhRch)	<ASG_EX>,	#O
    (K0Fact)	<ASG_EX>,	#O
    (K0FactAng)	<ASG_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Distance Name"

########################################################################
# section 5.4.5 LN: Directional overpower Name: PDOP
########################################################################
":T", "IEC_PDOP"		#Logical Node Class = 'PDOP'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (DirMod)	<ING_ENUM8_CF>,	#O
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (DirMod)	<ING_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (DirMod)	<ING_ENUM8_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (DirMod)	<ING_ENUM8_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (DirMod)	<ING_ENUM8_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (DirMod)	<ING_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Directional overpower"

########################################################################
# section 5.4.6 LN: Directional underpower Name: PDUP
########################################################################
":T", "IEC_PDUP"		#Logical Node Class = 'PDUP'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (DirMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (DirMod)	<ING_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (DirMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (DirMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (DirMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (DirMod)	<ING_EX>,	#O
  },
}","Directional underpower"

########################################################################
# section 5.4.7 LN: Rate of change of frequency Name: PFRC
########################################################################
":T", "IEC_PFRC"		#Logical Node Class = 'PFRC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
    (BlkV)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (BlkVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (BlkV)	<SPS_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (BlkVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (BlkVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (BlkVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkV)	<SPS_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (BlkVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (BlkV)	<SPS_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (BlkVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Rate of change of frequency	"

########################################################################
# section 5.4.8 LN: Harmonic restraint Name: PHAR
########################################################################
":T", "IEC_PHAR"		#Logical Node Class = 'PHAR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (HaRst)	<ING_INT_CF>,	#O
    (PhStr)	<ASG_CF>,	#O
    (PhStop)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (HaRst)	<ING_DC>,	#O
    (PhStr)	<ASG_DC>,	#O
    (PhStop)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (HaRst)	<ING_INT_SP>,	#O
    (PhStr)	<ASG_SP>,	#O
    (PhStop)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (HaRst)	<ING_INT_SG>,	#O
    (PhStr)	<ASG_SG>,	#O
    (PhStop)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (HaRst)	<ING_INT_SE>,	#O
    (PhStr)	<ASG_SE>,	#O
    (PhStop)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (HaRst)	<ING_EX>,	#O
    (PhStr)	<ASG_EX>,	#O
    (PhStop)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Harmonic restraint"

########################################################################
# section 5.4.9 LN: Ground detector Name: PHIZ
########################################################################
":T", "IEC_PHIZ"		#Logical Node Class = 'PHIZ'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (AStr)	<ASG_CF>,	#O
    (VStr)	<ASG_CF>,	#O
    (HVStr)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (AStr)	<ASG_DC>,	#O
    (VStr)	<ASG_DC>,	#O
    (HVStr)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (AStr)	<ASG_SP>,	#O
    (VStr)	<ASG_SP>,	#O
    (HVStr)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (AStr)	<ASG_SG>,	#O
    (VStr)	<ASG_SG>,	#O
    (HVStr)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (AStr)	<ASG_SE>,	#O
    (VStr)	<ASG_SE>,	#O
    (HVStr)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (AStr)	<ASG_EX>,	#O
    (VStr)	<ASG_EX>,	#O
    (HVStr)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Ground detector"

########################################################################
# section 5.4.10 LN: Instantaneous overcurrent Name: PIOC
########################################################################
":T", "IEC_PIOC"		#Logical Node Class = 'PIOC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#O
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#O
    (Op)	<ACT_DC>,	#M
    (StrVal)	<ASG_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#O
    (Op)	<ACT_EX>,	#M
    (StrVal)	<ASG_EX>,	#O
  },
}","Instantaneous overcurrent"

########################################################################
# section 5.4.11 LN: Motor restart inhibition Name: PMRI
########################################################################
":T", "IEC_PMRI"		#Logical Node Class = 'PMRI'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Op)	<ACT_ST>,	#O
    (StrInh)	<SPS_ST>,	#O
    (StrInhTmm)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#O
    (SetA)	<ASG_CF>,	#O
    (SetTms)	<ING_INT_CF>,	#O
    (MaxNumStr)	<ING_INT_CF>,	#O
    (MaxWrmStr)	<ING_INT_CF>,	#O
    (MaxStrTmm)	<ING_INT_CF>,	#O
    (EqTmm)	<ING_INT_CF>,	#O
    (InhTmm)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Op)	<ACT_DC>,	#O
    (StrInh)	<SPS_DC>,	#O
    (StrInhTmm)	<INS_DC>,	#O
    (SetA)	<ASG_DC>,	#O
    (SetTms)	<ING_DC>,	#O
    (MaxNumStr)	<ING_DC>,	#O
    (MaxWrmStr)	<ING_DC>,	#O
    (MaxStrTmm)	<ING_DC>,	#O
    (EqTmm)	<ING_DC>,	#O
    (InhTmm)	<ING_DC>,	#O
  },
  (SP){
    (SetA)	<ASG_SP>,	#O
    (SetTms)	<ING_INT_SP>,	#O
    (MaxNumStr)	<ING_INT_SP>,	#O
    (MaxWrmStr)	<ING_INT_SP>,	#O
    (MaxStrTmm)	<ING_INT_SP>,	#O
    (EqTmm)	<ING_INT_SP>,	#O
    (InhTmm)	<ING_INT_SP>,	#O
  },
  (SG){
    (SetA)	<ASG_SG>,	#O
    (SetTms)	<ING_INT_SG>,	#O
    (MaxNumStr)	<ING_INT_SG>,	#O
    (MaxWrmStr)	<ING_INT_SG>,	#O
    (MaxStrTmm)	<ING_INT_SG>,	#O
    (EqTmm)	<ING_INT_SG>,	#O
    (InhTmm)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (StrInh)	<SPS_SV>,	#O
    (StrInhTmm)	<INS_INT_SV>,	#O
  },
  (SE){
    (SetA)	<ASG_SE>,	#O
    (SetTms)	<ING_INT_SE>,	#O
    (MaxNumStr)	<ING_INT_SE>,	#O
    (MaxWrmStr)	<ING_INT_SE>,	#O
    (MaxStrTmm)	<ING_INT_SE>,	#O
    (EqTmm)	<ING_INT_SE>,	#O
    (InhTmm)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Op)	<ACT_EX>,	#O
    (StrInh)	<SPS_EX>,	#O
    (StrInhTmm)	<INS_EX>,	#O
    (SetA)	<ASG_EX>,	#O
    (SetTms)	<ING_EX>,	#O
    (MaxNumStr)	<ING_EX>,	#O
    (MaxWrmStr)	<ING_EX>,	#O
    (MaxStrTmm)	<ING_EX>,	#O
    (EqTmm)	<ING_EX>,	#O
    (InhTmm)	<ING_EX>,	#O
  },
}","Motor restart inhibition"

########################################################################
# section 5.4.12 LN: Motor starting time supervision Name: PMSS
########################################################################
":T", "IEC_PMSS"		#Logical Node Class = 'PMSS'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#O
    (Op)	<ACT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#O
    (SetA)	<ASG_CF>,	#O
    (SetTms)	<ING_INT_CF>,	#O
    (MotStr)	<ASG_CF>,	#O
    (LokRotTms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#O
    (Op)	<ACT_DC>,	#O
    (SetA)	<ASG_DC>,	#O
    (SetTms)	<ING_DC>,	#O
    (MotStr)	<ASG_DC>,	#O
    (LokRotTms)	<ING_DC>,	#O
  },
  (SP){
    (SetA)	<ASG_SP>,	#O
    (SetTms)	<ING_INT_SP>,	#O
    (MotStr)	<ASG_SP>,	#O
    (LokRotTms)	<ING_INT_SP>,	#O
  },
  (SG){
    (SetA)	<ASG_SG>,	#O
    (SetTms)	<ING_INT_SG>,	#O
    (MotStr)	<ASG_SG>,	#O
    (LokRotTms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (SetA)	<ASG_SE>,	#O
    (SetTms)	<ING_INT_SE>,	#O
    (MotStr)	<ASG_SE>,	#O
    (LokRotTms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#O
    (Op)	<ACT_EX>,	#O
    (SetA)	<ASG_EX>,	#O
    (SetTms)	<ING_EX>,	#O
    (MotStr)	<ASG_EX>,	#O
    (LokRotTms)	<ING_EX>,	#O
  },
}","Motor starting time supervision"

########################################################################
# section 5.4.13 LN: Over power factor Name: POPF
########################################################################
":T", "IEC_POPF"		#Logical Node Class = 'POPF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
    (BlkA)	<SPS_ST>,	#O
    (BlkV)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (BlkValA)	<ASG_CF>,	#O
    (BlkValV)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (BlkA)	<SPS_DC>,	#O
    (BlkV)	<SPS_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (BlkValA)	<ASG_DC>,	#O
    (BlkValV)	<ASG_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (BlkValA)	<ASG_SP>,	#O
    (BlkValV)	<ASG_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (BlkValA)	<ASG_SG>,	#O
    (BlkValV)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkA)	<SPS_SV>,	#O
    (BlkV)	<SPS_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (BlkValA)	<ASG_SE>,	#O
    (BlkValV)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (BlkA)	<SPS_EX>,	#O
    (BlkV)	<SPS_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (BlkValA)	<ASG_EX>,	#O
    (BlkValV)	<ASG_EX>,	#O
  },
}","Over power factor"

########################################################################
# section 5.4.14 LN: Phase angle measuring Name: PPAM
########################################################################
":T", "IEC_PPAM"		#Logical Node Class = 'PPAM'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (StrVal)	<ASG_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (StrVal)	<ASG_EX>,	#O
  },
}","Phase angle measuring"

########################################################################
# section 5.4.15 LN: Protection scheme Name: PSCH
########################################################################
":T", "IEC_PSCH"		#Logical Node Class = 'PSCH'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (ProTx)	<SPS_ST>,	#M
    (ProRx)	<SPS_ST>,	#M
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
    (CarRx)	<ACT_ST>,	#O
    (LosOfGrd)	<SPS_ST>,	#O
    (Echo)	<ACT_ST>,	#O
    (WeiOp)	<ACT_ST>,	#O
    (RvABlk)	<ACT_ST>,	#O
    (GrdRx)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (CarRx)	<ACT_CF>,	#O
    (Echo)	<ACT_CF>,	#O
    (WeiOp)	<ACT_CF>,	#O
    (RvABlk)	<ACT_CF>,	#O
    (SchTyp)	<ING_ENUM8_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (CrdTmms)	<ING_INT_CF>,	#O
    (DurTmms)	<ING_INT_CF>,	#O
    (UnBlkMod)	<ING_ENUM8_CF>,	#O
    (SecTmms)	<ING_INT_CF>,	#O
    (WeiMod)	<ING_ENUM8_CF>,	#O
    (WeiTmms)	<ING_INT_CF>,	#O
    (PPVVal)	<ASG_CF>,	#O
    (PhGndVal)	<ASG_CF>,	#O
    (RvAMod)	<ING_ENUM8_CF>,	#O
    (RvATmms)	<ING_INT_CF>,	#O
    (RvRsTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (ProTx)	<SPS_DC>,	#M
    (ProRx)	<SPS_DC>,	#M
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (CarRx)	<ACT_DC>,	#O
    (LosOfGrd)	<SPS_DC>,	#O
    (Echo)	<ACT_DC>,	#O
    (WeiOp)	<ACT_DC>,	#O
    (RvABlk)	<ACT_DC>,	#O
    (GrdRx)	<SPS_DC>,	#O
    (SchTyp)	<ING_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (CrdTmms)	<ING_DC>,	#O
    (DurTmms)	<ING_DC>,	#O
    (UnBlkMod)	<ING_DC>,	#O
    (SecTmms)	<ING_DC>,	#O
    (WeiMod)	<ING_DC>,	#O
    (WeiTmms)	<ING_DC>,	#O
    (PPVVal)	<ASG_DC>,	#O
    (PhGndVal)	<ASG_DC>,	#O
    (RvAMod)	<ING_DC>,	#O
    (RvATmms)	<ING_DC>,	#O
    (RvRsTmms)	<ING_DC>,	#O
  },
  (SP){
    (SchTyp)	<ING_ENUM8_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (CrdTmms)	<ING_INT_SP>,	#O
    (DurTmms)	<ING_INT_SP>,	#O
    (UnBlkMod)	<ING_ENUM8_SP>,	#O
    (SecTmms)	<ING_INT_SP>,	#O
    (WeiMod)	<ING_ENUM8_SP>,	#O
    (WeiTmms)	<ING_INT_SP>,	#O
    (PPVVal)	<ASG_SP>,	#O
    (PhGndVal)	<ASG_SP>,	#O
    (RvAMod)	<ING_ENUM8_SP>,	#O
    (RvATmms)	<ING_INT_SP>,	#O
    (RvRsTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (SchTyp)	<ING_ENUM8_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (CrdTmms)	<ING_INT_SG>,	#O
    (DurTmms)	<ING_INT_SG>,	#O
    (UnBlkMod)	<ING_ENUM8_SG>,	#O
    (SecTmms)	<ING_INT_SG>,	#O
    (WeiMod)	<ING_ENUM8_SG>,	#O
    (WeiTmms)	<ING_INT_SG>,	#O
    (PPVVal)	<ASG_SG>,	#O
    (PhGndVal)	<ASG_SG>,	#O
    (RvAMod)	<ING_ENUM8_SG>,	#O
    (RvATmms)	<ING_INT_SG>,	#O
    (RvRsTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (ProTx)	<SPS_SV>,	#M
    (ProRx)	<SPS_SV>,	#M
    (LosOfGrd)	<SPS_SV>,	#O
    (GrdRx)	<SPS_SV>,	#O
  },
  (SE){
    (SchTyp)	<ING_ENUM8_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (CrdTmms)	<ING_INT_SE>,	#O
    (DurTmms)	<ING_INT_SE>,	#O
    (UnBlkMod)	<ING_ENUM8_SE>,	#O
    (SecTmms)	<ING_INT_SE>,	#O
    (WeiMod)	<ING_ENUM8_SE>,	#O
    (WeiTmms)	<ING_INT_SE>,	#O
    (PPVVal)	<ASG_SE>,	#O
    (PhGndVal)	<ASG_SE>,	#O
    (RvAMod)	<ING_ENUM8_SE>,	#O
    (RvATmms)	<ING_INT_SE>,	#O
    (RvRsTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (ProTx)	<SPS_EX>,	#M
    (ProRx)	<SPS_EX>,	#M
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (CarRx)	<ACT_EX>,	#O
    (LosOfGrd)	<SPS_EX>,	#O
    (Echo)	<ACT_EX>,	#O
    (WeiOp)	<ACT_EX>,	#O
    (RvABlk)	<ACT_EX>,	#O
    (GrdRx)	<SPS_EX>,	#O
    (SchTyp)	<ING_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (CrdTmms)	<ING_EX>,	#O
    (DurTmms)	<ING_EX>,	#O
    (UnBlkMod)	<ING_EX>,	#O
    (SecTmms)	<ING_EX>,	#O
    (WeiMod)	<ING_EX>,	#O
    (WeiTmms)	<ING_EX>,	#O
    (PPVVal)	<ASG_EX>,	#O
    (PhGndVal)	<ASG_EX>,	#O
    (RvAMod)	<ING_EX>,	#O
    (RvATmms)	<ING_EX>,	#O
    (RvRsTmms)	<ING_EX>,	#O
  },
}","Protection scheme"

########################################################################
# section 5.4.16 LN: Sensitive directional earthfault Name: PSDE
########################################################################
":T", "IEC_PSDE"		#Logical Node Class = 'PSDE'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#O
    (Ang)	<ASG_CF>,	#O
    (GndStr)	<ASG_CF>,	#O
    (GndOp)	<ASG_CF>,	#O
    (StrDlTmms)	<ING_INT_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (DirMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#O
    (Ang)	<ASG_DC>,	#O
    (GndStr)	<ASG_DC>,	#O
    (GndOp)	<ASG_DC>,	#O
    (StrDlTmms)	<ING_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (DirMod)	<ING_DC>,	#O
  },
  (SP){
    (Ang)	<ASG_SP>,	#O
    (GndStr)	<ASG_SP>,	#O
    (GndOp)	<ASG_SP>,	#O
    (StrDlTmms)	<ING_INT_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (DirMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (Ang)	<ASG_SG>,	#O
    (GndStr)	<ASG_SG>,	#O
    (GndOp)	<ASG_SG>,	#O
    (StrDlTmms)	<ING_INT_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (DirMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (Ang)	<ASG_SE>,	#O
    (GndStr)	<ASG_SE>,	#O
    (GndOp)	<ASG_SE>,	#O
    (StrDlTmms)	<ING_INT_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (DirMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#O
    (Ang)	<ASG_EX>,	#O
    (GndStr)	<ASG_EX>,	#O
    (GndOp)	<ASG_EX>,	#O
    (StrDlTmms)	<ING_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (DirMod)	<ING_EX>,	#O
  },
}","Sensitive directional earthfault"

########################################################################
# section 5.4.17 LN: Transient earth fault Name: PTEF
########################################################################
":T", "IEC_PTEF"		#Logical Node Class = 'PTEF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#C
    (Op)	<ACT_ST>,	#C
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#C
    (GndStr)	<ASG_CF>,	#O
    (DirMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#C
    (Op)	<ACT_DC>,	#C
    (GndStr)	<ASG_DC>,	#O
    (DirMod)	<ING_DC>,	#O
  },
  (SP){
    (GndStr)	<ASG_SP>,	#O
    (DirMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (GndStr)	<ASG_SG>,	#O
    (DirMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (GndStr)	<ASG_SE>,	#O
    (DirMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#C
    (Op)	<ACT_EX>,	#C
    (GndStr)	<ASG_EX>,	#O
    (DirMod)	<ING_EX>,	#O
  },
}","Transient earth fault"

########################################################################
# section 5.4.18 LN: Time overcurrent Name: PTOC
########################################################################
":T", "IEC_PTOC"		#Logical Node Class = 'PTOC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (TmMult)	<ASG_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (TypRsCrv)	<ING_ENUM8_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (DirMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (TmASt)	<CSD_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (TmMult)	<ASG_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (TypRsCrv)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (DirMod)	<ING_DC>,	#O
  },
  (SP){
    (TmACrv)	<CURVE_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (TmMult)	<ASG_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (TypRsCrv)	<ING_ENUM8_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (DirMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (TmACrv)	<CURVE_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (TmMult)	<ASG_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (TypRsCrv)	<ING_ENUM8_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (DirMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (TmACrv)	<CURVE_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (TmMult)	<ASG_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (TypRsCrv)	<ING_ENUM8_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (DirMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (TmASt)	<CSD_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (TmMult)	<ASG_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (TypRsCrv)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (DirMod)	<ING_EX>,	#O
  },
}","Time overcurrent"

########################################################################
# section 5.4.19 LN: Overfrequency Name: PTOF
########################################################################
":T", "IEC_PTOF"		#Logical Node Class = 'PTOF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
    (BlkV)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (BlkVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (BlkV)	<SPS_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (BlkVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (BlkVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (BlkVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkV)	<SPS_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (BlkVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (BlkV)	<SPS_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (BlkVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Overfrequency"

########################################################################
# section 5.4.20 LN: Overvoltage Name: PTOV
########################################################################
":T", "IEC_PTOV"		#Logical Node Class = 'PTOV'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (TmMult)	<ASG_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (TmVSt)	<CSD_DC>,	#O
    (TmVCrv)	<CURVE_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (TmMult)	<ASG_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (TmVCrv)	<CURVE_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (TmMult)	<ASG_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (TmVCrv)	<CURVE_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (TmMult)	<ASG_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (TmVCrv)	<CURVE_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (TmMult)	<ASG_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (TmVSt)	<CSD_EX>,	#O
    (TmVCrv)	<CURVE_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (TmMult)	<ASG_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Overvoltage"

########################################################################
# section 5.4.21 LN: Protection trip conditioning Name: PTRC
########################################################################
":T", "IEC_PTRC"		#Logical Node Class = 'PTRC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Tr)	<ACT_ST>,	#C
    (Op)	<ACT_ST>,	#C
    (Str)	<ACD_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Tr)	<ACT_CF>,	#C
    (Op)	<ACT_CF>,	#C
    (TrMod)	<ING_ENUM8_CF>,	#O
    (TrPlsTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Tr)	<ACT_DC>,	#C
    (Op)	<ACT_DC>,	#C
    (Str)	<ACD_DC>,	#O
    (TrMod)	<ING_DC>,	#O
    (TrPlsTmms)	<ING_DC>,	#O
  },
  (SP){
    (TrMod)	<ING_ENUM8_SP>,	#O
    (TrPlsTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (TrMod)	<ING_ENUM8_SG>,	#O
    (TrPlsTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (TrMod)	<ING_ENUM8_SE>,	#O
    (TrPlsTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Tr)	<ACT_EX>,	#C
    (Op)	<ACT_EX>,	#C
    (Str)	<ACD_EX>,	#O
    (TrMod)	<ING_EX>,	#O
    (TrPlsTmms)	<ING_EX>,	#O
  },
}","Protection trip conditioning"

########################################################################
# section 5.4.22 LN: Thermal overload Name: PTTR
########################################################################
":T", "IEC_PTTR"		#Logical Node Class = 'PTTR'
"{
  (MX){
    (Amp)	<MV_MX>,	#O
    (Tmp)	<MV_MX>,	#O
    (TmpRl)	<MV_MX>,	#O
    (LodRsvAlm)	<MV_MX>,	#O
    (LodRsvTr)	<MV_MX>,	#O
    (AgeRat)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#O
    (Op)	<ACT_ST>,	#M
    (AlmThm)	<ACT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Amp)	<MV_CF>,	#O
    (Tmp)	<MV_CF>,	#O
    (TmpRl)	<MV_CF>,	#O
    (LodRsvAlm)	<MV_CF>,	#O
    (LodRsvTr)	<MV_CF>,	#O
    (AgeRat)	<MV_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (AlmThm)	<ACT_CF>,	#O
    (TmpMax)	<ASG_CF>,	#O
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (ConsTms)	<ING_INT_CF>,	#O
    (AlmVal)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Amp)	<MV_DC>,	#O
    (Tmp)	<MV_DC>,	#O
    (TmpRl)	<MV_DC>,	#O
    (LodRsvAlm)	<MV_DC>,	#O
    (LodRsvTr)	<MV_DC>,	#O
    (AgeRat)	<MV_DC>,	#O
    (Str)	<ACD_DC>,	#O
    (Op)	<ACT_DC>,	#M
    (AlmThm)	<ACT_DC>,	#O
    (TmTmpSt)	<CSD_DC>,	#O
    (TmASt)	<CSD_DC>,	#O
    (TmTmpCrv)	<CURVE_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
    (TmpMax)	<ASG_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (ConsTms)	<ING_DC>,	#O
    (AlmVal)	<ASG_DC>,	#O
  },
  (SP){
    (TmTmpCrv)	<CURVE_SP>,	#O
    (TmACrv)	<CURVE_SP>,	#O
    (TmpMax)	<ASG_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (ConsTms)	<ING_INT_SP>,	#O
    (AlmVal)	<ASG_SP>,	#O
  },
  (SG){
    (TmTmpCrv)	<CURVE_SG>,	#O
    (TmACrv)	<CURVE_SG>,	#O
    (TmpMax)	<ASG_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (ConsTms)	<ING_INT_SG>,	#O
    (AlmVal)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (Amp)	<MV_SV>,	#O
    (Tmp)	<MV_SV>,	#O
    (TmpRl)	<MV_SV>,	#O
    (LodRsvAlm)	<MV_SV>,	#O
    (LodRsvTr)	<MV_SV>,	#O
    (AgeRat)	<MV_SV>,	#O
  },
  (SE){
    (TmTmpCrv)	<CURVE_SE>,	#O
    (TmACrv)	<CURVE_SE>,	#O
    (TmpMax)	<ASG_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (ConsTms)	<ING_INT_SE>,	#O
    (AlmVal)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Amp)	<MV_EX>,	#O
    (Tmp)	<MV_EX>,	#O
    (TmpRl)	<MV_EX>,	#O
    (LodRsvAlm)	<MV_EX>,	#O
    (LodRsvTr)	<MV_EX>,	#O
    (AgeRat)	<MV_EX>,	#O
    (Str)	<ACD_EX>,	#O
    (Op)	<ACT_EX>,	#M
    (AlmThm)	<ACT_EX>,	#O
    (TmTmpSt)	<CSD_EX>,	#O
    (TmASt)	<CSD_EX>,	#O
    (TmTmpCrv)	<CURVE_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
    (TmpMax)	<ASG_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (ConsTms)	<ING_EX>,	#O
    (AlmVal)	<ASG_EX>,	#O
  },
}","Thermal overload"

########################################################################
# section 5.4.23 LN: Undercurrent Name: PTUC
########################################################################
":T", "IEC_PTUC"		#Logical Node Class = 'PTUC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (TmMult)	<ASG_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (TypRsCrv)	<ING_ENUM8_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (DirMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (TmASt)	<CSD_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (TmMult)	<ASG_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (TypRsCrv)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (DirMod)	<ING_DC>,	#O
  },
  (SP){
    (TmACrv)	<CURVE_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (TmMult)	<ASG_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (TypRsCrv)	<ING_ENUM8_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (DirMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (TmACrv)	<CURVE_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (TmMult)	<ASG_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (TypRsCrv)	<ING_ENUM8_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (DirMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (TmACrv)	<CURVE_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (TmMult)	<ASG_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (TypRsCrv)	<ING_ENUM8_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (DirMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (TmASt)	<CSD_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (TmMult)	<ASG_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (TypRsCrv)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (DirMod)	<ING_EX>,	#O
  },
}","Undercurrent"

########################################################################
# section 5.4.24 LN: Undervoltage Name: PTUV
########################################################################
":T", "IEC_PTUV"		#Logical Node Class = 'PTUV'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (TmMult)	<ASG_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (TmASt)	<CSD_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (TmMult)	<ASG_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (TmACrv)	<CURVE_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (TmMult)	<ASG_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (TmACrv)	<CURVE_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (TmMult)	<ASG_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (TmACrv)	<CURVE_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (TmMult)	<ASG_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (TmASt)	<CSD_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (TmMult)	<ASG_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Undervoltage"

########################################################################
# section 5.4.25 LN: Underpower factor Name: PUPF
########################################################################
":T", "IEC_PUPF"		#Logical Node Class = 'PUPF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
    (BlkA)	<SPS_ST>,	#O
    (BlkV)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (BlkValA)	<ASG_CF>,	#O
    (BlkValV)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (BlkA)	<SPS_DC>,	#O
    (BlkV)	<SPS_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (BlkValA)	<ASG_DC>,	#O
    (BlkValV)	<ASG_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (BlkValA)	<ASG_SP>,	#O
    (BlkValV)	<ASG_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (BlkValA)	<ASG_SG>,	#O
    (BlkValV)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkA)	<SPS_SV>,	#O
    (BlkV)	<SPS_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (BlkValA)	<ASG_SE>,	#O
    (BlkValV)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (BlkA)	<SPS_EX>,	#O
    (BlkV)	<SPS_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (BlkValA)	<ASG_EX>,	#O
    (BlkValV)	<ASG_EX>,	#O
  },
}","Underpower factor"

########################################################################
# section 5.4.26 LN: Underfrequency Name: PTUF
########################################################################
":T", "IEC_PTUF"		#Logical Node Class = 'PTUF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
    (BlkV)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (BlkVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (BlkV)	<SPS_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (BlkVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (BlkVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (BlkVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkV)	<SPS_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (BlkVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (BlkV)	<SPS_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (BlkVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Underfrequency"

########################################################################
# section 5.4.27 LN: Voltage controlled time overcurrent Name: PVOC
########################################################################
":T", "IEC_PVOC"		#Logical Node Class = 'PVOC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (TmMult)	<ASG_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (TypRsCrv)	<ING_ENUM8_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (AVSt)	<CSD_DC>,	#O
    (TmASt)	<CSD_DC>,	#O
    (AVCrv)	<CURVE_DC>,	#O
    (TmACrv)	<CURVE_DC>,	#O
    (TmMult)	<ASG_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (TypRsCrv)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (AVCrv)	<CURVE_SP>,	#O
    (TmACrv)	<CURVE_SP>,	#O
    (TmMult)	<ASG_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (TypRsCrv)	<ING_ENUM8_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (AVCrv)	<CURVE_SG>,	#O
    (TmACrv)	<CURVE_SG>,	#O
    (TmMult)	<ASG_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (TypRsCrv)	<ING_ENUM8_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (AVCrv)	<CURVE_SE>,	#O
    (TmACrv)	<CURVE_SE>,	#O
    (TmMult)	<ASG_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (TypRsCrv)	<ING_ENUM8_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (AVSt)	<CSD_EX>,	#O
    (TmASt)	<CSD_EX>,	#O
    (AVCrv)	<CURVE_EX>,	#O
    (TmACrv)	<CURVE_EX>,	#O
    (TmMult)	<ASG_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (TypRsCrv)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Voltage controlled time overcurrent"

########################################################################
# section 5.4.28 LN: Volts per Hz Name: PVPH
########################################################################
":T", "IEC_PVPH"		#Logical Node Class = 'PVPH'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (TypRsCrv)	<ING_ENUM8_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
    (TmMult)	<ASG_CF>,	#O
    (MinOpTmms)	<ING_INT_CF>,	#O
    (MaxOpTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (VHzSt)	<CSD_DC>,	#O
    (VHzCrv)	<CURVE_DC>,	#O
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (TypRsCrv)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
    (TmMult)	<ASG_DC>,	#O
    (MinOpTmms)	<ING_DC>,	#O
    (MaxOpTmms)	<ING_DC>,	#O
  },
  (SP){
    (VHzCrv)	<CURVE_SP>,	#O
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (TypRsCrv)	<ING_ENUM8_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
    (TmMult)	<ASG_SP>,	#O
    (MinOpTmms)	<ING_INT_SP>,	#O
    (MaxOpTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (VHzCrv)	<CURVE_SG>,	#O
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (TypRsCrv)	<ING_ENUM8_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
    (TmMult)	<ASG_SG>,	#O
    (MinOpTmms)	<ING_INT_SG>,	#O
    (MaxOpTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (VHzCrv)	<CURVE_SE>,	#O
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (TypRsCrv)	<ING_ENUM8_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
    (TmMult)	<ASG_SE>,	#O
    (MinOpTmms)	<ING_INT_SE>,	#O
    (MaxOpTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (VHzSt)	<CSD_EX>,	#O
    (VHzCrv)	<CURVE_EX>,	#O
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (TypRsCrv)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
    (TmMult)	<ASG_EX>,	#O
    (MinOpTmms)	<ING_EX>,	#O
    (MaxOpTmms)	<ING_EX>,	#O
  },
}","Volts per Hz"

########################################################################
# section 5.4.29 LN: Zero speed or underspeed Name: PZSU
########################################################################
":T", "IEC_PZSU"		#Logical Node Class = 'PZSU'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
    (OpDlTmms)	<ING_INT_CF>,	#O
    (RsDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (StrVal)	<ASG_DC>,	#O
    (OpDlTmms)	<ING_DC>,	#O
    (RsDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
    (OpDlTmms)	<ING_INT_SP>,	#O
    (RsDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
    (OpDlTmms)	<ING_INT_SG>,	#O
    (RsDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
    (OpDlTmms)	<ING_INT_SE>,	#O
    (RsDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (StrVal)	<ASG_EX>,	#O
    (OpDlTmms)	<ING_EX>,	#O
    (RsDlTmms)	<ING_EX>,	#O
  },
}","Zero speed or underspeed"

########################################################################
# section 5.5.2 LN: Disturbance recorder function Name: RDRE
########################################################################
":T", "IEC_RDRE"		#Logical Node Class = 'RDRE'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (RcdTrg)	<SPC_ST>,	#O
    (MemRs)	<SPC_ST>,	#O
    (MemClr)	<SPC_ST>,	#O
    (RcdMade)	<SPS_ST>,	#M
    (FltNum)	<INS_INT_ST>,	#O
    (GriFltNum)	<INS_INT_ST>,	#O
    (RcdStr)	<SPS_ST>,	#O
    (MemUsed)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (RcdTrg)	<SPC_CO>,	#O
    (MemRs)	<SPC_CO>,	#O
    (MemClr)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (RcdTrg)	<SPC_CF>,	#O
    (MemRs)	<SPC_CF>,	#O
    (MemClr)	<SPC_CF>,	#O
    (TrgMod)	<ING_ENUM8_CF>,	#O
    (LevMod)	<ING_ENUM8_CF>,	#O
    (PreTmms)	<ING_INT_CF>,	#O
    (PstTmms)	<ING_INT_CF>,	#O
    (MemFull)	<ING_INT_CF>,	#O
    (MaxNumRcd)	<ING_INT_CF>,	#O
    (ReTrgMod)	<ING_ENUM8_CF>,	#O
    (PerTrgTms)	<ING_INT_CF>,	#O - per 8-1
    (ExclTmms)	<ING_INT_CF>,	#O
    (OpMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (RcdTrg)	<SPC_DC>,	#O
    (MemRs)	<SPC_DC>,	#O
    (MemClr)	<SPC_DC>,	#O
    (RcdMade)	<SPS_DC>,	#M
    (FltNum)	<INS_DC>,	#O
    (GriFltNum)	<INS_DC>,	#O
    (RcdStr)	<SPS_DC>,	#O
    (MemUsed)	<INS_DC>,	#O
    (TrgMod)	<ING_DC>,	#O
    (LevMod)	<ING_DC>,	#O
    (PreTmms)	<ING_DC>,	#O
    (PstTmms)	<ING_DC>,	#O
    (MemFull)	<ING_DC>,	#O
    (MaxNumRcd)	<ING_DC>,	#O
    (ReTrgMod)	<ING_DC>,	#O
#    (PerTrgTms)	<ING_DC>,	#O - per 8-1
    (PerTrgTmms)	<ING_DC>,	#O - typo per Scout
    (ExclTmms)	<ING_DC>,	#O
    (OpMod)	<ING_DC>,	#O
  },
  (SP){
    (TrgMod)	<ING_ENUM8_SP>,	#O
    (LevMod)	<ING_ENUM8_SP>,	#O
    (PreTmms)	<ING_INT_SP>,	#O
    (PstTmms)	<ING_INT_SP>,	#O
    (MemFull)	<ING_INT_SP>,	#O
    (MaxNumRcd)	<ING_INT_SP>,	#O
    (ReTrgMod)	<ING_ENUM8_SP>,	#O
#    (PerTrgTms)	<ING_INT_SP>,	#O - per 8-1
    (PerTrgTmms)	<ING_INT_SP>,	#O - typo per Scout
    (ExclTmms)	<ING_INT_SP>,	#O
    (OpMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (TrgMod)	<ING_ENUM8_SG>,	#O
    (LevMod)	<ING_ENUM8_SG>,	#O
    (PreTmms)	<ING_INT_SG>,	#O
    (PstTmms)	<ING_INT_SG>,	#O
    (MemFull)	<ING_INT_SG>,	#O
    (MaxNumRcd)	<ING_INT_SG>,	#O
    (ReTrgMod)	<ING_ENUM8_SG>,	#O
#    (PerTrgTms)	<ING_INT_SG>,	#O - per 8-1
    (PerTrgTmms)	<ING_INT_SG>,	#O - typo per Scout
    (ExclTmms)	<ING_INT_SG>,	#O
    (OpMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (RcdTrg)	<SPC_SV>,	#O
    (MemRs)	<SPC_SV>,	#O
    (MemClr)	<SPC_SV>,	#O
    (RcdMade)	<SPS_SV>,	#M
    (FltNum)	<INS_INT_SV>,	#O
    (GriFltNum)	<INS_INT_SV>,	#O
    (RcdStr)	<SPS_SV>,	#O
    (MemUsed)	<INS_INT_SV>,	#O
  },
  (SE){
    (TrgMod)	<ING_ENUM8_SE>,	#O
    (LevMod)	<ING_ENUM8_SE>,	#O
    (PreTmms)	<ING_INT_SE>,	#O
    (PstTmms)	<ING_INT_SE>,	#O
    (MemFull)	<ING_INT_SE>,	#O
    (MaxNumRcd)	<ING_INT_SE>,	#O
    (ReTrgMod)	<ING_ENUM8_SE>,	#O
#    (PerTrgTms)	<ING_INT_SE>,	#O - per 8-1
    (PerTrgTmms)	<ING_INT_SE>,	#O - typo per Scout
    (ExclTmms)	<ING_INT_SE>,	#O
    (OpMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (RcdTrg)	<SPC_EX>,	#O
    (MemRs)	<SPC_EX>,	#O
    (MemClr)	<SPC_EX>,	#O
    (RcdMade)	<SPS_EX>,	#M
    (FltNum)	<INS_EX>,	#O
    (GriFltNum)	<INS_EX>,	#O
    (RcdStr)	<SPS_EX>,	#O
    (MemUsed)	<INS_EX>,	#O
    (TrgMod)	<ING_EX>,	#O
    (LevMod)	<ING_EX>,	#O
    (PreTmms)	<ING_EX>,	#O
    (PstTmms)	<ING_EX>,	#O
    (MemFull)	<ING_EX>,	#O
    (MaxNumRcd)	<ING_EX>,	#O
    (ReTrgMod)	<ING_EX>,	#O
#    (PerTrgTms)	<ING_EX>,	#O - per 8-1
    (PerTrgTmms)	<ING_EX>,	#O - typo per Scout
    (ExclTmms)	<ING_EX>,	#O
    (OpMod)	<ING_EX>,	#O
  },
}","Disturbance recorder function"

########################################################################
# section 5.5.3 LN: Disturbance recorder channel analogue Name: RADR
########################################################################
":T", "IEC_RADR"		#Logical Node Class = 'RADR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (ChTrg)	<SPS_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (ChNum)	<ING_INT_CF>,	#O
    (TrgMod)	<ING_ENUM8_CF>,	#O
    (LevMod)	<ING_ENUM8_CF>,	#O
    (HiTrgLev)	<ASG_CF>,	#O
    (LoTrgLev)	<ASG_CF>,	#O
    (PreTmms)	<ING_INT_CF>,	#O
    (PstTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (ChTrg)	<SPS_DC>,	#M
    (ChNum)	<ING_DC>,	#O
    (TrgMod)	<ING_DC>,	#O
    (LevMod)	<ING_DC>,	#O
    (HiTrgLev)	<ASG_DC>,	#O
    (LoTrgLev)	<ASG_DC>,	#O
    (PreTmms)	<ING_DC>,	#O
    (PstTmms)	<ING_DC>,	#O
  },
  (SP){
    (ChNum)	<ING_INT_SP>,	#O
    (TrgMod)	<ING_ENUM8_SP>,	#O
    (LevMod)	<ING_ENUM8_SP>,	#O
    (HiTrgLev)	<ASG_SP>,	#O
    (LoTrgLev)	<ASG_SP>,	#O
    (PreTmms)	<ING_INT_SP>,	#O
    (PstTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (ChNum)	<ING_INT_SG>,	#O
    (TrgMod)	<ING_ENUM8_SG>,	#O
    (LevMod)	<ING_ENUM8_SG>,	#O
    (HiTrgLev)	<ASG_SG>,	#O
    (LoTrgLev)	<ASG_SG>,	#O
    (PreTmms)	<ING_INT_SG>,	#O
    (PstTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (ChTrg)	<SPS_SV>,	#M
  },
  (SE){
    (ChNum)	<ING_INT_SE>,	#O
    (TrgMod)	<ING_ENUM8_SE>,	#O
    (LevMod)	<ING_ENUM8_SE>,	#O
    (HiTrgLev)	<ASG_SE>,	#O
    (LoTrgLev)	<ASG_SE>,	#O
    (PreTmms)	<ING_INT_SE>,	#O
    (PstTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (ChTrg)	<SPS_EX>,	#M
    (ChNum)	<ING_EX>,	#O
    (TrgMod)	<ING_EX>,	#O
    (LevMod)	<ING_EX>,	#O
    (HiTrgLev)	<ASG_EX>,	#O
    (LoTrgLev)	<ASG_EX>,	#O
    (PreTmms)	<ING_EX>,	#O
    (PstTmms)	<ING_EX>,	#O
  },
}","Disturbance recorder channel analogue"

########################################################################
# section 5.5.4 LN: Disturbance recorder channel binary Name: RBDR
########################################################################
":T", "IEC_RBDR"		#Logical Node Class = 'RBDR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (ChTrg)	<SPS_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (ChNum)	<ING_INT_CF>,	#O
    (TrgMod)	<ING_ENUM8_CF>,	#O
    (LevMod)	<ING_ENUM8_CF>,	#O
    (PreTmms)	<ING_INT_CF>,	#O
    (PstTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (ChTrg)	<SPS_DC>,	#M
    (ChNum)	<ING_DC>,	#O
    (TrgMod)	<ING_DC>,	#O
    (LevMod)	<ING_DC>,	#O
    (PreTmms)	<ING_DC>,	#O
    (PstTmms)	<ING_DC>,	#O
  },
  (SP){
    (ChNum)	<ING_INT_SP>,	#O
    (TrgMod)	<ING_ENUM8_SP>,	#O
    (LevMod)	<ING_ENUM8_SP>,	#O
    (PreTmms)	<ING_INT_SP>,	#O
    (PstTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (ChNum)	<ING_INT_SG>,	#O
    (TrgMod)	<ING_ENUM8_SG>,	#O
    (LevMod)	<ING_ENUM8_SG>,	#O
    (PreTmms)	<ING_INT_SG>,	#O
    (PstTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (ChTrg)	<SPS_SV>,	#M
  },
  (SE){
    (ChNum)	<ING_INT_SE>,	#O
    (TrgMod)	<ING_ENUM8_SE>,	#O
    (LevMod)	<ING_ENUM8_SE>,	#O
    (PreTmms)	<ING_INT_SE>,	#O
    (PstTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (ChTrg)	<SPS_EX>,	#M
    (ChNum)	<ING_EX>,	#O
    (TrgMod)	<ING_EX>,	#O
    (LevMod)	<ING_EX>,	#O
    (PreTmms)	<ING_EX>,	#O
    (PstTmms)	<ING_EX>,	#O
  },
}","Disturbance recorder channel binary"

########################################################################
# section 5.5.5 LN: Disturbance record handling Name: RDRS
########################################################################
":T", "IEC_RDRS"		#Logical Node Class = 'RDRS'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (AutoUpLod)	<SPC_ST>,	#O
    (DltRcd)	<SPC_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (AutoUpLod)	<SPC_CO>,	#O
    (DltRcd)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (AutoUpLod)	<SPC_CF>,	#O
    (DltRcd)	<SPC_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (AutoUpLod)	<SPC_DC>,	#O
    (DltRcd)	<SPC_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (AutoUpLod)	<SPC_SV>,	#O
    (DltRcd)	<SPC_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (AutoUpLod)	<SPC_EX>,	#O
    (DltRcd)	<SPC_EX>,	#O
  },
}","Disturbance record handling"

########################################################################
# section 5.5.6 LN: Breaker failure Name: RBRF
########################################################################
":T", "IEC_RDRF"		#Logical Node Class = 'RDRF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#O
    (OpEx)	<ACT_ST>,	#C
    (OpIn)	<ACT_ST>,	#C
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (OpEx)	<ACT_CF>,	#C
    (OpIn)	<ACT_CF>,	#C
    (FailMod)	<ING_ENUM8_CF>,	#O
    (FailTmms)	<ING_INT_CF>,	#O
    (SPlTrTmms)	<ING_INT_CF>,	#O
    (TPTrTmms)	<ING_INT_CF>,	#O
    (DetValA)	<ASG_CF>,	#O
    (ReTrMod)	<ING_ENUM8_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#O
    (OpEx)	<ACT_DC>,	#C
    (OpIn)	<ACT_DC>,	#C
    (FailMod)	<ING_DC>,	#O
    (FailTmms)	<ING_DC>,	#O
    (SPlTrTmms)	<ING_DC>,	#O
    (TPTrTmms)	<ING_DC>,	#O
    (DetValA)	<ASG_DC>,	#O
    (ReTrMod)	<ING_DC>,	#O
  },
  (SP){
    (FailMod)	<ING_ENUM8_SP>,	#O
    (FailTmms)	<ING_INT_SP>,	#O
    (SPlTrTmms)	<ING_INT_SP>,	#O
    (TPTrTmms)	<ING_INT_SP>,	#O
    (DetValA)	<ASG_SP>,	#O
    (ReTrMod)	<ING_ENUM8_SP>,	#O
  },
  (SG){
    (FailMod)	<ING_ENUM8_SG>,	#O
    (FailTmms)	<ING_INT_SG>,	#O
    (SPlTrTmms)	<ING_INT_SG>,	#O
    (TPTrTmms)	<ING_INT_SG>,	#O
    (DetValA)	<ASG_SG>,	#O
    (ReTrMod)	<ING_ENUM8_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
  },
  (SE){
    (FailMod)	<ING_ENUM8_SE>,	#O
    (FailTmms)	<ING_INT_SE>,	#O
    (SPlTrTmms)	<ING_INT_SE>,	#O
    (TPTrTmms)	<ING_INT_SE>,	#O
    (DetValA)	<ASG_SE>,	#O
    (ReTrMod)	<ING_ENUM8_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#O
    (OpEx)	<ACT_EX>,	#C
    (OpIn)	<ACT_EX>,	#C
    (FailMod)	<ING_EX>,	#O
    (FailTmms)	<ING_EX>,	#O
    (SPlTrTmms)	<ING_EX>,	#O
    (TPTrTmms)	<ING_EX>,	#O
    (DetValA)	<ASG_EX>,	#O
    (ReTrMod)	<ING_EX>,	#O
  },
}","Breaker failure"

########################################################################
# section 5.5.7 LN: Directional element Name: RDIR
########################################################################
":T", "IEC_RDIR"		#Logical Node Class = 'RDIR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Dir)	<ACD_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (ChrAng)	<ASG_CF>,	#O
    (MinFwdAng)	<ASG_CF>,	#O
    (MinRvAng)	<ASG_CF>,	#O
    (MaxFwdAng)	<ASG_CF>,	#O
    (MaxRvAng)	<ASG_CF>,	#O
    (BlkValA)	<ASG_CF>,	#O
    (BlkValV)	<ASG_CF>,	#O
    (PolQty)	<ING_ENUM8_CF>,	#O
    (MinPPV)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Dir)	<ACD_DC>,	#M
    (ChrAng)	<ASG_DC>,	#O
    (MinFwdAng)	<ASG_DC>,	#O
    (MinRvAng)	<ASG_DC>,	#O
    (MaxFwdAng)	<ASG_DC>,	#O
    (MaxRvAng)	<ASG_DC>,	#O
    (BlkValA)	<ASG_DC>,	#O
    (BlkValV)	<ASG_DC>,	#O
    (PolQty)	<ING_DC>,	#O
    (MinPPV)	<ASG_DC>,	#O
  },
  (SP){
    (ChrAng)	<ASG_SP>,	#O
    (MinFwdAng)	<ASG_SP>,	#O
    (MinRvAng)	<ASG_SP>,	#O
    (MaxFwdAng)	<ASG_SP>,	#O
    (MaxRvAng)	<ASG_SP>,	#O
    (BlkValA)	<ASG_SP>,	#O
    (BlkValV)	<ASG_SP>,	#O
    (PolQty)	<ING_ENUM8_SP>,	#O
    (MinPPV)	<ASG_SP>,	#O
  },
  (SG){
    (ChrAng)	<ASG_SG>,	#O
    (MinFwdAng)	<ASG_SG>,	#O
    (MinRvAng)	<ASG_SG>,	#O
    (MaxFwdAng)	<ASG_SG>,	#O
    (MaxRvAng)	<ASG_SG>,	#O
    (BlkValA)	<ASG_SG>,	#O
    (BlkValV)	<ASG_SG>,	#O
    (PolQty)	<ING_ENUM8_SG>,	#O
    (MinPPV)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
  },
  (SE){
    (ChrAng)	<ASG_SE>,	#O
    (MinFwdAng)	<ASG_SE>,	#O
    (MinRvAng)	<ASG_SE>,	#O
    (MaxFwdAng)	<ASG_SE>,	#O
    (MaxRvAng)	<ASG_SE>,	#O
    (BlkValA)	<ASG_SE>,	#O
    (BlkValV)	<ASG_SE>,	#O
    (PolQty)	<ING_ENUM8_SE>,	#O
    (MinPPV)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Dir)	<ACD_EX>,	#M
    (ChrAng)	<ASG_EX>,	#O
    (MinFwdAng)	<ASG_EX>,	#O
    (MinRvAng)	<ASG_EX>,	#O
    (MaxFwdAng)	<ASG_EX>,	#O
    (MaxRvAng)	<ASG_EX>,	#O
    (BlkValA)	<ASG_EX>,	#O
    (BlkValV)	<ASG_EX>,	#O
    (PolQty)	<ING_EX>,	#O
    (MinPPV)	<ASG_EX>,	#O
  },
}","Directional element"

########################################################################
# section 5.5.8 LN: Fault locator Name: RFLO
########################################################################
":T", "IEC_RFLO"		#Logical Node Class = 'RFLO'
"{
  (MX){
    (FltZ)	<CMV_MX>,	#M
    (FltDiskm)	<MV_MX>,	#M
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (FltLoop)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (FltZ)	<CMV_CF>,	#M
    (FltDiskm)	<MV_CF>,	#M
    (LinLenKm)	<ASG_CF>,	#O
    (R1)	<ASG_CF>,	#O
    (X1)	<ASG_CF>,	#O
    (R0)	<ASG_CF>,	#O
    (X0)	<ASG_CF>,	#O
    (Z1Mod)	<ASG_CF>,	#O
    (Z1Ang)	<ASG_CF>,	#O
    (Z0Mod)	<ASG_CF>,	#O
    (Z0Ang)	<ASG_CF>,	#O
    (Rm0)	<ASG_CF>,	#O
    (Xm0)	<ASG_CF>,	#O
    (Zm0Mod)	<ASG_CF>,	#O
    (Zm0Ang)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (FltZ)	<CMV_DC>,	#M
    (FltDiskm)	<MV_DC>,	#M
    (FltLoop)	<INS_DC>,	#O
    (LinLenKm)	<ASG_DC>,	#O
    (R1)	<ASG_DC>,	#O
    (X1)	<ASG_DC>,	#O
    (R0)	<ASG_DC>,	#O
    (X0)	<ASG_DC>,	#O
    (Z1Mod)	<ASG_DC>,	#O
    (Z1Ang)	<ASG_DC>,	#O
    (Z0Mod)	<ASG_DC>,	#O
    (Z0Ang)	<ASG_DC>,	#O
    (Rm0)	<ASG_DC>,	#O
    (Xm0)	<ASG_DC>,	#O
    (Zm0Mod)	<ASG_DC>,	#O
    (Zm0Ang)	<ASG_DC>,	#O
  },
  (SP){
    (LinLenKm)	<ASG_SP>,	#O
    (R1)	<ASG_SP>,	#O
    (X1)	<ASG_SP>,	#O
    (R0)	<ASG_SP>,	#O
    (X0)	<ASG_SP>,	#O
    (Z1Mod)	<ASG_SP>,	#O
    (Z1Ang)	<ASG_SP>,	#O
    (Z0Mod)	<ASG_SP>,	#O
    (Z0Ang)	<ASG_SP>,	#O
    (Rm0)	<ASG_SP>,	#O
    (Xm0)	<ASG_SP>,	#O
    (Zm0Mod)	<ASG_SP>,	#O
    (Zm0Ang)	<ASG_SP>,	#O
  },
  (SG){
    (LinLenKm)	<ASG_SG>,	#O
    (R1)	<ASG_SG>,	#O
    (X1)	<ASG_SG>,	#O
    (R0)	<ASG_SG>,	#O
    (X0)	<ASG_SG>,	#O
    (Z1Mod)	<ASG_SG>,	#O
    (Z1Ang)	<ASG_SG>,	#O
    (Z0Mod)	<ASG_SG>,	#O
    (Z0Ang)	<ASG_SG>,	#O
    (Rm0)	<ASG_SG>,	#O
    (Xm0)	<ASG_SG>,	#O
    (Zm0Mod)	<ASG_SG>,	#O
    (Zm0Ang)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (FltZ)	<CMV_SV>,	#M
    (FltDiskm)	<MV_SV>,	#M
    (FltLoop)	<INS_ENUM8_SV>,	#O
  },
  (SE){
    (LinLenKm)	<ASG_SE>,	#O
    (R1)	<ASG_SE>,	#O
    (X1)	<ASG_SE>,	#O
    (R0)	<ASG_SE>,	#O
    (X0)	<ASG_SE>,	#O
    (Z1Mod)	<ASG_SE>,	#O
    (Z1Ang)	<ASG_SE>,	#O
    (Z0Mod)	<ASG_SE>,	#O
    (Z0Ang)	<ASG_SE>,	#O
    (Rm0)	<ASG_SE>,	#O
    (Xm0)	<ASG_SE>,	#O
    (Zm0Mod)	<ASG_SE>,	#O
    (Zm0Ang)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (FltZ)	<CMV_EX>,	#M
    (FltDiskm)	<MV_EX>,	#M
    (FltLoop)	<INS_EX>,	#O
    (LinLenKm)	<ASG_EX>,	#O
    (R1)	<ASG_EX>,	#O
    (X1)	<ASG_EX>,	#O
    (R0)	<ASG_EX>,	#O
    (X0)	<ASG_EX>,	#O
    (Z1Mod)	<ASG_EX>,	#O
    (Z1Ang)	<ASG_EX>,	#O
    (Z0Mod)	<ASG_EX>,	#O
    (Z0Ang)	<ASG_EX>,	#O
    (Rm0)	<ASG_EX>,	#O
    (Xm0)	<ASG_EX>,	#O
    (Zm0Mod)	<ASG_EX>,	#O
    (Zm0Ang)	<ASG_EX>,	#O
  },
}","Fault locator"

########################################################################
# section 5.5.9 LN: Power swing detection/blocking Name: RPSB
########################################################################
":T", "IEC_RPSB"		#Logical Node Class = 'RPSB'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (Str)	<ACD_ST>,	#C1
    (Op)	<ACT_ST>,	#C2
    (BlkZn)	<SPS_ST>,	#C1
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#C2
    (SwgVal)	<ASG_CF>,	#O
    (SwgRis)	<ASG_CF>,	#O
    (SwgReact)	<ASG_CF>,	#O
    (SwgTmms)	<ING_INT_CF>,	#O
    (UnBlkTmms)	<ING_INT_CF>,	#O
    (MaxNumSlp)	<ING_INT_CF>,	#O
    (EvTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (Str)	<ACD_DC>,	#C1
    (Op)	<ACT_DC>,	#C2
    (BlkZn)	<SPS_DC>,	#C1
    (ZeroEna)	<SPG_DC>,	#O
    (NgEna)	<SPG_DC>,	#O
    (MaxEna)	<SPG_DC>,	#O
    (SwgVal)	<ASG_DC>,	#O
    (SwgRis)	<ASG_DC>,	#O
    (SwgReact)	<ASG_DC>,	#O
    (SwgTmms)	<ING_DC>,	#O
    (UnBlkTmms)	<ING_DC>,	#O
    (MaxNumSlp)	<ING_DC>,	#O
    (EvTmms)	<ING_DC>,	#O
  },
  (SP){
    (ZeroEna)	<SPG_SP>,	#O
    (NgEna)	<SPG_SP>,	#O
    (MaxEna)	<SPG_SP>,	#O
    (SwgVal)	<ASG_SP>,	#O
    (SwgRis)	<ASG_SP>,	#O
    (SwgReact)	<ASG_SP>,	#O
    (SwgTmms)	<ING_INT_SP>,	#O
    (UnBlkTmms)	<ING_INT_SP>,	#O
    (MaxNumSlp)	<ING_INT_SP>,	#O
    (EvTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (ZeroEna)	<SPG_SG>,	#O
    (NgEna)	<SPG_SG>,	#O
    (MaxEna)	<SPG_SG>,	#O
    (SwgVal)	<ASG_SG>,	#O
    (SwgRis)	<ASG_SG>,	#O
    (SwgReact)	<ASG_SG>,	#O
    (SwgTmms)	<ING_INT_SG>,	#O
    (UnBlkTmms)	<ING_INT_SG>,	#O
    (MaxNumSlp)	<ING_INT_SG>,	#O
    (EvTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkZn)	<SPS_SV>,	#C1
  },
  (SE){
    (ZeroEna)	<SPG_SE>,	#O
    (NgEna)	<SPG_SE>,	#O
    (MaxEna)	<SPG_SE>,	#O
    (SwgVal)	<ASG_SE>,	#O
    (SwgRis)	<ASG_SE>,	#O
    (SwgReact)	<ASG_SE>,	#O
    (SwgTmms)	<ING_INT_SE>,	#O
    (UnBlkTmms)	<ING_INT_SE>,	#O
    (MaxNumSlp)	<ING_INT_SE>,	#O
    (EvTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (Str)	<ACD_EX>,	#C1
    (Op)	<ACT_EX>,	#C2
    (BlkZn)	<SPS_EX>,	#C1
    (ZeroEna)	<SPG_EX>,	#O
    (NgEna)	<SPG_EX>,	#O
    (MaxEna)	<SPG_EX>,	#O
    (SwgVal)	<ASG_EX>,	#O
    (SwgRis)	<ASG_EX>,	#O
    (SwgReact)	<ASG_EX>,	#O
    (SwgTmms)	<ING_EX>,	#O
    (UnBlkTmms)	<ING_EX>,	#O
    (MaxNumSlp)	<ING_EX>,	#O
    (EvTmms)	<ING_EX>,	#O
  },
}","Power swing detection/blocking"

########################################################################
# section 5.5.10 LN: Autoreclosing Name: RREC
########################################################################
":T", "IEC_RREC"		#Logical Node Class = 'RREC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#O
    (BlkRec)	<SPC_ST>,	#O
    (ChkRec)	<SPC_ST>,	#O
    (Auto)	<SPS_ST>,	#O
    (Op)	<ACT_ST>,	#M
    (AutoRecSt)	<INS_ENUM8_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (BlkRec)	<SPC_CO>,	#O
    (ChkRec)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (BlkRec)	<SPC_CF>,	#O
    (ChkRec)	<SPC_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (Rec1Tmms)	<ING_INT_CF>,	#O
    (Rec2Tmms)	<ING_INT_CF>,	#O
    (Rec3Tmms)	<ING_INT_CF>,	#O
    (PlsTmms)	<ING_INT_CF>,	#O
    (RclTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#O
    (BlkRec)	<SPC_DC>,	#O
    (ChkRec)	<SPC_DC>,	#O
    (Auto)	<SPS_DC>,	#O
    (Op)	<ACT_DC>,	#M
    (AutoRecSt)	<INS_DC>,	#M
    (Rec1Tmms)	<ING_DC>,	#O
    (Rec2Tmms)	<ING_DC>,	#O
    (Rec3Tmms)	<ING_DC>,	#O
    (PlsTmms)	<ING_DC>,	#O
    (RclTmms)	<ING_DC>,	#O
  },
  (SP){
    (Rec1Tmms)	<ING_INT_SP>,	#O
    (Rec2Tmms)	<ING_INT_SP>,	#O
    (Rec3Tmms)	<ING_INT_SP>,	#O
    (PlsTmms)	<ING_INT_SP>,	#O
    (RclTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (Rec1Tmms)	<ING_INT_SG>,	#O
    (Rec2Tmms)	<ING_INT_SG>,	#O
    (Rec3Tmms)	<ING_INT_SG>,	#O
    (PlsTmms)	<ING_INT_SG>,	#O
    (RclTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#O
    (BlkRec)	<SPC_SV>,	#O
    (ChkRec)	<SPC_SV>,	#O
    (Auto)	<SPS_SV>,	#O
    (AutoRecSt)	<INS_ENUM8_SV>,	#M
  },
  (SE){
    (Rec1Tmms)	<ING_INT_SE>,	#O
    (Rec2Tmms)	<ING_INT_SE>,	#O
    (Rec3Tmms)	<ING_INT_SE>,	#O
    (PlsTmms)	<ING_INT_SE>,	#O
    (RclTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#O
    (BlkRec)	<SPC_EX>,	#O
    (ChkRec)	<SPC_EX>,	#O
    (Auto)	<SPS_EX>,	#O
    (Op)	<ACT_EX>,	#M
    (AutoRecSt)	<INS_EX>,	#M
    (Rec1Tmms)	<ING_EX>,	#O
    (Rec2Tmms)	<ING_EX>,	#O
    (Rec3Tmms)	<ING_EX>,	#O
    (PlsTmms)	<ING_EX>,	#O
    (RclTmms)	<ING_EX>,	#O
  },
}","Autoreclosing"

########################################################################
# section 5.5.11 LN: Synchronism-check or synchronising Name: RSYN
########################################################################
":T", "IEC_RSYN"		#Logical Node Class = 'RSYN'
"{
  (MX){
    (DifVClc)	<MV_MX>,	#O
    (DifHzClc)	<MV_MX>,	#O
    (DifAngClc)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (RHz)	<SPC_ST>,	#O
    (LHz)	<SPC_ST>,	#O
    (RV)	<SPC_ST>,	#O
    (LV)	<SPC_ST>,	#O
    (Rel)	<SPS_ST>,	#M
    (VInd)	<SPS_ST>,	#O
    (AngInd)	<SPS_ST>,	#O
    (HzInd)	<SPS_ST>,	#O
    (SynPrg)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (RHz)	<SPC_CO>,	#O
    (LHz)	<SPC_CO>,	#O
    (RV)	<SPC_CO>,	#O
    (LV)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (RHz)	<SPC_CF>,	#O
    (LHz)	<SPC_CF>,	#O
    (RV)	<SPC_CF>,	#O
    (LV)	<SPC_CF>,	#O
    (DifVClc)	<MV_CF>,	#O
    (DifHzClc)	<MV_CF>,	#O
    (DifAngClc)	<MV_CF>,	#O
    (DifV)	<ASG_CF>,	#O
    (DifHz)	<ASG_CF>,	#O
    (DifAng)	<ASG_CF>,	#O
    (LivDeaMod)	<ING_ENUM8_CF>,	#O
    (DeaLinVal)	<ASG_CF>,	#O
    (LivLinVal)	<ASG_CF>,	#O
    (DeaBusVal)	<ASG_CF>,	#O
    (LivBusVal)	<ASG_CF>,	#O
    (PlsTmms)	<ING_INT_CF>,	#O
    (BkrTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (RHz)	<SPC_DC>,	#O
    (LHz)	<SPC_DC>,	#O
    (RV)	<SPC_DC>,	#O
    (LV)	<SPC_DC>,	#O
    (Rel)	<SPS_DC>,	#M
    (VInd)	<SPS_DC>,	#O
    (AngInd)	<SPS_DC>,	#O
    (HzInd)	<SPS_DC>,	#O
    (SynPrg)	<SPS_DC>,	#O
    (DifVClc)	<MV_DC>,	#O
    (DifHzClc)	<MV_DC>,	#O
    (DifAngClc)	<MV_DC>,	#O
    (DifV)	<ASG_DC>,	#O
    (DifHz)	<ASG_DC>,	#O
    (DifAng)	<ASG_DC>,	#O
    (LivDeaMod)	<ING_DC>,	#O
    (DeaLinVal)	<ASG_DC>,	#O
    (LivLinVal)	<ASG_DC>,	#O
    (DeaBusVal)	<ASG_DC>,	#O
    (LivBusVal)	<ASG_DC>,	#O
    (PlsTmms)	<ING_DC>,	#O
    (BkrTmms)	<ING_DC>,	#O
  },
  (SP){
    (DifV)	<ASG_SP>,	#O
    (DifHz)	<ASG_SP>,	#O
    (DifAng)	<ASG_SP>,	#O
    (LivDeaMod)	<ING_ENUM8_SP>,	#O
    (DeaLinVal)	<ASG_SP>,	#O
    (LivLinVal)	<ASG_SP>,	#O
    (DeaBusVal)	<ASG_SP>,	#O
    (LivBusVal)	<ASG_SP>,	#O
    (PlsTmms)	<ING_INT_SP>,	#O
    (BkrTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (DifV)	<ASG_SG>,	#O
    (DifHz)	<ASG_SG>,	#O
    (DifAng)	<ASG_SG>,	#O
    (LivDeaMod)	<ING_ENUM8_SG>,	#O
    (DeaLinVal)	<ASG_SG>,	#O
    (LivLinVal)	<ASG_SG>,	#O
    (DeaBusVal)	<ASG_SG>,	#O
    (LivBusVal)	<ASG_SG>,	#O
    (PlsTmms)	<ING_INT_SG>,	#O
    (BkrTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (RHz)	<SPC_SV>,	#O
    (LHz)	<SPC_SV>,	#O
    (RV)	<SPC_SV>,	#O
    (LV)	<SPC_SV>,	#O
    (Rel)	<SPS_SV>,	#M
    (VInd)	<SPS_SV>,	#O
    (AngInd)	<SPS_SV>,	#O
    (HzInd)	<SPS_SV>,	#O
    (SynPrg)	<SPS_SV>,	#O
    (DifVClc)	<MV_SV>,	#O
    (DifHzClc)	<MV_SV>,	#O
    (DifAngClc)	<MV_SV>,	#O
  },
  (SE){
    (DifV)	<ASG_SE>,	#O
    (DifHz)	<ASG_SE>,	#O
    (DifAng)	<ASG_SE>,	#O
    (LivDeaMod)	<ING_ENUM8_SE>,	#O
    (DeaLinVal)	<ASG_SE>,	#O
    (LivLinVal)	<ASG_SE>,	#O
    (DeaBusVal)	<ASG_SE>,	#O
    (LivBusVal)	<ASG_SE>,	#O
    (PlsTmms)	<ING_INT_SE>,	#O
    (BkrTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (RHz)	<SPC_EX>,	#O
    (LHz)	<SPC_EX>,	#O
    (RV)	<SPC_EX>,	#O
    (LV)	<SPC_EX>,	#O
    (Rel)	<SPS_EX>,	#M
    (VInd)	<SPS_EX>,	#O
    (AngInd)	<SPS_EX>,	#O
    (HzInd)	<SPS_EX>,	#O
    (SynPrg)	<SPS_EX>,	#O
    (DifVClc)	<MV_EX>,	#O
    (DifHzClc)	<MV_EX>,	#O
    (DifAngClc)	<MV_EX>,	#O
    (DifV)	<ASG_EX>,	#O
    (DifHz)	<ASG_EX>,	#O
    (DifAng)	<ASG_EX>,	#O
    (LivDeaMod)	<ING_EX>,	#O
    (DeaLinVal)	<ASG_EX>,	#O
    (LivLinVal)	<ASG_EX>,	#O
    (DeaBusVal)	<ASG_EX>,	#O
    (LivBusVal)	<ASG_EX>,	#O
    (PlsTmms)	<ING_EX>,	#O
    (BkrTmms)	<ING_EX>,	#O
  },
}","Synchronism-check or synchronising"

########################################################################
# section 5.6.2 LN: Alarm handling  Name: CALH
########################################################################
":T", "IEC_CALH"		#Logical Node Class = 'CALH'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (GrAlm)	<SPS_ST>,	#M
    (GrWrn)	<SPS_ST>,	#O
    (AlmLstOv)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (GrAlm)	<SPS_DC>,	#M
    (GrWrn)	<SPS_DC>,	#O
    (AlmLstOv)	<SPS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (GrAlm)	<SPS_SV>,	#M
    (GrWrn)	<SPS_SV>,	#O
    (AlmLstOv)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (GrAlm)	<SPS_EX>,	#M
    (GrWrn)	<SPS_EX>,	#O
    (AlmLstOv)	<SPS_EX>,	#O
  },
}","Alarm handling"

########################################################################
# section 5.6.3 LN: Cooling group control Name: CCGR
########################################################################
":T", "IEC_CCGR"		#Logical Node Class = 'CCGR'
"{
  (MX){
    (EnvTmp)	<MV_MX>,	#O
    (OilTmpIn)	<MV_MX>,	#O
    (OilTmpOut)	<MV_MX>,	#O
    (OilMotA)	<MV_MX>,	#O
    (FanFlw)	<MV_MX>,	#O
    (FanA)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (CECtl)	<SPC_ST>,	#O
    (PmpCtlGen)	<INC_ENUM8_ST>,	#O
    (PmpCtl)	<INC_ENUM8_ST>,	#O
    (FanCtlGen)	<INC_ENUM8_ST>,	#O
    (FanCtl)	<INC_ENUM8_ST>,	#O
    (Auto)	<SPS_ST>,	#O
    (FanOvCur)	<SPS_ST>,	#O
    (PmpOvCur)	<SPS_ST>,	#O
    (PmpAlm)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (CECtl)	<SPC_CO>,	#O
    (PmpCtlGen)	<INC_ENUM8_CO>,	#O
    (PmpCtl)	<INC_ENUM8_CO>,	#O
    (FanCtlGen)	<INC_ENUM8_CO>,	#O
    (FanCtl)	<INC_ENUM8_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (EnvTmp)	<MV_CF>,	#O
    (OilTmpIn)	<MV_CF>,	#O
    (OilTmpOut)	<MV_CF>,	#O
    (OilMotA)	<MV_CF>,	#O
    (FanFlw)	<MV_CF>,	#O
    (FanA)	<MV_CF>,	#O
    (CECtl)	<SPC_CF>,	#O
    (PmpCtlGen)	<INC_ENUM8_CF>,	#O
    (PmpCtl)	<INC_ENUM8_CF>,	#O
    (FanCtlGen)	<INC_ENUM8_CF>,	#O
    (FanCtl)	<INC_ENUM8_CF>,	#O
    (OilTmpSet)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (EnvTmp)	<MV_DC>,	#O
    (OilTmpIn)	<MV_DC>,	#O
    (OilTmpOut)	<MV_DC>,	#O
    (OilMotA)	<MV_DC>,	#O
    (FanFlw)	<MV_DC>,	#O
    (FanA)	<MV_DC>,	#O
    (CECtl)	<SPC_DC>,	#O
    (PmpCtlGen)	<INC_DC>,	#O
    (PmpCtl)	<INC_DC>,	#O
    (FanCtlGen)	<INC_DC>,	#O
    (FanCtl)	<INC_DC>,	#O
    (Auto)	<SPS_DC>,	#O
    (FanOvCur)	<SPS_DC>,	#O
    (PmpOvCur)	<SPS_DC>,	#O
    (PmpAlm)	<SPS_DC>,	#O
    (OilTmpSet)	<ASG_DC>,	#O
  },
  (SP){
    (OilTmpSet)	<ASG_SP>,	#O
  },
  (SG){
    (OilTmpSet)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (EnvTmp)	<MV_SV>,	#O
    (OilTmpIn)	<MV_SV>,	#O
    (OilTmpOut)	<MV_SV>,	#O
    (OilMotA)	<MV_SV>,	#O
    (FanFlw)	<MV_SV>,	#O
    (FanA)	<MV_SV>,	#O
    (CECtl)	<SPC_SV>,	#O
    (PmpCtlGen)	<INC_ENUM8_SV>,	#O
    (PmpCtl)	<INC_ENUM8_SV>,	#O
    (FanCtlGen)	<INC_ENUM8_SV>,	#O
    (FanCtl)	<INC_ENUM8_SV>,	#O
    (Auto)	<SPS_SV>,	#O
    (FanOvCur)	<SPS_SV>,	#O
    (PmpOvCur)	<SPS_SV>,	#O
    (PmpAlm)	<SPS_SV>,	#O
  },
  (SE){
    (OilTmpSet)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (EnvTmp)	<MV_EX>,	#O
    (OilTmpIn)	<MV_EX>,	#O
    (OilTmpOut)	<MV_EX>,	#O
    (OilMotA)	<MV_EX>,	#O
    (FanFlw)	<MV_EX>,	#O
    (FanA)	<MV_EX>,	#O
    (CECtl)	<SPC_EX>,	#O
    (PmpCtlGen)	<INC_EX>,	#O
    (PmpCtl)	<INC_EX>,	#O
    (FanCtlGen)	<INC_EX>,	#O
    (FanCtl)	<INC_EX>,	#O
    (Auto)	<SPS_EX>,	#O
    (FanOvCur)	<SPS_EX>,	#O
    (PmpOvCur)	<SPS_EX>,	#O
    (PmpAlm)	<SPS_EX>,	#O
    (OilTmpSet)	<ASG_EX>,	#O
  },
}","Cooling group control"

########################################################################
# section 5.6.4 LN: Interlocking Name: CILO
########################################################################
":T", "IEC_CILO"		#Logical Node Class = 'CILO'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EnaOpn)	<SPS_ST>,	#M
    (EnaCls)	<SPS_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EnaOpn)	<SPS_DC>,	#M
    (EnaCls)	<SPS_DC>,	#M
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EnaOpn)	<SPS_SV>,	#M
    (EnaCls)	<SPS_SV>,	#M
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EnaOpn)	<SPS_EX>,	#M
    (EnaCls)	<SPS_EX>,	#M
  },
}","Interlocking"

########################################################################
# section 5.6.5 LN: Point-on-wave switching Name: CPOW
########################################################################
":T", "IEC_CPOW"		#Logical Node Class = 'CPOW'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (TmExc)	<SPS_ST>,	#M
    (StrPOW)	<SPS_ST>,	#O
    (OpOpn)	<ACT_ST>,	#O
    (OpCls)	<ACT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpOpn)	<ACT_CF>,	#O
    (OpCls)	<ACT_CF>,	#O
    (MaxDlTmms)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (TmExc)	<SPS_DC>,	#M
    (StrPOW)	<SPS_DC>,	#O
    (OpOpn)	<ACT_DC>,	#O
    (OpCls)	<ACT_DC>,	#O
    (MaxDlTmms)	<ING_DC>,	#O
  },
  (SP){
    (MaxDlTmms)	<ING_INT_SP>,	#O
  },
  (SG){
    (MaxDlTmms)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (TmExc)	<SPS_SV>,	#M
    (StrPOW)	<SPS_SV>,	#O
  },
  (SE){
    (MaxDlTmms)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (TmExc)	<SPS_EX>,	#M
    (StrPOW)	<SPS_EX>,	#O
    (OpOpn)	<ACT_EX>,	#O
    (OpCls)	<ACT_EX>,	#O
    (MaxDlTmms)	<ING_EX>,	#O
  },
}","Point-on-wave switching"

########################################################################
# section 5.6.6 LN: Switch controller Name: CSWI
########################################################################
":T", "IEC_CSWI"		#Logical Node Class = 'CSWI'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#O
    (OpCntRs)	<INC_INT_ST>,	#O
    (Pos)	<DPC_ST>,	#M
    (PosA)	<DPC_ST>,	#O
    (PosB)	<DPC_ST>,	#O
    (PosC)	<DPC_ST>,	#O
    (OpOpn)	<ACT_ST>,	#O
    (OpCls)	<ACT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (Pos)	<DPC_CO>,	#M
    (PosA)	<DPC_CO>,	#O
    (PosB)	<DPC_CO>,	#O
    (PosC)	<DPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (Pos)	<DPC_CF>,	#M
    (PosA)	<DPC_CF>,	#O
    (PosB)	<DPC_CF>,	#O
    (PosC)	<DPC_CF>,	#O
    (OpOpn)	<ACT_CF>,	#O
    (OpCls)	<ACT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#O
    (OpCntRs)	<INC_DC>,	#O
    (Pos)	<DPC_DC>,	#M
    (PosA)	<DPC_DC>,	#O
    (PosB)	<DPC_DC>,	#O
    (PosC)	<DPC_DC>,	#O
    (OpOpn)	<ACT_DC>,	#O
    (OpCls)	<ACT_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#O
    (OpCntRs)	<INC_INT_SV>,	#O
    (Pos)	<DPC_SV>,	#M
    (PosA)	<DPC_SV>,	#O
    (PosB)	<DPC_SV>,	#O
    (PosC)	<DPC_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#O
    (OpCntRs)	<INC_EX>,	#O
    (Pos)	<DPC_EX>,	#M
    (PosA)	<DPC_EX>,	#O
    (PosB)	<DPC_EX>,	#O
    (PosC)	<DPC_EX>,	#O
    (OpOpn)	<ACT_EX>,	#O
    (OpCls)	<ACT_EX>,	#O
  },
}","Switch controller"

########################################################################
# section 5.7.1 LN: Generic automatic process control Name: GAPC
########################################################################
":T", "IEC_GAPC"		#Logical Node Class = 'GAPC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#O
    (OpCntRs)	<INC_INT_ST>,	#O
    (SPCSO)	<SPC_ST>,	#O
    (DPCSO)	<DPC_ST>,	#O
    (ISCSO)	<INC_INT_ST>,	#O
    (Auto)	<SPS_ST>,	#O
    (Str)	<ACD_ST>,	#M
    (Op)	<ACT_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (SPCSO)	<SPC_CO>,	#O
    (DPCSO)	<DPC_CO>,	#O
    (ISCSO)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (SPCSO)	<SPC_CF>,	#O
    (DPCSO)	<DPC_CF>,	#O
    (ISCSO)	<INC_INT_CF>,	#O
    (Op)	<ACT_CF>,	#M
    (StrVal)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#O
    (OpCntRs)	<INC_DC>,	#O
    (SPCSO)	<SPC_DC>,	#O
    (DPCSO)	<DPC_DC>,	#O
    (ISCSO)	<INC_DC>,	#O
    (Auto)	<SPS_DC>,	#O
    (Str)	<ACD_DC>,	#M
    (Op)	<ACT_DC>,	#M
    (StrVal)	<ASG_DC>,	#O
  },
  (SP){
    (StrVal)	<ASG_SP>,	#O
  },
  (SG){
    (StrVal)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#O
    (OpCntRs)	<INC_INT_SV>,	#O
    (SPCSO)	<SPC_SV>,	#O
    (DPCSO)	<DPC_SV>,	#O
    (ISCSO)	<INC_INT_SV>,	#O
    (Auto)	<SPS_SV>,	#O
  },
  (SE){
    (StrVal)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#O
    (OpCntRs)	<INC_EX>,	#O
    (SPCSO)	<SPC_EX>,	#O
    (DPCSO)	<DPC_EX>,	#O
    (ISCSO)	<INC_EX>,	#O
    (Auto)	<SPS_EX>,	#O
    (Str)	<ACD_EX>,	#M
    (Op)	<ACT_EX>,	#M
    (StrVal)	<ASG_EX>,	#O
  },
}","Generic automatic process control"

########################################################################
# section 5.7.2 LN: Generic process I/O Name: GGIO
########################################################################
":T", "IEC_GGIO"		#Logical Node Class = 'GGIO'
"{
  (MX){
    (AnIn1)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#M
    (Loc)	<SPS_ST>,	#O
    (OpCntRs)	<INC_INT_ST>,	#O
    (SPCSO1)	<SPC_ST>,	#O
    (DPCSO1)	<DPC_ST>,	#O
    (ISCSO1)	<INC_INT_ST>,	#O
    (IntIn1)	<INS_INT_ST>,	#O
    (Alm1)	<SPS_ST>,	#O
    (Ind1)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (SPCSO1)	<SPC_CO>,	#O
    (DPCSO1)	<DPC_CO>,	#O
    (ISCSO1)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (AnIn1)	<MV_CF>,	#O
    (SPCSO1)	<SPC_CF>,	#O
    (DPCSO1)	<DPC_CF>,	#O
    (ISCSO1)	<INC_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#M
    (EEName)	<DPL_DC>,	#O
    (Loc)	<SPS_DC>,	#O
    (OpCntRs)	<INC_DC>,	#O
    (AnIn1)	<MV_DC>,	#O
    (SPCSO1)	<SPC_DC>,	#O
    (DPCSO1)	<DPC_DC>,	#O
    (ISCSO1)	<INC_DC>,	#O
    (IntIn1)	<INS_DC>,	#O
    (Alm1)	<SPS_DC>,	#O
    (Ind1)	<SPS_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#M
    (Loc)	<SPS_SV>,	#O
    (OpCntRs)	<INC_INT_SV>,	#O
    (AnIn1)	<MV_SV>,	#O
    (SPCSO1)	<SPC_SV>,	#O
    (DPCSO1)	<DPC_SV>,	#O
    (ISCSO1)	<INC_INT_SV>,	#O
    (IntIn1)	<INS_INT_SV>,	#O
    (Alm1)	<SPS_SV>,	#O
    (Ind1)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#M
    (EEName)	<DPL_EX>,	#O
    (Loc)	<SPS_EX>,	#O
    (OpCntRs)	<INC_EX>,	#O
    (AnIn1)	<MV_EX>,	#O
    (SPCSO1)	<SPC_EX>,	#O
    (DPCSO1)	<DPC_EX>,	#O
    (ISCSO1)	<INC_EX>,	#O
    (IntIn1)	<INS_EX>,	#O
    (Alm1)	<SPS_EX>,	#O
    (Ind1)	<SPS_EX>,	#O
  },
}","Generic process I/O"

########################################################################
# section 5.7.3 LN: Generic security application Name: GSAL
########################################################################
":T", "IEC_GSAL"		#Logical Node Class = 'GSAL'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#M
    (NumCntRs)	<INC_INT_ST>,	#M
    (AuthFail)	<SEC_ST>,	#M
    (AcsCtlFail)	<SEC_ST>,	#M
    (SvcViol)	<SEC_ST>,	#M
    (Ina)	<SEC_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#M
    (NumCntRs)	<INC_INT_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#M
    (NumCntRs)	<INC_INT_CF>,	#M
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#M
    (NumCntRs)	<INC_DC>,	#M
    (AuthFail)	<SEC_DC>,	#M
    (AcsCtlFail)	<SEC_DC>,	#M
    (SvcViol)	<SEC_DC>,	#M
    (Ina)	<SEC_DC>,	#M
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#M
    (NumCntRs)	<INC_INT_SV>,	#M
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#M
    (NumCntRs)	<INC_EX>,	#M
    (AuthFail)	<SEC_EX>,	#M
    (AcsCtlFail)	<SEC_EX>,	#M
    (SvcViol)	<SEC_EX>,	#M
    (Ina)	<SEC_EX>,	#M
  },
}","Generic security application"

########################################################################
# section 5.8.1 LN: Archiving Name: IARC
########################################################################
":T", "IEC_IARC"		#Logical Node Class = 'IARC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_ST>,	#M
    (NumCntRs)	<INC_INT_ST>,	#M
    (MemOv)	<SPS_ST>,	#M
    (MemUsed)	<INS_INT_ST>,	#O
    (NumRcd)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#M
    (NumCntRs)	<INC_INT_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#M
    (NumCntRs)	<INC_INT_CF>,	#M
    (MaxNumRcd)	<ING_INT_CF>,	#O
    (OpMod)	<ING_ENUM8_CF>,	#O
    (MemFull)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_DC>,	#M
    (NumCntRs)	<INC_DC>,	#M
    (MemOv)	<SPS_DC>,	#M
    (MemUsed)	<INS_DC>,	#O
    (NumRcd)	<INS_DC>,	#O
    (MaxNumRcd)	<ING_DC>,	#O
    (OpMod)	<ING_DC>,	#O
    (MemFull)	<ING_DC>,	#O
  },
  (SP){
    (MaxNumRcd)	<ING_INT_SP>,	#O
    (OpMod)	<ING_ENUM8_SP>,	#O
    (MemFull)	<ING_INT_SP>,	#O
  },
  (SG){
    (MaxNumRcd)	<ING_INT_SG>,	#O
    (OpMod)	<ING_ENUM8_SG>,	#O
    (MemFull)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_SV>,	#M
    (NumCntRs)	<INC_INT_SV>,	#M
    (MemOv)	<SPS_SV>,	#M
    (MemUsed)	<INS_INT_SV>,	#O
    (NumRcd)	<INS_INT_SV>,	#O
  },
  (SE){
    (MaxNumRcd)	<ING_INT_SE>,	#O
    (OpMod)	<ING_ENUM8_SE>,	#O
    (MemFull)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_EX>,	#M
    (NumCntRs)	<INC_EX>,	#M
    (MemOv)	<SPS_EX>,	#M
    (MemUsed)	<INS_EX>,	#O
    (NumRcd)	<INS_EX>,	#O
    (MaxNumRcd)	<ING_EX>,	#O
    (OpMod)	<ING_EX>,	#O
    (MemFull)	<ING_EX>,	#O
  },
}","Archiving"

########################################################################
# section 5.8.2 LN: Human machine interface Name: IHMI
########################################################################
":T", "IEC_IHMI"		#Logical Node Class = 'IHMI'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
  },
}","Human machine interface"

########################################################################
# section 5.8.3 LN: Telecontrol interface  Name: ITCI
########################################################################
":T", "IEC_ITCI"		#Logical Node Class = 'ITCI'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
  },
}","Telecontrol interface"

########################################################################
# section 5.8.4 LN: Telemonitoring interface Name: ITMI
########################################################################
":T", "IEC_ITMI"		#Logical Node Class = 'ITMI'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
  },
}","Telemonitoring interface"

########################################################################
# section 5.9.2 LN: Neutral current regulator Name: ANCR
########################################################################
":T", "IEC_ANCR"		#Logical Node Class = 'ANCR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (OpCntRs)	<INC_INT_ST>,	#O
    (TapChg)	<BSC_ST>,	#M
    (RCol)	<SPC_ST>,	#O
    (LCol)	<SPC_ST>,	#O
    (Auto)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (TapChg)	<BSC_CO>,	#M
    (RCol)	<SPC_CO>,	#O
    (LCol)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (TapChg)	<BSC_CF>,	#M
    (RCol)	<SPC_CF>,	#O
    (LCol)	<SPC_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (OpCntRs)	<INC_DC>,	#O
    (TapChg)	<BSC_DC>,	#M
    (RCol)	<SPC_DC>,	#O
    (LCol)	<SPC_DC>,	#O
    (Auto)	<SPS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (OpCntRs)	<INC_INT_SV>,	#O
    (TapChg)	<BSC_SV>,	#M
    (RCol)	<SPC_SV>,	#O
    (LCol)	<SPC_SV>,	#O
    (Auto)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (OpCntRs)	<INC_EX>,	#O
    (TapChg)	<BSC_EX>,	#M
    (RCol)	<SPC_EX>,	#O
    (LCol)	<SPC_EX>,	#O
    (Auto)	<SPS_EX>,	#O
  },
}","Neutral current regulator"

########################################################################
# section 5.9.3	LN: Reactive power control Name: ARCO
########################################################################
":T", "IEC_ARCO"		#Logical Node Class = 'ARCO'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (OpCntRs)	<INC_INT_ST>,	#O
    (TapChg)	<BSC_ST>,	#M
    (Auto)	<SPS_ST>,	#O
    (VOvSt)	<SPS_ST>,	#O
    (NeutAlm)	<SPS_ST>,	#O
    (DschBlk)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (TapChg)	<BSC_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (TapChg)	<BSC_CF>,	#M
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (OpCntRs)	<INC_DC>,	#O
    (TapChg)	<BSC_DC>,	#M
    (Auto)	<SPS_DC>,	#O
    (VOvSt)	<SPS_DC>,	#O
    (NeutAlm)	<SPS_DC>,	#O
    (DschBlk)	<SPS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (OpCntRs)	<INC_INT_SV>,	#O
    (TapChg)	<BSC_SV>,	#M
    (Auto)	<SPS_SV>,	#O
    (VOvSt)	<SPS_SV>,	#O
    (NeutAlm)	<SPS_SV>,	#O
    (DschBlk)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (OpCntRs)	<INC_EX>,	#O
    (TapChg)	<BSC_EX>,	#M
    (Auto)	<SPS_EX>,	#O
    (VOvSt)	<SPS_EX>,	#O
    (NeutAlm)	<SPS_EX>,	#O
    (DschBlk)	<SPS_EX>,	#O
  },
}","Reactive power control"

########################################################################
# section 5.9.4 LN: Automatic tap changer controller Name: ATCC
########################################################################
":T", "IEC_ATCC"		#Logical Node Class = 'ATCC'
"{
  (MX){
    (CtlV)	<MV_MX>,	#M
    (LodA)	<MV_MX>,	#O
    (CircA)	<MV_MX>,	#O
    (PhAng)	<MV_MX>,	#O
    (HiCtlV)	<MV_MX>,	#O
    (HiDmdA)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (OpCntRs)	<INC_INT_ST>,	#O
    (TapChg)	<BSC_ST>,	#C
    (TapPos)	<ISC_ST>,	#C
    (ParOp)	<DPC_ST>,	#M
    (LTCBlk)	<SPC_ST>,	#O
    (LTCDragRs)	<SPC_ST>,	#O
    (VRed1)	<SPC_ST>,	#O
    (VRed2)	<SPC_ST>,	#O
    (Auto)	<SPS_ST>,	#O
    (HiTapPos)	<INS_INT_ST>,	#O
    (LoTapPos)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (TapChg)	<BSC_CO>,	#C
    (TapPos)	<ISC_CO>,	#C
    (ParOp)	<DPC_CO>,	#M
    (LTCBlk)	<SPC_CO>,	#O
    (LTCDragRs)	<SPC_CO>,	#O
    (VRed1)	<SPC_CO>,	#O
    (VRed2)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (TapChg)	<BSC_CF>,	#C
    (TapPos)	<ISC_CF>,	#C
    (ParOp)	<DPC_CF>,	#M
    (LTCBlk)	<SPC_CF>,	#O
    (LTCDragRs)	<SPC_CF>,	#O
    (VRed1)	<SPC_CF>,	#O
    (VRed2)	<SPC_CF>,	#O
    (CtlV)	<MV_CF>,	#M
    (LodA)	<MV_CF>,	#O
    (CircA)	<MV_CF>,	#O
    (PhAng)	<MV_CF>,	#O
    (HiCtlV)	<MV_CF>,	#O
    (HiDmdA)	<MV_CF>,	#O
    (BndCtr)	<ASG_CF>,	#O
    (BndWid)	<ASG_CF>,	#O
    (CtlDlTmms)	<ING_INT_CF>,	#O
    (LDCR)	<ASG_CF>,	#O
    (LDCX)	<ASG_CF>,	#O
    (BlkLV)	<ASG_CF>,	#O
    (BlkRV)	<ASG_CF>,	#O
    (RnbkRV)	<ASG_CF>,	#O
    (LimLodA)	<ASG_CF>,	#O
    (LDCZ)	<ASG_CF>,	#O
    (VRedVal)	<ASG_CF>,	#O
    (TapBlkR)	<ING_INT_CF>,	#O
    (TapBlkL)	<ING_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (OpCntRs)	<INC_DC>,	#O
    (TapChg)	<BSC_DC>,	#C
    (TapPos)	<ISC_DC>,	#C
    (ParOp)	<DPC_DC>,	#M
    (LTCBlk)	<SPC_DC>,	#O
    (LTCDragRs)	<SPC_DC>,	#O
    (VRed1)	<SPC_DC>,	#O
    (VRed2)	<SPC_DC>,	#O
    (CtlV)	<MV_DC>,	#M
    (LodA)	<MV_DC>,	#O
    (CircA)	<MV_DC>,	#O
    (PhAng)	<MV_DC>,	#O
    (HiCtlV)	<MV_DC>,	#O
    (HiDmdA)	<MV_DC>,	#O
    (Auto)	<SPS_DC>,	#O
    (HiTapPos)	<INS_DC>,	#O
    (LoTapPos)	<INS_DC>,	#O
    (BndCtr)	<ASG_DC>,	#O
    (BndWid)	<ASG_DC>,	#O
    (CtlDlTmms)	<ING_DC>,	#O
    (LDCR)	<ASG_DC>,	#O
    (LDCX)	<ASG_DC>,	#O
    (BlkLV)	<ASG_DC>,	#O
    (BlkRV)	<ASG_DC>,	#O
    (RnbkRV)	<ASG_DC>,	#O
    (LimLodA)	<ASG_DC>,	#O
    (LDC)	<SPG_DC>,	#O
    (TmDlChr)	<SPG_DC>,	#O
    (LDCZ)	<ASG_DC>,	#O
    (VRedVal)	<ASG_DC>,	#O
    (TapBlkR)	<ING_DC>,	#O
    (TapBlkL)	<ING_DC>,	#O
  },
  (SP){
    (BndCtr)	<ASG_SP>,	#O
    (BndWid)	<ASG_SP>,	#O
    (CtlDlTmms)	<ING_INT_SP>,	#O
    (LDCR)	<ASG_SP>,	#O
    (LDCX)	<ASG_SP>,	#O
    (BlkLV)	<ASG_SP>,	#O
    (BlkRV)	<ASG_SP>,	#O
    (RnbkRV)	<ASG_SP>,	#O
    (LimLodA)	<ASG_SP>,	#O
    (LDC)	<SPG_SP>,	#O
    (TmDlChr)	<SPG_SP>,	#O
    (LDCZ)	<ASG_SP>,	#O
    (VRedVal)	<ASG_SP>,	#O
    (TapBlkR)	<ING_INT_SP>,	#O
    (TapBlkL)	<ING_INT_SP>,	#O
  },
  (SG){
    (BndCtr)	<ASG_SG>,	#O
    (BndWid)	<ASG_SG>,	#O
    (CtlDlTmms)	<ING_INT_SG>,	#O
    (LDCR)	<ASG_SG>,	#O
    (LDCX)	<ASG_SG>,	#O
    (BlkLV)	<ASG_SG>,	#O
    (BlkRV)	<ASG_SG>,	#O
    (RnbkRV)	<ASG_SG>,	#O
    (LimLodA)	<ASG_SG>,	#O
    (LDC)	<SPG_SG>,	#O
    (TmDlChr)	<SPG_SG>,	#O
    (LDCZ)	<ASG_SG>,	#O
    (VRedVal)	<ASG_SG>,	#O
    (TapBlkR)	<ING_INT_SG>,	#O
    (TapBlkL)	<ING_INT_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (OpCntRs)	<INC_INT_SV>,	#O
    (TapChg)	<BSC_SV>,	#C
    (TapPos)	<ISC_SV>,	#C
    (ParOp)	<DPC_SV>,	#M
    (LTCBlk)	<SPC_SV>,	#O
    (LTCDragRs)	<SPC_SV>,	#O
    (VRed1)	<SPC_SV>,	#O
    (VRed2)	<SPC_SV>,	#O
    (CtlV)	<MV_SV>,	#M
    (LodA)	<MV_SV>,	#O
    (CircA)	<MV_SV>,	#O
    (PhAng)	<MV_SV>,	#O
    (HiCtlV)	<MV_SV>,	#O
    (HiDmdA)	<MV_SV>,	#O
    (Auto)	<SPS_SV>,	#O
    (HiTapPos)	<INS_INT_SV>,	#O
    (LoTapPos)	<INS_INT_SV>,	#O
  },
  (SE){
    (BndCtr)	<ASG_SE>,	#O
    (BndWid)	<ASG_SE>,	#O
    (CtlDlTmms)	<ING_INT_SE>,	#O
    (LDCR)	<ASG_SE>,	#O
    (LDCX)	<ASG_SE>,	#O
    (BlkLV)	<ASG_SE>,	#O
    (BlkRV)	<ASG_SE>,	#O
    (RnbkRV)	<ASG_SE>,	#O
    (LimLodA)	<ASG_SE>,	#O
    (LDC)	<SPG_SE>,	#O
    (TmDlChr)	<SPG_SE>,	#O
    (LDCZ)	<ASG_SE>,	#O
    (VRedVal)	<ASG_SE>,	#O
    (TapBlkR)	<ING_INT_SE>,	#O
    (TapBlkL)	<ING_INT_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (OpCntRs)	<INC_EX>,	#O
    (TapChg)	<BSC_EX>,	#C
    (TapPos)	<ISC_EX>,	#C
    (ParOp)	<DPC_EX>,	#M
    (LTCBlk)	<SPC_EX>,	#O
    (LTCDragRs)	<SPC_EX>,	#O
    (VRed1)	<SPC_EX>,	#O
    (VRed2)	<SPC_EX>,	#O
    (CtlV)	<MV_EX>,	#M
    (LodA)	<MV_EX>,	#O
    (CircA)	<MV_EX>,	#O
    (PhAng)	<MV_EX>,	#O
    (HiCtlV)	<MV_EX>,	#O
    (HiDmdA)	<MV_EX>,	#O
    (Auto)	<SPS_EX>,	#O
    (HiTapPos)	<INS_EX>,	#O
    (LoTapPos)	<INS_EX>,	#O
    (BndCtr)	<ASG_EX>,	#O
    (BndWid)	<ASG_EX>,	#O
    (CtlDlTmms)	<ING_EX>,	#O
    (LDCR)	<ASG_EX>,	#O
    (LDCX)	<ASG_EX>,	#O
    (BlkLV)	<ASG_EX>,	#O
    (BlkRV)	<ASG_EX>,	#O
    (RnbkRV)	<ASG_EX>,	#O
    (LimLodA)	<ASG_EX>,	#O
    (LDC)	<SPG_EX>,	#O
    (TmDlChr)	<SPG_EX>,	#O
    (LDCZ)	<ASG_EX>,	#O
    (VRedVal)	<ASG_EX>,	#O
    (TapBlkR)	<ING_EX>,	#O
    (TapBlkL)	<ING_EX>,	#O
  },
}","Automatic tap changer controller"

########################################################################
# section 5.9.5 LN: Voltage control Name: AVCO
########################################################################
":T", "IEC_AVCO"		#Logical Node Class = 'AVCO'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (OpCntRs)	<INC_INT_ST>,	#O
    (TapChg)	<BSC_ST>,	#M
    (Auto)	<SPS_ST>,	#O
    (BlkEF)	<SPS_ST>,	#O
    (BlkAOv)	<SPS_ST>,	#O
    (BlkVOv)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (TapChg)	<BSC_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (TapChg)	<BSC_CF>,	#M
    (LimAOv)	<ASG_CF>,	#O
    (LimVOv)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (OpCntRs)	<INC_DC>,	#O
    (TapChg)	<BSC_DC>,	#M
    (Auto)	<SPS_DC>,	#O
    (BlkEF)	<SPS_DC>,	#O
    (BlkAOv)	<SPS_DC>,	#O
    (BlkVOv)	<SPS_DC>,	#O
    (LimAOv)	<ASG_DC>,	#O
    (LimVOv)	<ASG_DC>,	#O
  },
  (SP){
    (LimAOv)	<ASG_SP>,	#O
    (LimVOv)	<ASG_SP>,	#O
  },
  (SG){
    (LimAOv)	<ASG_SG>,	#O
    (LimVOv)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (OpCntRs)	<INC_INT_SV>,	#O
    (TapChg)	<BSC_SV>,	#M
    (Auto)	<SPS_SV>,	#O
    (BlkEF)	<SPS_SV>,	#O
    (BlkAOv)	<SPS_SV>,	#O
    (BlkVOv)	<SPS_SV>,	#O
  },
  (SE){
    (LimAOv)	<ASG_SE>,	#O
    (LimVOv)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (OpCntRs)	<INC_EX>,	#O
    (TapChg)	<BSC_EX>,	#M
    (Auto)	<SPS_EX>,	#O
    (BlkEF)	<SPS_EX>,	#O
    (BlkAOv)	<SPS_EX>,	#O
    (BlkVOv)	<SPS_EX>,	#O
    (LimAOv)	<ASG_EX>,	#O
    (LimVOv)	<ASG_EX>,	#O
  },
}","Voltage control"

########################################################################
# section 5.10.2 LN: Differential measurements Name: MDIF
########################################################################
":T", "IEC_MDIF"		#Logical Node Class = 'MDIF'
"{
  (MX){
    (OpARem)	<WYE_MX>,	#C
    (Amp1)	<SAV_MX>,	#C
    (Amp2)	<SAV_MX>,	#C
    (Amp3)	<SAV_MX>,	#C
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpARem)	<WYE_CF>,	#C
    (Amp1)	<SAV_CF>,	#C
    (Amp2)	<SAV_CF>,	#C
    (Amp3)	<SAV_CF>,	#C
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (OpARem)	<WYE_DC>,	#C
    (Amp1)	<SAV_DC>,	#C
    (Amp2)	<SAV_DC>,	#C
    (Amp3)	<SAV_DC>,	#C
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (OpARem)	<WYE_SV>,	#C
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (OpARem)	<WYE_EX>,	#C
    (Amp1)	<SAV_EX>,	#C
    (Amp2)	<SAV_EX>,	#C
    (Amp3)	<SAV_EX>,	#C
  },
}","Differential measurements"

########################################################################
# section 5.10.3 LN: Harmonics or interharmonics Name: MHAI
########################################################################
":T", "IEC_MHAI"		#Logical Node Class = 'MHAI'
"{
  (MX){
    (Hz)	<MV_MX>,	#C
    (HA)	<HWYE_MX>,	#O
    (HPhV)	<HWYE_MX>,	#O
    (HPPV)	<HDEL_MX>,	#O
    (HW)	<HWYE_MX>,	#O
    (HVAr)	<HWYE_MX>,	#O
    (HVA)	<HWYE_MX>,	#O
    (HRmsA)	<WYE_MX>,	#O
    (HRmsPhV)	<WYE_MX>,	#O
    (HRmsPPV)	<DEL_MX>,	#O
    (HTuW)	<WYE_MX>,	#O
    (HTsW)	<WYE_MX>,	#O
    (HATm)	<WYE_MX>,	#O
    (HKf)	<WYE_MX>,	#O
    (HTdf)	<WYE_MX>,	#O
    (ThdA)	<WYE_MX>,	#O
    (ThdOddA)	<WYE_MX>,	#O
    (ThdEvnA)	<WYE_MX>,	#O
    (TddA)	<WYE_MX>,	#O
    (TddOddA)	<WYE_MX>,	#O
    (TddEvnA)	<WYE_MX>,	#O
    (ThdPhV)	<WYE_MX>,	#O
    (ThdOddPhV)	<WYE_MX>,	#O
    (ThdEvnPhV)	<WYE_MX>,	#O
    (ThdPPV)	<DEL_MX>,	#O
    (ThdOddPPV)	<DEL_MX>,	#O
    (ThdEvnPPV)	<DEL_MX>,	#O
    (HCfPhV)	<WYE_MX>,	#O
    (HCfPPV)	<DEL_MX>,	#O
    (HCfA)	<WYE_MX>,	#O
    (HTif)	<WYE_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Hz)	<MV_CF>,	#C
    (HA)	<HWYE_CF>,	#O
    (HPhV)	<HWYE_CF>,	#O
    (HPPV)	<HDEL_CF>,	#O
    (HW)	<HWYE_CF>,	#O
    (HVAr)	<HWYE_CF>,	#O
    (HVA)	<HWYE_CF>,	#O
    (HRmsA)	<WYE_CF>,	#O
    (HRmsPhV)	<WYE_CF>,	#O
    (HRmsPPV)	<DEL_CF>,	#O
    (HTuW)	<WYE_CF>,	#O
    (HTsW)	<WYE_CF>,	#O
    (HATm)	<WYE_CF>,	#O
    (HKf)	<WYE_CF>,	#O
    (HTdf)	<WYE_CF>,	#O
    (ThdA)	<WYE_CF>,	#O
    (ThdOddA)	<WYE_CF>,	#O
    (ThdEvnA)	<WYE_CF>,	#O
    (TddA)	<WYE_CF>,	#O
    (TddOddA)	<WYE_CF>,	#O
    (TddEvnA)	<WYE_CF>,	#O
    (ThdPhV)	<WYE_CF>,	#O
    (ThdOddPhV)	<WYE_CF>,	#O
    (ThdEvnPhV)	<WYE_CF>,	#O
    (ThdPPV)	<DEL_CF>,	#O
    (ThdOddPPV)	<DEL_CF>,	#O
    (ThdEvnPPV)	<DEL_CF>,	#O
    (HCfPhV)	<WYE_CF>,	#O
    (HCfPPV)	<DEL_CF>,	#O
    (HCfA)	<WYE_CF>,	#O
    (HTif)	<WYE_CF>,	#O
    (HzSet)	<ASG_CF>,	#C
    (EvTmms)	<ASG_CF>,	#O
    (NumCyc)	<ING_INT_CF>,	#O
    (ThdAVal)	<ASG_CF>,	#O
    (ThdVVal)	<ASG_CF>,	#O
    (ThdATmms)	<ING_INT_CF>,	#O
    (ThdVTmms)	<ING_INT_CF>,	#O
    (NomA)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (Hz)	<MV_DC>,	#C
    (HA)	<HWYE_DC>,	#O
    (HPhV)	<HWYE_DC>,	#O
    (HPPV)	<HDEL_DC>,	#O
    (HW)	<HWYE_DC>,	#O
    (HVAr)	<HWYE_DC>,	#O
    (HVA)	<HWYE_DC>,	#O
    (HRmsA)	<WYE_DC>,	#O
    (HRmsPhV)	<WYE_DC>,	#O
    (HRmsPPV)	<DEL_DC>,	#O
    (HTuW)	<WYE_DC>,	#O
    (HTsW)	<WYE_DC>,	#O
    (HATm)	<WYE_DC>,	#O
    (HKf)	<WYE_DC>,	#O
    (HTdf)	<WYE_DC>,	#O
    (ThdA)	<WYE_DC>,	#O
    (ThdOddA)	<WYE_DC>,	#O
    (ThdEvnA)	<WYE_DC>,	#O
    (TddA)	<WYE_DC>,	#O
    (TddOddA)	<WYE_DC>,	#O
    (TddEvnA)	<WYE_DC>,	#O
    (ThdPhV)	<WYE_DC>,	#O
    (ThdOddPhV)	<WYE_DC>,	#O
    (ThdEvnPhV)	<WYE_DC>,	#O
    (ThdPPV)	<DEL_DC>,	#O
    (ThdOddPPV)	<DEL_DC>,	#O
    (ThdEvnPPV)	<DEL_DC>,	#O
    (HCfPhV)	<WYE_DC>,	#O
    (HCfPPV)	<DEL_DC>,	#O
    (HCfA)	<WYE_DC>,	#O
    (HTif)	<WYE_DC>,	#O
    (HzSet)	<ASG_DC>,	#C
    (EvTmms)	<ASG_DC>,	#O
    (NumCyc)	<ING_DC>,	#O
    (ThdAVal)	<ASG_DC>,	#O
    (ThdVVal)	<ASG_DC>,	#O
    (ThdATmms)	<ING_DC>,	#O
    (ThdVTmms)	<ING_DC>,	#O
    (NomA)	<ASG_DC>,	#O
  },
  (SP){
    (HzSet)	<ASG_SP>,	#C
    (EvTmms)	<ASG_SP>,	#O
    (NumCyc)	<ING_INT_SP>,	#O
    (ThdAVal)	<ASG_SP>,	#O
    (ThdVVal)	<ASG_SP>,	#O
    (ThdATmms)	<ING_INT_SP>,	#O
    (ThdVTmms)	<ING_INT_SP>,	#O
    (NomA)	<ASG_SP>,	#O
  },
  (SG){
    (HzSet)	<ASG_SG>,	#C
    (EvTmms)	<ASG_SG>,	#O
    (NumCyc)	<ING_INT_SG>,	#O
    (ThdAVal)	<ASG_SG>,	#O
    (ThdVVal)	<ASG_SG>,	#O
    (ThdATmms)	<ING_INT_SG>,	#O
    (ThdVTmms)	<ING_INT_SG>,	#O
    (NomA)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (Hz)	<MV_SV>,	#C
    (HRmsA)	<WYE_SV>,	#O
    (HRmsPhV)	<WYE_SV>,	#O
    (HRmsPPV)	<DEL_SV>,	#O
    (HTuW)	<WYE_SV>,	#O
    (HTsW)	<WYE_SV>,	#O
    (HATm)	<WYE_SV>,	#O
    (HKf)	<WYE_SV>,	#O
    (HTdf)	<WYE_SV>,	#O
    (ThdA)	<WYE_SV>,	#O
    (ThdOddA)	<WYE_SV>,	#O
    (ThdEvnA)	<WYE_SV>,	#O
    (TddA)	<WYE_SV>,	#O
    (TddOddA)	<WYE_SV>,	#O
    (TddEvnA)	<WYE_SV>,	#O
    (ThdPhV)	<WYE_SV>,	#O
    (ThdOddPhV)	<WYE_SV>,	#O
    (ThdEvnPhV)	<WYE_SV>,	#O
    (ThdPPV)	<DEL_SV>,	#O
    (ThdOddPPV)	<DEL_SV>,	#O
    (ThdEvnPPV)	<DEL_SV>,	#O
    (HCfPhV)	<WYE_SV>,	#O
    (HCfPPV)	<DEL_SV>,	#O
    (HCfA)	<WYE_SV>,	#O
    (HTif)	<WYE_SV>,	#O
  },
  (SE){
    (HzSet)	<ASG_SE>,	#C
    (EvTmms)	<ASG_SE>,	#O
    (NumCyc)	<ING_INT_SE>,	#O
    (ThdAVal)	<ASG_SE>,	#O
    (ThdVVal)	<ASG_SE>,	#O
    (ThdATmms)	<ING_INT_SE>,	#O
    (ThdVTmms)	<ING_INT_SE>,	#O
    (NomA)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (Hz)	<MV_EX>,	#C
    (HA)	<HWYE_EX>,	#O
    (HPhV)	<HWYE_EX>,	#O
    (HPPV)	<HDEL_EX>,	#O
    (HW)	<HWYE_EX>,	#O
    (HVAr)	<HWYE_EX>,	#O
    (HVA)	<HWYE_EX>,	#O
    (HRmsA)	<WYE_EX>,	#O
    (HRmsPhV)	<WYE_EX>,	#O
    (HRmsPPV)	<DEL_EX>,	#O
    (HTuW)	<WYE_EX>,	#O
    (HTsW)	<WYE_EX>,	#O
    (HATm)	<WYE_EX>,	#O
    (HKf)	<WYE_EX>,	#O
    (HTdf)	<WYE_EX>,	#O
    (ThdA)	<WYE_EX>,	#O
    (ThdOddA)	<WYE_EX>,	#O
    (ThdEvnA)	<WYE_EX>,	#O
    (TddA)	<WYE_EX>,	#O
    (TddOddA)	<WYE_EX>,	#O
    (TddEvnA)	<WYE_EX>,	#O
    (ThdPhV)	<WYE_EX>,	#O
    (ThdOddPhV)	<WYE_EX>,	#O
    (ThdEvnPhV)	<WYE_EX>,	#O
    (ThdPPV)	<DEL_EX>,	#O
    (ThdOddPPV)	<DEL_EX>,	#O
    (ThdEvnPPV)	<DEL_EX>,	#O
    (HCfPhV)	<WYE_EX>,	#O
    (HCfPPV)	<DEL_EX>,	#O
    (HCfA)	<WYE_EX>,	#O
    (HTif)	<WYE_EX>,	#O
    (HzSet)	<ASG_EX>,	#C
    (EvTmms)	<ASG_EX>,	#O
    (NumCyc)	<ING_EX>,	#O
    (ThdAVal)	<ASG_EX>,	#O
    (ThdVVal)	<ASG_EX>,	#O
    (ThdATmms)	<ING_EX>,	#O
    (ThdVTmms)	<ING_EX>,	#O
    (NomA)	<ASG_EX>,	#O
  },
}","Harmonics or interharmonics"

########################################################################
# section 5.10.4 LN: Non phase related harmonics or interharmonics Name: MHAN
########################################################################
":T", "IEC_MHAN"		#Logical Node Class = 'MHAN'
"{
  (MX){
    (Hz)	<MV_MX>,	#C
    (HaAmp)	<HMV_MX>,	#O
    (HaWatt)	<HMV_MX>,	#O
    (HaVolAmpr)	<HMV_MX>,	#O
    (HaVolAmp)	<HMV_MX>,	#O
    (HaRmsAmp)	<MV_MX>,	#O
    (HaRmsVol)	<MV_MX>,	#O
    (HaTuWatt)	<MV_MX>,	#O
    (HaTsWatt)	<MV_MX>,	#O
    (HaAmpTm)	<MV_MX>,	#O
    (HaKFact)	<MV_MX>,	#O
    (HaTdFact)	<MV_MX>,	#O
    (ThdAmp)	<MV_MX>,	#O
    (ThdOddAmp)	<MV_MX>,	#O
    (ThdEvnAmp)	<MV_MX>,	#O
    (TddAmp)	<MV_MX>,	#O
    (TddOddAmp)	<MV_MX>,	#O
    (TddEvnAmp)	<MV_MX>,	#O
    (ThdVol)	<MV_MX>,	#O
    (ThdOddVol)	<MV_MX>,	#O
    (ThdEvnVol)	<MV_MX>,	#O
    (HaCfAmp)	<MV_MX>,	#O
    (HaCfVol)	<MV_MX>,	#O
    (HaTiFact)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Hz)	<MV_CF>,	#C
    (HaAmp)	<HMV_CF>,	#O
    (HaWatt)	<HMV_CF>,	#O
    (HaVolAmpr)	<HMV_CF>,	#O
    (HaVolAmp)	<HMV_CF>,	#O
    (HaRmsAmp)	<MV_CF>,	#O
    (HaRmsVol)	<MV_CF>,	#O
    (HaTuWatt)	<MV_CF>,	#O
    (HaTsWatt)	<MV_CF>,	#O
    (HaAmpTm)	<MV_CF>,	#O
    (HaKFact)	<MV_CF>,	#O
    (HaTdFact)	<MV_CF>,	#O
    (ThdAmp)	<MV_CF>,	#O
    (ThdOddAmp)	<MV_CF>,	#O
    (ThdEvnAmp)	<MV_CF>,	#O
    (TddAmp)	<MV_CF>,	#O
    (TddOddAmp)	<MV_CF>,	#O
    (TddEvnAmp)	<MV_CF>,	#O
    (ThdVol)	<MV_CF>,	#O
    (ThdOddVol)	<MV_CF>,	#O
    (ThdEvnVol)	<MV_CF>,	#O
    (HaCfAmp)	<MV_CF>,	#O
    (HaCfVol)	<MV_CF>,	#O
    (HaTiFact)	<MV_CF>,	#O
    (HzSet)	<ASG_CF>,	#C
    (NumCyc)	<ING_INT_CF>,	#O
    (ThdAVal)	<ASG_CF>,	#O
    (ThdVVal)	<ASG_CF>,	#O
    (ThdATmms)	<ING_INT_CF>,	#O
    (ThdVTmms)	<ING_INT_CF>,	#O
    (NomA)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (Hz)	<MV_DC>,	#C
    (HaAmp)	<HMV_DC>,	#O
    (HaWatt)	<HMV_DC>,	#O
    (HaVolAmpr)	<HMV_DC>,	#O
    (HaVolAmp)	<HMV_DC>,	#O
    (HaRmsAmp)	<MV_DC>,	#O
    (HaRmsVol)	<MV_DC>,	#O
    (HaTuWatt)	<MV_DC>,	#O
    (HaTsWatt)	<MV_DC>,	#O
    (HaAmpTm)	<MV_DC>,	#O
    (HaKFact)	<MV_DC>,	#O
    (HaTdFact)	<MV_DC>,	#O
    (ThdAmp)	<MV_DC>,	#O
    (ThdOddAmp)	<MV_DC>,	#O
    (ThdEvnAmp)	<MV_DC>,	#O
    (TddAmp)	<MV_DC>,	#O
    (TddOddAmp)	<MV_DC>,	#O
    (TddEvnAmp)	<MV_DC>,	#O
    (ThdVol)	<MV_DC>,	#O
    (ThdOddVol)	<MV_DC>,	#O
    (ThdEvnVol)	<MV_DC>,	#O
    (HaCfAmp)	<MV_DC>,	#O
    (HaCfVol)	<MV_DC>,	#O
    (HaTiFact)	<MV_DC>,	#O
    (HzSet)	<ASG_DC>,	#C
    (NumCyc)	<ING_DC>,	#O
    (ThdAVal)	<ASG_DC>,	#O
    (ThdVVal)	<ASG_DC>,	#O
    (ThdATmms)	<ING_DC>,	#O
    (ThdVTmms)	<ING_DC>,	#O
    (NomA)	<ASG_DC>,	#O
  },
  (SP){
    (HzSet)	<ASG_SP>,	#C
    (NumCyc)	<ING_INT_SP>,	#O
    (ThdAVal)	<ASG_SP>,	#O
    (ThdVVal)	<ASG_SP>,	#O
    (ThdATmms)	<ING_INT_SP>,	#O
    (ThdVTmms)	<ING_INT_SP>,	#O
    (NomA)	<ASG_SP>,	#O
  },
  (SG){
    (HzSet)	<ASG_SG>,	#C
    (NumCyc)	<ING_INT_SG>,	#O
    (ThdAVal)	<ASG_SG>,	#O
    (ThdVVal)	<ASG_SG>,	#O
    (ThdATmms)	<ING_INT_SG>,	#O
    (ThdVTmms)	<ING_INT_SG>,	#O
    (NomA)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (Hz)	<MV_SV>,	#C
    (HaRmsAmp)	<MV_SV>,	#O
    (HaRmsVol)	<MV_SV>,	#O
    (HaTuWatt)	<MV_SV>,	#O
    (HaTsWatt)	<MV_SV>,	#O
    (HaAmpTm)	<MV_SV>,	#O
    (HaKFact)	<MV_SV>,	#O
    (HaTdFact)	<MV_SV>,	#O
    (ThdAmp)	<MV_SV>,	#O
    (ThdOddAmp)	<MV_SV>,	#O
    (ThdEvnAmp)	<MV_SV>,	#O
    (TddAmp)	<MV_SV>,	#O
    (TddOddAmp)	<MV_SV>,	#O
    (TddEvnAmp)	<MV_SV>,	#O
    (ThdVol)	<MV_SV>,	#O
    (ThdOddVol)	<MV_SV>,	#O
    (ThdEvnVol)	<MV_SV>,	#O
    (HaCfAmp)	<MV_SV>,	#O
    (HaCfVol)	<MV_SV>,	#O
    (HaTiFact)	<MV_SV>,	#O
  },
  (SE){
    (HzSet)	<ASG_SE>,	#C
    (NumCyc)	<ING_INT_SE>,	#O
    (ThdAVal)	<ASG_SE>,	#O
    (ThdVVal)	<ASG_SE>,	#O
    (ThdATmms)	<ING_INT_SE>,	#O
    (ThdVTmms)	<ING_INT_SE>,	#O
    (NomA)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (Hz)	<MV_EX>,	#C
    (HaAmp)	<HMV_EX>,	#O
    (HaWatt)	<HMV_EX>,	#O
    (HaVolAmpr)	<HMV_EX>,	#O
    (HaVolAmp)	<HMV_EX>,	#O
    (HaRmsAmp)	<MV_EX>,	#O
    (HaRmsVol)	<MV_EX>,	#O
    (HaTuWatt)	<MV_EX>,	#O
    (HaTsWatt)	<MV_EX>,	#O
    (HaAmpTm)	<MV_EX>,	#O
    (HaKFact)	<MV_EX>,	#O
    (HaTdFact)	<MV_EX>,	#O
    (ThdAmp)	<MV_EX>,	#O
    (ThdOddAmp)	<MV_EX>,	#O
    (ThdEvnAmp)	<MV_EX>,	#O
    (TddAmp)	<MV_EX>,	#O
    (TddOddAmp)	<MV_EX>,	#O
    (TddEvnAmp)	<MV_EX>,	#O
    (ThdVol)	<MV_EX>,	#O
    (ThdOddVol)	<MV_EX>,	#O
    (ThdEvnVol)	<MV_EX>,	#O
    (HaCfAmp)	<MV_EX>,	#O
    (HaCfVol)	<MV_EX>,	#O
    (HaTiFact)	<MV_EX>,	#O
    (HzSet)	<ASG_EX>,	#C
    (NumCyc)	<ING_EX>,	#O
    (ThdAVal)	<ASG_EX>,	#O
    (ThdVVal)	<ASG_EX>,	#O
    (ThdATmms)	<ING_EX>,	#O
    (ThdVTmms)	<ING_EX>,	#O
    (NomA)	<ASG_EX>,	#O
  },
}","Non phase related harmonics or interharmonics"

########################################################################
# section 5.10.5 LN: Metering Name: MMTR
########################################################################
":T", "IEC_MMTR"		#Logical Node Class = 'MMTR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (TotVAh)	<BCR_ST>,	#O
    (TotWh)	<BCR_ST>,	#O
    (TotVArh)	<BCR_ST>,	#O
    (SupWh)	<BCR_ST>,	#O
    (SupVArh)	<BCR_ST>,	#O
    (DmdWh)	<BCR_ST>,	#O
    (DmdVArh)	<BCR_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (TotVAh)	<BCR_CF>,	#O
    (TotWh)	<BCR_CF>,	#O
    (TotVArh)	<BCR_CF>,	#O
    (SupWh)	<BCR_CF>,	#O
    (SupVArh)	<BCR_CF>,	#O
    (DmdWh)	<BCR_CF>,	#O
    (DmdVArh)	<BCR_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (TotVAh)	<BCR_DC>,	#O
    (TotWh)	<BCR_DC>,	#O
    (TotVArh)	<BCR_DC>,	#O
    (SupWh)	<BCR_DC>,	#O
    (SupVArh)	<BCR_DC>,	#O
    (DmdWh)	<BCR_DC>,	#O
    (DmdVArh)	<BCR_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (TotVAh)	<BCR_EX>,	#O
    (TotWh)	<BCR_EX>,	#O
    (TotVArh)	<BCR_EX>,	#O
    (SupWh)	<BCR_EX>,	#O
    (SupVArh)	<BCR_EX>,	#O
    (DmdWh)	<BCR_EX>,	#O
    (DmdVArh)	<BCR_EX>,	#O
  },
}","Metering"

########################################################################
# section 5.10.6 LN: Non phase related Measurement Name: MMXN
########################################################################
":T", "IEC_MMXN"		#Logical Node Class = 'MMXN'
"{
  (MX){
    (Amp)	<MV_MX>,	#O
    (Vol)	<MV_MX>,	#O
    (Watt)	<MV_MX>,	#O
    (VolAmpr)	<MV_MX>,	#O
    (VolAmp)	<MV_MX>,	#O
    (PwrFact)	<MV_MX>,	#O
    (Imp)	<CMV_MX>,	#O
    (Hz)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Amp)	<MV_CF>,	#O
    (Vol)	<MV_CF>,	#O
    (Watt)	<MV_CF>,	#O
    (VolAmpr)	<MV_CF>,	#O
    (VolAmp)	<MV_CF>,	#O
    (PwrFact)	<MV_CF>,	#O
    (Imp)	<CMV_CF>,	#O
    (Hz)	<MV_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (Amp)	<MV_DC>,	#O
    (Vol)	<MV_DC>,	#O
    (Watt)	<MV_DC>,	#O
    (VolAmpr)	<MV_DC>,	#O
    (VolAmp)	<MV_DC>,	#O
    (PwrFact)	<MV_DC>,	#O
    (Imp)	<CMV_DC>,	#O
    (Hz)	<MV_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (Amp)	<MV_SV>,	#O
    (Vol)	<MV_SV>,	#O
    (Watt)	<MV_SV>,	#O
    (VolAmpr)	<MV_SV>,	#O
    (VolAmp)	<MV_SV>,	#O
    (PwrFact)	<MV_SV>,	#O
    (Imp)	<CMV_SV>,	#O
    (Hz)	<MV_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (Amp)	<MV_EX>,	#O
    (Vol)	<MV_EX>,	#O
    (Watt)	<MV_EX>,	#O
    (VolAmpr)	<MV_EX>,	#O
    (VolAmp)	<MV_EX>,	#O
    (PwrFact)	<MV_EX>,	#O
    (Imp)	<CMV_EX>,	#O
    (Hz)	<MV_EX>,	#O
  },
}","Non phase related Measurement"

########################################################################
# section 5.10.7 LN: Measurement Name: MMXU
########################################################################
":T", "IEC_MMXU"		#Logical Node Class = 'MMXU'
"{
  (MX){
    (TotW)	<MV_MX>,	#O
    (TotVAr)	<MV_MX>,	#O
    (TotVA)	<MV_MX>,	#O
    (TotPF)	<MV_MX>,	#O
    (Hz)	<MV_MX>,	#O
    (PPV)	<DEL_MX>,	#O
    (PhV)	<WYE_MX>,	#O
    (A)	<WYE_MX>,	#O
    (W)	<WYE_MX>,	#O
    (VAr)	<WYE_MX>,	#O
    (VA)	<WYE_MX>,	#O
    (PF)	<WYE_MX>,	#O
    (Z)	<WYE_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (TotW)	<MV_CF>,	#O
    (TotVAr)	<MV_CF>,	#O
    (TotVA)	<MV_CF>,	#O
    (TotPF)	<MV_CF>,	#O
    (Hz)	<MV_CF>,	#O
    (PPV)	<DEL_CF>,	#O
    (PhV)	<WYE_CF>,	#O
    (A)	<WYE_CF>,	#O
    (W)	<WYE_CF>,	#O
    (VAr)	<WYE_CF>,	#O
    (VA)	<WYE_CF>,	#O
    (PF)	<WYE_CF>,	#O
    (Z)	<WYE_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (TotW)	<MV_DC>,	#O
    (TotVAr)	<MV_DC>,	#O
    (TotVA)	<MV_DC>,	#O
    (TotPF)	<MV_DC>,	#O
    (Hz)	<MV_DC>,	#O
    (PPV)	<DEL_DC>,	#O
    (PhV)	<WYE_DC>,	#O
    (A)	<WYE_DC>,	#O
    (W)	<WYE_DC>,	#O
    (VAr)	<WYE_DC>,	#O
    (VA)	<WYE_DC>,	#O
    (PF)	<WYE_DC>,	#O
    (Z)	<WYE_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (TotW)	<MV_SV>,	#O
    (TotVAr)	<MV_SV>,	#O
    (TotVA)	<MV_SV>,	#O
    (TotPF)	<MV_SV>,	#O
    (Hz)	<MV_SV>,	#O
    (PPV)	<DEL_SV>,	#O
    (PhV)	<WYE_SV>,	#O
    (A)	<WYE_SV>,	#O
    (W)	<WYE_SV>,	#O
    (VAr)	<WYE_SV>,	#O
    (VA)	<WYE_SV>,	#O
    (PF)	<WYE_SV>,	#O
    (Z)	<WYE_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (TotW)	<MV_EX>,	#O
    (TotVAr)	<MV_EX>,	#O
    (TotVA)	<MV_EX>,	#O
    (TotPF)	<MV_EX>,	#O
    (Hz)	<MV_EX>,	#O
    (PPV)	<DEL_EX>,	#O
    (PhV)	<WYE_EX>,	#O
    (A)	<WYE_EX>,	#O
    (W)	<WYE_EX>,	#O
    (VAr)	<WYE_EX>,	#O
    (VA)	<WYE_EX>,	#O
    (PF)	<WYE_EX>,	#O
    (Z)	<WYE_EX>,	#O
  },
}","Measurement"

########################################################################
# section 5.10.8 LN: Sequence and imbalance Name: MSQI
########################################################################
":T", "IEC_MSQI"		#Logical Node Class = 'MSQI'
"{
  (MX){
    (SeqA)	<SEQ_MX>,	#C
    (SeqV)	<SEQ_MX>,	#C
    (DQ0Seq)	<SEQ_MX>,	#O
    (ImbA)	<WYE_MX>,	#O
    (ImbNgA)	<MV_MX>,	#O
    (ImbNgV)	<MV_MX>,	#O
    (ImbPPV)	<DEL_MX>,	#O
    (ImbV)	<WYE_MX>,	#O
    (ImbZroA)	<MV_MX>,	#O
    (ImbZroV)	<MV_MX>,	#O
    (MaxImbA)	<MV_MX>,	#O
    (MaxImbPPV)	<MV_MX>,	#O
    (MaxImbV)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (SeqA)	<SEQ_CF>,	#C
    (SeqV)	<SEQ_CF>,	#C
    (DQ0Seq)	<SEQ_CF>,	#O
    (ImbA)	<WYE_CF>,	#O
    (ImbNgA)	<MV_CF>,	#O
    (ImbNgV)	<MV_CF>,	#O
    (ImbPPV)	<DEL_CF>,	#O
    (ImbV)	<WYE_CF>,	#O
    (ImbZroA)	<MV_CF>,	#O
    (ImbZroV)	<MV_CF>,	#O
    (MaxImbA)	<MV_CF>,	#O
    (MaxImbPPV)	<MV_CF>,	#O
    (MaxImbV)	<MV_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (SeqA)	<SEQ_DC>,	#C
    (SeqV)	<SEQ_DC>,	#C
    (DQ0Seq)	<SEQ_DC>,	#O
    (ImbA)	<WYE_DC>,	#O
    (ImbNgA)	<MV_DC>,	#O
    (ImbNgV)	<MV_DC>,	#O
    (ImbPPV)	<DEL_DC>,	#O
    (ImbV)	<WYE_DC>,	#O
    (ImbZroA)	<MV_DC>,	#O
    (ImbZroV)	<MV_DC>,	#O
    (MaxImbA)	<MV_DC>,	#O
    (MaxImbPPV)	<MV_DC>,	#O
    (MaxImbV)	<MV_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (SeqA)	<SEQ_SV>,	#C
    (SeqV)	<SEQ_SV>,	#C
    (DQ0Seq)	<SEQ_SV>,	#O
    (ImbA)	<WYE_SV>,	#O
    (ImbNgA)	<MV_SV>,	#O
    (ImbNgV)	<MV_SV>,	#O
    (ImbPPV)	<DEL_SV>,	#O
    (ImbV)	<WYE_SV>,	#O
    (ImbZroA)	<MV_SV>,	#O
    (ImbZroV)	<MV_SV>,	#O
    (MaxImbA)	<MV_SV>,	#O
    (MaxImbPPV)	<MV_SV>,	#O
    (MaxImbV)	<MV_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (SeqA)	<SEQ_EX>,	#C
    (SeqV)	<SEQ_EX>,	#C
    (DQ0Seq)	<SEQ_EX>,	#O
    (ImbA)	<WYE_EX>,	#O
    (ImbNgA)	<MV_EX>,	#O
    (ImbNgV)	<MV_EX>,	#O
    (ImbPPV)	<DEL_EX>,	#O
    (ImbV)	<WYE_EX>,	#O
    (ImbZroA)	<MV_EX>,	#O
    (ImbZroV)	<MV_EX>,	#O
    (MaxImbA)	<MV_EX>,	#O
    (MaxImbPPV)	<MV_EX>,	#O
    (MaxImbV)	<MV_EX>,	#O
  },
}","Sequence and imbalance"

########################################################################
# section 5.10.9 LN: Metering Statistics Name: MSTA
########################################################################
":T", "IEC_MSTA"		#Logical Node Class = 'MSTA'
"{
  (MX){
    (AvAmps)	<MV_MX>,	#O
    (MaxAmps)	<MV_MX>,	#O
    (MinAmps)	<MV_MX>,	#O
    (AvVolts)	<MV_MX>,	#O
    (MaxVolts)	<MV_MX>,	#O
    (MinVolts)	<MV_MX>,	#O
    (AvVA)	<MV_MX>,	#O
    (MaxVA)	<MV_MX>,	#O
    (MinVA)	<MV_MX>,	#O
    (AvW)	<MV_MX>,	#O
    (MaxW)	<MV_MX>,	#O
    (MinW)	<MV_MX>,	#O
    (AvVAr)	<MV_MX>,	#O
    (MaxVAr)	<MV_MX>,	#O
    (MinVAr)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (EvStr)	<SPC_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (EvStr)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (AvAmps)	<MV_CF>,	#O
    (MaxAmps)	<MV_CF>,	#O
    (MinAmps)	<MV_CF>,	#O
    (AvVolts)	<MV_CF>,	#O
    (MaxVolts)	<MV_CF>,	#O
    (MinVolts)	<MV_CF>,	#O
    (AvVA)	<MV_CF>,	#O
    (MaxVA)	<MV_CF>,	#O
    (MinVA)	<MV_CF>,	#O
    (AvW)	<MV_CF>,	#O
    (MaxW)	<MV_CF>,	#O
    (MinW)	<MV_CF>,	#O
    (AvVAr)	<MV_CF>,	#O
    (MaxVAr)	<MV_CF>,	#O
    (MinVAr)	<MV_CF>,	#O
    (EvStr)	<SPC_CF>,	#O
    (EvTmms)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (AvAmps)	<MV_DC>,	#O
    (MaxAmps)	<MV_DC>,	#O
    (MinAmps)	<MV_DC>,	#O
    (AvVolts)	<MV_DC>,	#O
    (MaxVolts)	<MV_DC>,	#O
    (MinVolts)	<MV_DC>,	#O
    (AvVA)	<MV_DC>,	#O
    (MaxVA)	<MV_DC>,	#O
    (MinVA)	<MV_DC>,	#O
    (AvW)	<MV_DC>,	#O
    (MaxW)	<MV_DC>,	#O
    (MinW)	<MV_DC>,	#O
    (AvVAr)	<MV_DC>,	#O
    (MaxVAr)	<MV_DC>,	#O
    (MinVAr)	<MV_DC>,	#O
    (EvStr)	<SPC_DC>,	#O
    (EvTmms)	<ASG_DC>,	#O
  },
  (SP){
    (EvTmms)	<ASG_SP>,	#O
  },
  (SG){
    (EvTmms)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (AvAmps)	<MV_SV>,	#O
    (MaxAmps)	<MV_SV>,	#O
    (MinAmps)	<MV_SV>,	#O
    (AvVolts)	<MV_SV>,	#O
    (MaxVolts)	<MV_SV>,	#O
    (MinVolts)	<MV_SV>,	#O
    (AvVA)	<MV_SV>,	#O
    (MaxVA)	<MV_SV>,	#O
    (MinVA)	<MV_SV>,	#O
    (AvW)	<MV_SV>,	#O
    (MaxW)	<MV_SV>,	#O
    (MinW)	<MV_SV>,	#O
    (AvVAr)	<MV_SV>,	#O
    (MaxVAr)	<MV_SV>,	#O
    (MinVAr)	<MV_SV>,	#O
    (EvStr)	<SPC_SV>,	#O
  },
  (SE){
    (EvTmms)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (AvAmps)	<MV_EX>,	#O
    (MaxAmps)	<MV_EX>,	#O
    (MinAmps)	<MV_EX>,	#O
    (AvVolts)	<MV_EX>,	#O
    (MaxVolts)	<MV_EX>,	#O
    (MinVolts)	<MV_EX>,	#O
    (AvVA)	<MV_EX>,	#O
    (MaxVA)	<MV_EX>,	#O
    (MinVA)	<MV_EX>,	#O
    (AvW)	<MV_EX>,	#O
    (MaxW)	<MV_EX>,	#O
    (MinW)	<MV_EX>,	#O
    (AvVAr)	<MV_EX>,	#O
    (MaxVAr)	<MV_EX>,	#O
    (MinVAr)	<MV_EX>,	#O
    (EvStr)	<SPC_EX>,	#O
    (EvTmms)	<ASG_EX>,	#O
  },
}","Metering Statistics"

########################################################################
# section 5.11.2 LN: Monitoring and diagnostics for arcs Name: SARC
########################################################################
":T", "IEC_SARC"		#Logical Node Class = 'SARC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpCntRs)	<INC_INT_ST>,	#O
    (FACntRs)	<INC_INT_ST>,	#M
    (FADet)	<SPS_ST>,	#M
    (ArcCntRs)	<INC_INT_ST>,	#O
    (SwArcDet)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CO>,	#O
    (FACntRs)	<INC_INT_CO>,	#M
    (ArcCntRs)	<INC_INT_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (OpCntRs)	<INC_INT_CF>,	#O
    (FACntRs)	<INC_INT_CF>,	#M
    (ArcCntRs)	<INC_INT_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpCntRs)	<INC_DC>,	#O
    (FACntRs)	<INC_DC>,	#M
    (FADet)	<SPS_DC>,	#M
    (ArcCntRs)	<INC_DC>,	#O
    (SwArcDet)	<SPS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpCntRs)	<INC_INT_SV>,	#O
    (FACntRs)	<INC_INT_SV>,	#M
    (FADet)	<SPS_SV>,	#M
    (ArcCntRs)	<INC_INT_SV>,	#O
    (SwArcDet)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpCntRs)	<INC_EX>,	#O
    (FACntRs)	<INC_EX>,	#M
    (FADet)	<SPS_EX>,	#M
    (ArcCntRs)	<INC_EX>,	#O
    (SwArcDet)	<SPS_EX>,	#O
  },
}","Monitoring and diagnostics for arcs"

########################################################################
# section 5.11.3 LN: Insulation medium supervision (gas) Name: SIMG
########################################################################
":T", "IEC_SIMG"		#Logical Node Class = 'SIMG'
"{
  (MX){
    (Pres)	<MV_MX>,	#O
    (Den)	<MV_MX>,	#O
    (Tmp)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (InsAlm)	<SPS_ST>,	#M
    (InsBlk)	<SPS_ST>,	#O
    (InsTr)	<SPS_ST>,	#O
    (PresAlm)	<SPS_ST>,	#C
    (DenAlm)	<SPS_ST>,	#C
    (TmpAlm)	<SPS_ST>,	#C
    (InsLevMax)	<SPS_ST>,	#O
    (InsLevMin)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Pres)	<MV_CF>,	#O
    (Den)	<MV_CF>,	#O
    (Tmp)	<MV_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (Pres)	<MV_DC>,	#O
    (Den)	<MV_DC>,	#O
    (Tmp)	<MV_DC>,	#O
    (InsAlm)	<SPS_DC>,	#M
    (InsBlk)	<SPS_DC>,	#O
    (InsTr)	<SPS_DC>,	#O
    (PresAlm)	<SPS_DC>,	#C
    (DenAlm)	<SPS_DC>,	#C
    (TmpAlm)	<SPS_DC>,	#C
    (InsLevMax)	<SPS_DC>,	#O
    (InsLevMin)	<SPS_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (Pres)	<MV_SV>,	#O
    (Den)	<MV_SV>,	#O
    (Tmp)	<MV_SV>,	#O
    (InsAlm)	<SPS_SV>,	#M
    (InsBlk)	<SPS_SV>,	#O
    (InsTr)	<SPS_SV>,	#O
    (PresAlm)	<SPS_SV>,	#C
    (DenAlm)	<SPS_SV>,	#C
    (TmpAlm)	<SPS_SV>,	#C
    (InsLevMax)	<SPS_SV>,	#O
    (InsLevMin)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (Pres)	<MV_EX>,	#O
    (Den)	<MV_EX>,	#O
    (Tmp)	<MV_EX>,	#O
    (InsAlm)	<SPS_EX>,	#M
    (InsBlk)	<SPS_EX>,	#O
    (InsTr)	<SPS_EX>,	#O
    (PresAlm)	<SPS_EX>,	#C
    (DenAlm)	<SPS_EX>,	#C
    (TmpAlm)	<SPS_EX>,	#C
    (InsLevMax)	<SPS_EX>,	#O
    (InsLevMin)	<SPS_EX>,	#O
  },
}","Insulation medium supervision (gas)"

########################################################################
# section 5.11.4 LN: Insulation medium supervision (liquid) Name: SIML
########################################################################
":T", "IEC_SIML"		#Logical Node Class = 'SIML'
"{
  (MX){
    (Tmp)	<MV_MX>,	#O
    (Lev)	<MV_MX>,	#O
    (Pres)	<MV_MX>,	#O
    (H2O)	<MV_MX>,	#O
    (H2OTmp)	<MV_MX>,	#O
    (H2)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (InsAlm)	<SPS_ST>,	#M
    (InsBlk)	<SPS_ST>,	#O
    (InsTr)	<SPS_ST>,	#O
    (TmpAlm)	<SPS_ST>,	#C
    (PresTr)	<SPS_ST>,	#C
    (PresAlm)	<SPS_ST>,	#C
    (GasInsAlm)	<SPS_ST>,	#O
    (GasInsTr)	<SPS_ST>,	#O
    (GasFlwTr)	<SPS_ST>,	#O
    (InsLevMax)	<SPS_ST>,	#O
    (InsLevMin)	<SPS_ST>,	#O
    (H2Alm)	<SPS_ST>,	#O
    (MstAlm)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Tmp)	<MV_CF>,	#O
    (Lev)	<MV_CF>,	#O
    (Pres)	<MV_CF>,	#O
    (H2O)	<MV_CF>,	#O
    (H2OTmp)	<MV_CF>,	#O
    (H2)	<MV_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (Tmp)	<MV_DC>,	#O
    (Lev)	<MV_DC>,	#O
    (Pres)	<MV_DC>,	#O
    (H2O)	<MV_DC>,	#O
    (H2OTmp)	<MV_DC>,	#O
    (H2)	<MV_DC>,	#O
    (InsAlm)	<SPS_DC>,	#M
    (InsBlk)	<SPS_DC>,	#O
    (InsTr)	<SPS_DC>,	#O
    (TmpAlm)	<SPS_DC>,	#C
    (PresTr)	<SPS_DC>,	#C
    (PresAlm)	<SPS_DC>,	#C
    (GasInsAlm)	<SPS_DC>,	#O
    (GasInsTr)	<SPS_DC>,	#O
    (GasFlwTr)	<SPS_DC>,	#O
    (InsLevMax)	<SPS_DC>,	#O
    (InsLevMin)	<SPS_DC>,	#O
    (H2Alm)	<SPS_DC>,	#O
    (MstAlm)	<SPS_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (Tmp)	<MV_SV>,	#O
    (Lev)	<MV_SV>,	#O
    (Pres)	<MV_SV>,	#O
    (H2O)	<MV_SV>,	#O
    (H2OTmp)	<MV_SV>,	#O
    (H2)	<MV_SV>,	#O
    (InsAlm)	<SPS_SV>,	#M
    (InsBlk)	<SPS_SV>,	#O
    (InsTr)	<SPS_SV>,	#O
    (TmpAlm)	<SPS_SV>,	#C
    (PresTr)	<SPS_SV>,	#C
    (PresAlm)	<SPS_SV>,	#C
    (GasInsAlm)	<SPS_SV>,	#O
    (GasInsTr)	<SPS_SV>,	#O
    (GasFlwTr)	<SPS_SV>,	#O
    (InsLevMax)	<SPS_SV>,	#O
    (InsLevMin)	<SPS_SV>,	#O
    (H2Alm)	<SPS_SV>,	#O
    (MstAlm)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (Tmp)	<MV_EX>,	#O
    (Lev)	<MV_EX>,	#O
    (Pres)	<MV_EX>,	#O
    (H2O)	<MV_EX>,	#O
    (H2OTmp)	<MV_EX>,	#O
    (H2)	<MV_EX>,	#O
    (InsAlm)	<SPS_EX>,	#M
    (InsBlk)	<SPS_EX>,	#O
    (InsTr)	<SPS_EX>,	#O
    (TmpAlm)	<SPS_EX>,	#C
    (PresTr)	<SPS_EX>,	#C
    (PresAlm)	<SPS_EX>,	#C
    (GasInsAlm)	<SPS_EX>,	#O
    (GasInsTr)	<SPS_EX>,	#O
    (GasFlwTr)	<SPS_EX>,	#O
    (InsLevMax)	<SPS_EX>,	#O
    (InsLevMin)	<SPS_EX>,	#O
    (H2Alm)	<SPS_EX>,	#O
    (MstAlm)	<SPS_EX>,	#O
  },
}","Insulation medium supervision (liquid)"

########################################################################
# section 5.11.5 LN: Monitoring and diagnostics for partial discharges Name: SPDC
########################################################################
":T", "IEC_SPDC"		#Logical Node Class = 'SPDC'
"{
  (MX){
    (AcuPaDsch)	<MV_MX>,	#C
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpCnt)	<INS_INT_ST>,	#M
    (PaDschAlm)	<SPS_ST>,	#C
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (AcuPaDsch)	<MV_CF>,	#C
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpCnt)	<INS_DC>,	#M
    (AcuPaDsch)	<MV_DC>,	#C
    (PaDschAlm)	<SPS_DC>,	#C
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpCnt)	<INS_INT_SV>,	#M
    (AcuPaDsch)	<MV_SV>,	#C
    (PaDschAlm)	<SPS_SV>,	#C
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpCnt)	<INS_EX>,	#M
    (AcuPaDsch)	<MV_EX>,	#C
    (PaDschAlm)	<SPS_EX>,	#C
  },
}","Monitoring and diagnostics for partial discharges"

########################################################################
# section 5.12.1 LN: Circuit breaker Name: XCBR
########################################################################
":T", "IEC_XCBR"		#Logical Node Class = 'XCBR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpCnt)	<INS_INT_ST>,	#M
    (Pos)	<DPC_ST>,	#M
    (BlkOpn)	<SPC_ST>,	#M
    (BlkCls)	<SPC_ST>,	#M
    (ChaMotEna)	<SPC_ST>,	#O
    (SumSwARs)	<BCR_ST>,	#O
    (CBOpCap)	<INS_ENUM8_ST>,	#M
    (POWCap)	<INS_ENUM8_ST>,	#O
    (MaxOpCap)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (Pos)	<DPC_CO>,	#M
    (BlkOpn)	<SPC_CO>,	#M
    (BlkCls)	<SPC_CO>,	#M
    (ChaMotEna)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Pos)	<DPC_CF>,	#M
    (BlkOpn)	<SPC_CF>,	#M
    (BlkCls)	<SPC_CF>,	#M
    (ChaMotEna)	<SPC_CF>,	#O
    (SumSwARs)	<BCR_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpCnt)	<INS_DC>,	#M
    (Pos)	<DPC_DC>,	#M
    (BlkOpn)	<SPC_DC>,	#M
    (BlkCls)	<SPC_DC>,	#M
    (ChaMotEna)	<SPC_DC>,	#O
    (SumSwARs)	<BCR_DC>,	#O
    (CBOpCap)	<INS_DC>,	#M
    (POWCap)	<INS_DC>,	#O
    (MaxOpCap)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpCnt)	<INS_INT_SV>,	#M
    (Pos)	<DPC_SV>,	#M
    (BlkOpn)	<SPC_SV>,	#M
    (BlkCls)	<SPC_SV>,	#M
    (ChaMotEna)	<SPC_SV>,	#O
    (CBOpCap)	<INS_ENUM8_SV>,	#M
    (POWCap)	<INS_ENUM8_SV>,	#O
    (MaxOpCap)	<INS_ENUM8_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpCnt)	<INS_EX>,	#M
    (Pos)	<DPC_EX>,	#M
    (BlkOpn)	<SPC_EX>,	#M
    (BlkCls)	<SPC_EX>,	#M
    (ChaMotEna)	<SPC_EX>,	#O
    (SumSwARs)	<BCR_EX>,	#O
    (CBOpCap)	<INS_EX>,	#M
    (POWCap)	<INS_EX>,	#O
    (MaxOpCap)	<INS_EX>,	#O
  },
}","Circuit breaker"

########################################################################
# section 5.12.2 LN: Circuit switch Name: XSWI
########################################################################
":T", "IEC_XSWI"		#Logical Node Class = 'XSWI'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpCnt)	<INS_INT_ST>,	#M
    (Pos)	<DPC_ST>,	#M
    (BlkOpn)	<SPC_ST>,	#M
    (BlkCls)	<SPC_ST>,	#M
    (ChaMotEna)	<SPC_ST>,	#O
    (SwTyp)	<INS_ENUM8_ST>,	#M
    (SwOpCap)	<INS_ENUM8_ST>,	#M
    (MaxOpCap)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (Pos)	<DPC_CO>,	#M
    (BlkOpn)	<SPC_CO>,	#M
    (BlkCls)	<SPC_CO>,	#M
    (ChaMotEna)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Pos)	<DPC_CF>,	#M
    (BlkOpn)	<SPC_CF>,	#M
    (BlkCls)	<SPC_CF>,	#M
    (ChaMotEna)	<SPC_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpCnt)	<INS_DC>,	#M
    (Pos)	<DPC_DC>,	#M
    (BlkOpn)	<SPC_DC>,	#M
    (BlkCls)	<SPC_DC>,	#M
    (ChaMotEna)	<SPC_DC>,	#O
    (SwTyp)	<INS_DC>,	#M
    (SwOpCap)	<INS_DC>,	#M
    (MaxOpCap)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpCnt)	<INS_INT_SV>,	#M
    (Pos)	<DPC_SV>,	#M
    (BlkOpn)	<SPC_SV>,	#M
    (BlkCls)	<SPC_SV>,	#M
    (ChaMotEna)	<SPC_SV>,	#O
    (SwTyp)	<INS_ENUM8_SV>,	#M
    (SwOpCap)	<INS_ENUM8_SV>,	#M
    (MaxOpCap)	<INS_ENUM8_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpCnt)	<INS_EX>,	#M
    (Pos)	<DPC_EX>,	#M
    (BlkOpn)	<SPC_EX>,	#M
    (BlkCls)	<SPC_EX>,	#M
    (ChaMotEna)	<SPC_EX>,	#O
    (SwTyp)	<INS_EX>,	#M
    (SwOpCap)	<INS_EX>,	#M
    (MaxOpCap)	<INS_EX>,	#O
  },
}","Circuit switch"

########################################################################
# section 5.13.1 LN: Current transformer Name: TCTR
########################################################################
":T", "IEC_TCTR"		#Logical Node Class = 'TCTR'
"{
  (MX){
    (Amp)	<SAV_MX>,	#M
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Amp)	<SAV_CF>,	#M
    (ARtg)	<ASG_CF>,	#O
    (HzRtg)	<ASG_CF>,	#O
    (Rat)	<ASG_CF>,	#O
    (Cor)	<ASG_CF>,	#O
    (AngCor)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (Amp)	<SAV_DC>,	#M
    (ARtg)	<ASG_DC>,	#O
    (HzRtg)	<ASG_DC>,	#O
    (Rat)	<ASG_DC>,	#O
    (Cor)	<ASG_DC>,	#O
    (AngCor)	<ASG_DC>,	#O
  },
  (SP){
    (ARtg)	<ASG_SP>,	#O
    (HzRtg)	<ASG_SP>,	#O
    (Rat)	<ASG_SP>,	#O
    (Cor)	<ASG_SP>,	#O
    (AngCor)	<ASG_SP>,	#O
  },
  (SG){
    (ARtg)	<ASG_SG>,	#O
    (HzRtg)	<ASG_SG>,	#O
    (Rat)	<ASG_SG>,	#O
    (Cor)	<ASG_SG>,	#O
    (AngCor)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (SE){
    (ARtg)	<ASG_SE>,	#O
    (HzRtg)	<ASG_SE>,	#O
    (Rat)	<ASG_SE>,	#O
    (Cor)	<ASG_SE>,	#O
    (AngCor)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (Amp)	<SAV_EX>,	#M
    (ARtg)	<ASG_EX>,	#O
    (HzRtg)	<ASG_EX>,	#O
    (Rat)	<ASG_EX>,	#O
    (Cor)	<ASG_EX>,	#O
    (AngCor)	<ASG_EX>,	#O
  },
}","Current transformer"

########################################################################
# section 5.13.2 LN: Voltage transformer Name: TVTR
########################################################################
":T", "IEC_TVTR"		#Logical Node Class = 'TVTR'
"{
  (MX){
    (Vol)	<SAV_MX>,	#M
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (FuFail)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Vol)	<SAV_CF>,	#M
    (VRtg)	<ASG_CF>,	#O
    (HzRtg)	<ASG_CF>,	#O
    (Rat)	<ASG_CF>,	#O
    (Cor)	<ASG_CF>,	#O
    (AngCor)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (Vol)	<SAV_DC>,	#M
    (FuFail)	<SPS_DC>,	#O
    (VRtg)	<ASG_DC>,	#O
    (HzRtg)	<ASG_DC>,	#O
    (Rat)	<ASG_DC>,	#O
    (Cor)	<ASG_DC>,	#O
    (AngCor)	<ASG_DC>,	#O
  },
  (SP){
    (VRtg)	<ASG_SP>,	#O
    (HzRtg)	<ASG_SP>,	#O
    (Rat)	<ASG_SP>,	#O
    (Cor)	<ASG_SP>,	#O
    (AngCor)	<ASG_SP>,	#O
  },
  (SG){
    (VRtg)	<ASG_SG>,	#O
    (HzRtg)	<ASG_SG>,	#O
    (Rat)	<ASG_SG>,	#O
    (Cor)	<ASG_SG>,	#O
    (AngCor)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (FuFail)	<SPS_SV>,	#O
  },
  (SE){
    (VRtg)	<ASG_SE>,	#O
    (HzRtg)	<ASG_SE>,	#O
    (Rat)	<ASG_SE>,	#O
    (Cor)	<ASG_SE>,	#O
    (AngCor)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (Vol)	<SAV_EX>,	#M
    (FuFail)	<SPS_EX>,	#O
    (VRtg)	<ASG_EX>,	#O
    (HzRtg)	<ASG_EX>,	#O
    (Rat)	<ASG_EX>,	#O
    (Cor)	<ASG_EX>,	#O
    (AngCor)	<ASG_EX>,	#O
  },
}","Voltage transformer"

########################################################################
# section 5.14.1 LN: Earth fault neutralizer (Petersen coil) Name: YEFN
########################################################################
":T", "IEC_YEFN"		#Logical Node Class = 'YEFN'
"{
  (MX){
    (ECA)	<MV_MX>,	#M
    (ColPos)	<APC_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Loc)	<SPS_ST>,	#M
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (ColTapPos)	<ISC_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (ColTapPos)	<ISC_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (ECA)	<MV_CF>,	#M
    (ColTapPos)	<ISC_CF>,	#M
    (ColPos)	<APC_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (Loc)	<SPS_DC>,	#M
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (ECA)	<MV_DC>,	#M
    (ColTapPos)	<ISC_DC>,	#M
    (ColPos)	<APC_DC>,	#O
  },
  (SP){
    (ColPos)	<APC_SP>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Loc)	<SPS_SV>,	#M
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (ECA)	<MV_SV>,	#M
    (ColTapPos)	<ISC_SV>,	#M
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (Loc)	<SPS_EX>,	#M
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (ECA)	<MV_EX>,	#M
    (ColTapPos)	<ISC_EX>,	#M
    (ColPos)	<APC_EX>,	#O
  },
}","Earth fault neutralizer (Petersen coil)"

########################################################################
# section 5.14.2 LN: Tap changer Name: YLTC
########################################################################
":T", "IEC_YLTC"		#Logical Node Class = 'YLTC'
"{
  (MX){
    (Torq)	<MV_MX>,	#O
    (MotDrvA)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpCnt)	<INS_INT_ST>,	#O
    (TapPos)	<ISC_ST>,	#C
    (TapChg)	<BSC_ST>,	#C
    (EndPosR)	<SPS_ST>,	#M
    (EndPosL)	<SPS_ST>,	#M
    (OilFil)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (TapPos)	<ISC_CO>,	#C
    (TapChg)	<BSC_CO>,	#C
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Torq)	<MV_CF>,	#O
    (MotDrvA)	<MV_CF>,	#O
    (TapPos)	<ISC_CF>,	#C
    (TapChg)	<BSC_CF>,	#C
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpCnt)	<INS_DC>,	#O
    (Torq)	<MV_DC>,	#O
    (MotDrvA)	<MV_DC>,	#O
    (TapPos)	<ISC_DC>,	#C
    (TapChg)	<BSC_DC>,	#C
    (EndPosR)	<SPS_DC>,	#M
    (EndPosL)	<SPS_DC>,	#M
    (OilFil)	<SPS_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpCnt)	<INS_INT_SV>,	#O
    (Torq)	<MV_SV>,	#O
    (MotDrvA)	<MV_SV>,	#O
    (TapPos)	<ISC_SV>,	#C
    (TapChg)	<BSC_SV>,	#C
    (EndPosR)	<SPS_SV>,	#M
    (EndPosL)	<SPS_SV>,	#M
    (OilFil)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpCnt)	<INS_EX>,	#O
    (Torq)	<MV_EX>,	#O
    (MotDrvA)	<MV_EX>,	#O
    (TapPos)	<ISC_EX>,	#C
    (TapChg)	<BSC_EX>,	#C
    (EndPosR)	<SPS_EX>,	#M
    (EndPosL)	<SPS_EX>,	#M
    (OilFil)	<SPS_EX>,	#O
  },
}","Tap changer"

########################################################################
# section 5.14.3 LN: Power shunt Name: YPSH
########################################################################
":T", "IEC_YPSH"		#Logical Node Class = 'YPSH'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (Pos)	<DPC_ST>,	#M
    (BlkOpn)	<SPC_ST>,	#M
    (BlkCls)	<SPC_ST>,	#M
    (ShOpCap)	<INS_ENUM8_ST>,	#M
    (ChaMotEna)	<SPC_ST>,	#O
    (MaxOpCap)	<INS_ENUM8_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (Pos)	<DPC_CO>,	#M
    (BlkOpn)	<SPC_CO>,	#M
    (BlkCls)	<SPC_CO>,	#M
    (ChaMotEna)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Pos)	<DPC_CF>,	#M
    (BlkOpn)	<SPC_CF>,	#M
    (BlkCls)	<SPC_CF>,	#M
    (ChaMotEna)	<SPC_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (Pos)	<DPC_DC>,	#M
    (BlkOpn)	<SPC_DC>,	#M
    (BlkCls)	<SPC_DC>,	#M
    (ShOpCap)	<INS_DC>,	#M
    (ChaMotEna)	<SPC_DC>,	#O
    (MaxOpCap)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (Pos)	<DPC_SV>,	#M
    (BlkOpn)	<SPC_SV>,	#M
    (BlkCls)	<SPC_SV>,	#M
    (ShOpCap)	<INS_ENUM8_SV>,	#M
    (ChaMotEna)	<SPC_SV>,	#O
    (MaxOpCap)	<INS_ENUM8_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (Pos)	<DPC_EX>,	#M
    (BlkOpn)	<SPC_EX>,	#M
    (BlkCls)	<SPC_EX>,	#M
    (ShOpCap)	<INS_EX>,	#M
    (ChaMotEna)	<SPC_EX>,	#O
    (MaxOpCap)	<INS_EX>,	#O
  },
}","Power shunt"

########################################################################
# section 5.14.4 LN: Power transformer Name: YPTR
########################################################################
":T", "IEC_YPTR"		#Logical Node Class = 'YPTR'
"{
  (MX){
    (HPTmp)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (HPTmpAlm)	<SPS_ST>,	#O
    (HPTmpTr)	<SPS_ST>,	#O
    (OANL)	<SPS_ST>,	#O
    (OpOvA)	<SPS_ST>,	#O
    (OpOvV)	<SPS_ST>,	#O
    (OpUnV)	<SPS_ST>,	#O
    (CGAlm)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (HPTmp)	<MV_CF>,	#O
    (HiVRtg)	<ASG_CF>,	#O
    (LoVRtg)	<ASG_CF>,	#O
    (PwrRtg)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (HPTmp)	<MV_DC>,	#O
    (HPTmpAlm)	<SPS_DC>,	#O
    (HPTmpTr)	<SPS_DC>,	#O
    (OANL)	<SPS_DC>,	#O
    (OpOvA)	<SPS_DC>,	#O
    (OpOvV)	<SPS_DC>,	#O
    (OpUnV)	<SPS_DC>,	#O
    (CGAlm)	<SPS_DC>,	#O
    (HiVRtg)	<ASG_DC>,	#O
    (LoVRtg)	<ASG_DC>,	#O
    (PwrRtg)	<ASG_DC>,	#O
  },
  (SP){
    (HiVRtg)	<ASG_SP>,	#O
    (LoVRtg)	<ASG_SP>,	#O
    (PwrRtg)	<ASG_SP>,	#O
  },
  (SG){
    (HiVRtg)	<ASG_SG>,	#O
    (LoVRtg)	<ASG_SG>,	#O
    (PwrRtg)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (HPTmp)	<MV_SV>,	#O
    (HPTmpAlm)	<SPS_SV>,	#O
    (HPTmpTr)	<SPS_SV>,	#O
    (OANL)	<SPS_SV>,	#O
    (OpOvA)	<SPS_SV>,	#O
    (OpOvV)	<SPS_SV>,	#O
    (OpUnV)	<SPS_SV>,	#O
    (CGAlm)	<SPS_SV>,	#O
  },
  (SE){
    (HiVRtg)	<ASG_SE>,	#O
    (LoVRtg)	<ASG_SE>,	#O
    (PwrRtg)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (HPTmp)	<MV_EX>,	#O
    (HPTmpAlm)	<SPS_EX>,	#O
    (HPTmpTr)	<SPS_EX>,	#O
    (OANL)	<SPS_EX>,	#O
    (OpOvA)	<SPS_EX>,	#O
    (OpOvV)	<SPS_EX>,	#O
    (OpUnV)	<SPS_EX>,	#O
    (CGAlm)	<SPS_EX>,	#O
    (HiVRtg)	<ASG_EX>,	#O
    (LoVRtg)	<ASG_EX>,	#O
    (PwrRtg)	<ASG_EX>,	#O
  },
}","Power transformer"

########################################################################
# section 5.15.1 LN: Auxiliary network Name: ZAXN
########################################################################
":T", "IEC_ZAXN"		#Logical Node Class = 'ZAXN'
"{
  (MX){
    (Vol)	<MV_MX>,	#O
    (Amp)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Vol)	<MV_CF>,	#O
    (Amp)	<MV_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (Vol)	<MV_DC>,	#O
    (Amp)	<MV_DC>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (Vol)	<MV_SV>,	#O
    (Amp)	<MV_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (Vol)	<MV_EX>,	#O
    (Amp)	<MV_EX>,	#O
  },
}","Auxiliary network"

########################################################################
# section 5.15.2 LN: Battery Name: ZBAT
########################################################################
":T", "IEC_ZBAT"		#Logical Node Class = 'ZBAT'
"{
  (MX){
    (Vol)	<MV_MX>,	#O
    (VolChgRte)	<MV_MX>,	#O
    (Amp)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (BatTest)	<SPC_ST>,	#O
    (TestRsl)	<SPS_ST>,	#O
    (BatHi)	<SPS_ST>,	#O
    (BatLo)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (BatTest)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (Vol)	<MV_CF>,	#O
    (VolChgRte)	<MV_CF>,	#O
    (Amp)	<MV_CF>,	#O
    (BatTest)	<SPC_CF>,	#O
    (LoBatVal)	<ASG_CF>,	#O
    (HiBatVal)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (Vol)	<MV_DC>,	#O
    (VolChgRte)	<MV_DC>,	#O
    (Amp)	<MV_DC>,	#O
    (BatTest)	<SPC_DC>,	#O
    (TestRsl)	<SPS_DC>,	#O
    (BatHi)	<SPS_DC>,	#O
    (BatLo)	<SPS_DC>,	#O
    (LoBatVal)	<ASG_DC>,	#O
    (HiBatVal)	<ASG_DC>,	#O
  },
  (SP){
    (LoBatVal)	<ASG_SP>,	#O
    (HiBatVal)	<ASG_SP>,	#O
  },
  (SG){
    (LoBatVal)	<ASG_SG>,	#O
    (HiBatVal)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (Vol)	<MV_SV>,	#O
    (VolChgRte)	<MV_SV>,	#O
    (Amp)	<MV_SV>,	#O
    (BatTest)	<SPC_SV>,	#O
    (TestRsl)	<SPS_SV>,	#O
    (BatHi)	<SPS_SV>,	#O
    (BatLo)	<SPS_SV>,	#O
  },
  (SE){
    (LoBatVal)	<ASG_SE>,	#O
    (HiBatVal)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (Vol)	<MV_EX>,	#O
    (VolChgRte)	<MV_EX>,	#O
    (Amp)	<MV_EX>,	#O
    (BatTest)	<SPC_EX>,	#O
    (TestRsl)	<SPS_EX>,	#O
    (BatHi)	<SPS_EX>,	#O
    (BatLo)	<SPS_EX>,	#O
    (LoBatVal)	<ASG_EX>,	#O
    (HiBatVal)	<ASG_EX>,	#O
  },
}","Battery"

########################################################################
# section 5.15.3 LN: Bushing Name: ZBSH
########################################################################
":T", "IEC_ZBSH"		#Logical Node Class = 'ZBSH'
"{
  (MX){
    (React)	<MV_MX>,	#M
    (LosFact)	<MV_MX>,	#O
    (Vol)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (React)	<MV_CF>,	#M
    (LosFact)	<MV_CF>,	#O
    (Vol)	<MV_CF>,	#O
    (RefReact)	<ASG_CF>,	#O
    (RefPF)	<ASG_CF>,	#O
    (RefV)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (React)	<MV_DC>,	#M
    (LosFact)	<MV_DC>,	#O
    (Vol)	<MV_DC>,	#O
    (RefReact)	<ASG_DC>,	#O
    (RefPF)	<ASG_DC>,	#O
    (RefV)	<ASG_DC>,	#O
  },
  (SP){
    (RefReact)	<ASG_SP>,	#O
    (RefPF)	<ASG_SP>,	#O
    (RefV)	<ASG_SP>,	#O
  },
  (SG){
    (RefReact)	<ASG_SG>,	#O
    (RefPF)	<ASG_SG>,	#O
    (RefV)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (React)	<MV_SV>,	#M
    (LosFact)	<MV_SV>,	#O
    (Vol)	<MV_SV>,	#O
  },
  (SE){
    (RefReact)	<ASG_SE>,	#O
    (RefPF)	<ASG_SE>,	#O
    (RefV)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (React)	<MV_EX>,	#M
    (LosFact)	<MV_EX>,	#O
    (Vol)	<MV_EX>,	#O
    (RefReact)	<ASG_EX>,	#O
    (RefPF)	<ASG_EX>,	#O
    (RefV)	<ASG_EX>,	#O
  },
}","Bushing"

########################################################################
# section 5.15.4 LN: Power cable Name: ZCAB
########################################################################
":T", "IEC_ZCAB"		#Logical Node Class = 'ZCAB'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Power cable"

########################################################################
# section 5.15.5 LN: Capacitor bank Name: ZCAP
########################################################################
":T", "IEC_ZCAP"		#Logical Node Class = 'ZCAP'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (CapDS)	<SPC_ST>,	#M
    (DschBlk)	<SPS_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (CapDS)	<SPC_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (CapDS)	<SPC_CF>,	#M
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (CapDS)	<SPC_DC>,	#M
    (DschBlk)	<SPS_DC>,	#M
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (CapDS)	<SPC_SV>,	#M
    (DschBlk)	<SPS_SV>,	#M
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (CapDS)	<SPC_EX>,	#M
    (DschBlk)	<SPS_EX>,	#M
  },
}","Capacitor bank"

########################################################################
# section 5.15.6 LN: Converter Name: ZCON
########################################################################
":T", "IEC_ZCON"		#Logical Node Class = 'ZCON'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Converter"

########################################################################
# section 5.15.7 LN: Generator Name: ZGEN
########################################################################
":T", "IEC_ZGEN"		#Logical Node Class = 'ZGEN'
"{
  (MX){
    (GnSpd)	<MV_MX>,	#O
  },
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (GnCtl)	<DPC_ST>,	#M
    (DExt)	<SPC_ST>,	#M
    (AuxSCO)	<SPC_ST>,	#O
    (StopVlv)	<SPC_ST>,	#O
    (ReactPwrR)	<SPC_ST>,	#O
    (ReactPwrL)	<SPC_ST>,	#O
    (GnSt)	<INS_ENUM8_ST>,	#M
    (OANL)	<SPS_ST>,	#M
    (ClkRot)	<SPS_ST>,	#M
    (CntClkRot)	<SPS_ST>,	#M
    (OpUnExt)	<SPS_ST>,	#M
    (OpOvExt)	<SPS_ST>,	#M
    (LosOil)	<SPS_ST>,	#O
    (LosVac)	<SPS_ST>,	#O
    (PresAlm)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (GnCtl)	<DPC_CO>,	#M
    (DExt)	<SPC_CO>,	#M
    (AuxSCO)	<SPC_CO>,	#O
    (StopVlv)	<SPC_CO>,	#O
    (ReactPwrR)	<SPC_CO>,	#O
    (ReactPwrL)	<SPC_CO>,	#O
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (GnCtl)	<DPC_CF>,	#M
    (DExt)	<SPC_CF>,	#M
    (AuxSCO)	<SPC_CF>,	#O
    (StopVlv)	<SPC_CF>,	#O
    (ReactPwrR)	<SPC_CF>,	#O
    (ReactPwrL)	<SPC_CF>,	#O
    (GnSpd)	<MV_CF>,	#O
    (DmdPwr)	<ASG_CF>,	#O
    (PwrRtg)	<ASG_CF>,	#O
    (VRtg)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (GnCtl)	<DPC_DC>,	#M
    (DExt)	<SPC_DC>,	#M
    (AuxSCO)	<SPC_DC>,	#O
    (StopVlv)	<SPC_DC>,	#O
    (ReactPwrR)	<SPC_DC>,	#O
    (ReactPwrL)	<SPC_DC>,	#O
    (GnSpd)	<MV_DC>,	#O
    (GnSt)	<INS_DC>,	#M
    (OANL)	<SPS_DC>,	#M
    (ClkRot)	<SPS_DC>,	#M
    (CntClkRot)	<SPS_DC>,	#M
    (OpUnExt)	<SPS_DC>,	#M
    (OpOvExt)	<SPS_DC>,	#M
    (LosOil)	<SPS_DC>,	#O
    (LosVac)	<SPS_DC>,	#O
    (PresAlm)	<SPS_DC>,	#O
    (DmdPwr)	<ASG_DC>,	#O
    (PwrRtg)	<ASG_DC>,	#O
    (VRtg)	<ASG_DC>,	#O
  },
  (SP){
    (DmdPwr)	<ASG_SP>,	#O
    (PwrRtg)	<ASG_SP>,	#O
    (VRtg)	<ASG_SP>,	#O
  },
  (SG){
    (DmdPwr)	<ASG_SG>,	#O
    (PwrRtg)	<ASG_SG>,	#O
    (VRtg)	<ASG_SG>,	#O
  },
  (RP){
    (urcbMX)	<IEC_URCB>,	#O
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbMX)	<IEC_BRCB>,	#O
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (GnCtl)	<DPC_SV>,	#M
    (DExt)	<SPC_SV>,	#M
    (AuxSCO)	<SPC_SV>,	#O
    (StopVlv)	<SPC_SV>,	#O
    (ReactPwrR)	<SPC_SV>,	#O
    (ReactPwrL)	<SPC_SV>,	#O
    (GnSpd)	<MV_SV>,	#O
    (GnSt)	<INS_ENUM8_SV>,	#M
    (OANL)	<SPS_SV>,	#M
    (ClkRot)	<SPS_SV>,	#M
    (CntClkRot)	<SPS_SV>,	#M
    (OpUnExt)	<SPS_SV>,	#M
    (OpOvExt)	<SPS_SV>,	#M
    (LosOil)	<SPS_SV>,	#O
    (LosVac)	<SPS_SV>,	#O
    (PresAlm)	<SPS_SV>,	#O
  },
  (SE){
    (DmdPwr)	<ASG_SE>,	#O
    (PwrRtg)	<ASG_SE>,	#O
    (VRtg)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (GnCtl)	<DPC_EX>,	#M
    (DExt)	<SPC_EX>,	#M
    (AuxSCO)	<SPC_EX>,	#O
    (StopVlv)	<SPC_EX>,	#O
    (ReactPwrR)	<SPC_EX>,	#O
    (ReactPwrL)	<SPC_EX>,	#O
    (GnSpd)	<MV_EX>,	#O
    (GnSt)	<INS_EX>,	#M
    (OANL)	<SPS_EX>,	#M
    (ClkRot)	<SPS_EX>,	#M
    (CntClkRot)	<SPS_EX>,	#M
    (OpUnExt)	<SPS_EX>,	#M
    (OpOvExt)	<SPS_EX>,	#M
    (LosOil)	<SPS_EX>,	#O
    (LosVac)	<SPS_EX>,	#O
    (PresAlm)	<SPS_EX>,	#O
    (DmdPwr)	<ASG_EX>,	#O
    (PwrRtg)	<ASG_EX>,	#O
    (VRtg)	<ASG_EX>,	#O
  },
}","Generator"

########################################################################
# section 5.15.8 LN: Gas insulated line Name: ZGIL
########################################################################
":T", "IEC_ZGIL"		#Logical Node Class = 'ZGIL'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Gas insulated line"

########################################################################
# section 5.15.9 LN: Power overhead line Name: ZLIN
########################################################################
":T", "IEC_ZLIN"		#Logical Node Class = 'ZLIN'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Power overhead line"

########################################################################
# section 5.15.10 LN: Motor Name: ZMOT
########################################################################
":T", "IEC_ZMOT"		#Logical Node Class = 'ZMOT'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (DExt)	<SPC_ST>,	#M
    (LosOil)	<SPS_ST>,	#O
    (LosVac)	<SPS_ST>,	#O
    (PresAlm)	<SPS_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
    (DExt)	<SPC_CO>,	#M
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (DExt)	<SPC_CF>,	#M
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (DExt)	<SPC_DC>,	#M
    (LosOil)	<SPS_DC>,	#O
    (LosVac)	<SPS_DC>,	#O
    (PresAlm)	<SPS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (DExt)	<SPC_SV>,	#M
    (LosOil)	<SPS_SV>,	#O
    (LosVac)	<SPS_SV>,	#O
    (PresAlm)	<SPS_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (DExt)	<SPC_EX>,	#M
    (LosOil)	<SPS_EX>,	#O
    (LosVac)	<SPS_EX>,	#O
    (PresAlm)	<SPS_EX>,	#O
  },
}","Motor"

########################################################################
# section 5.15.11 LN: Reactor Name: ZREA
########################################################################
":T", "IEC_ZREA"		#Logical Node Class = 'ZREA'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Reactor"

########################################################################
# section 5.15.12 LN: Rotating reactive component Name: ZRRC
########################################################################
":T", "IEC_ZRRC"		#Logical Node Class = 'ZRRC'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Rotating reactive component"

########################################################################
# section 5.15.13 LN: Surge arrestor Name: ZSAR
########################################################################
":T", "IEC_ZSAR"		#Logical Node Class = 'ZSAR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
    (OPSA)	<SPS_ST>,	#M
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (OPSA)	<SPS_DC>,	#M
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
    (OPSA)	<SPS_SV>,	#M
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (OPSA)	<SPS_EX>,	#M
  },
}","Surge arrestor"

########################################################################
# section 5.15.14 LN: Thyristor controlled frequency converter Name: ZTCF
########################################################################
":T", "IEC_ZTCF"		#Logical Node Class = 'ZTCF'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
    (PwrFrq)	<ASG_CF>,	#O
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
    (PwrFrq)	<ASG_DC>,	#O
  },
  (SP){
    (PwrFrq)	<ASG_SP>,	#O
  },
  (SG){
    (PwrFrq)	<ASG_SG>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (SE){
    (PwrFrq)	<ASG_SE>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
    (PwrFrq)	<ASG_EX>,	#O
  },
}","Thyristor controlled frequency converter"

########################################################################
# section 5.15.15 LN: Thyristor controlled reactive component Name: ZTCR
########################################################################
":T", "IEC_ZTCR"		#Logical Node Class = 'ZTCR'
"{
  (ST){
    (Mod)	<INC_ENUM8_ST>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_ST>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_ST>,	#O
    (OpTmh)	<INS_INT_ST>,	#O
  },
  (CO){
    (Mod)	<INC_ENUM8_CO>,	#M	CommonLogicalNode
  },
  (CF){
    (Mod)	<INC_ENUM8_CF>,	#M	CommonLogicalNode
  },
  (DC){
    (Mod)	<INC_DC>,	#M	CommonLogicalNode
    (Beh)	<INS_DC>,	#M	CommonLogicalNode
    (Health)	<INS_DC>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_DC>,	#M	CommonLogicalNode
    (EEHealth)	<INS_DC>,	#O
    (EEName)	<DPL_DC>,	#O
    (OpTmh)	<INS_DC>,	#O
  },
  (RP){
    (urcbST)	<IEC_URCB>,	#O
  },
  (BR){
    (brcbST)	<IEC_BRCB>,	#O
  },
  (SV){
    (Mod)	<INC_ENUM8_SV>,	#M	CommonLogicalNode
    (Beh)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (Health)	<INS_ENUM8_SV>,	#M	CommonLogicalNode
    (EEHealth)	<INS_ENUM8_SV>,	#O
    (OpTmh)	<INS_INT_SV>,	#O
  },
  (EX){
    (Mod)	<INC_EX>,	#M	CommonLogicalNode
    (Beh)	<INS_EX>,	#M	CommonLogicalNode
    (Health)	<INS_EX>,	#M	CommonLogicalNode
    (NamPlt)	<LPL_EX>,	#M	CommonLogicalNode
    (EEHealth)	<INS_EX>,	#O
    (EEName)	<DPL_EX>,	#O
    (OpTmh)	<INS_EX>,	#O
  },
}","Thyristor controlled reactive component"

