/* This data table, referred to as a 'data alignment table', is used to */
/* tell MMS-LITE how data is stored in memory by the 'C' compiler. 	*/
/* The idea is that addresses of the data types described in the table	*/
/* cannot have bits set that are set in the table values. For instance,	*/
/* if the value is 0x0000, the corresponding data type can be on any	*/
/* memory boundary. If it is 0x0001, it must be on even work boundary.	*/

#if defined (linux)		/* packed	*/
ST_INT m_def_data_algn_tbl[NUM_ALGN_TYPES] =
  {
  0x0000,	/* ARRSTRT_ALGN	00  */
  0x0000,	/* ARREND_ALGN	01  */
  0x0000,	/* STRSTRT_ALGN	02  */
  0x0000,	/* STREND_ALGN	03  */
  0x0000,	/* INT8_ALGN	04  */
  0x0001,	/* INT16_ALGN	05  */
  0x0003,	/* INT32_ALGN	06  */
  0x0003,	/* INT64_ALGN	07  */
  0x0003,	/* FLOAT_ALGN	08  */
  0x0003,	/* DOUBLE_ALGN	09  */
  0x0000,	/* OCT_ALGN	10  */
  0x0000,	/* BOOL_ALGN	11  */
  0x0000,	/* BCD1_ALGN	12  */
  0x0001,	/* BCD2_ALGN	13  */
  0x0003,	/* BCD4_ALGN	14  */
  0x0000,	/* BIT_ALGN	15  */
  0x0000	/* VIS_ALGN	16  */
  };

#define M_STRSTART_MODE 	M_STRSTART_MODE_LARGEST
#define M_STREND_MODE 		M_STREND_MODE_LARGEST
#endif	/* linux */
