/**
 *
 * 文 件 名 : MUSimulator.h
 * 创建日期 : 2012-10-31 11:03
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : MU模拟器，只针对9-2协议
 * 修改记录 : 
 *            $Log: $
 *
 **/

#if !defined(AFX_MUSIMULATOR_H__038486BD_7706_423C_A600_91A3B616B8ED__INCLUDED_)
#define AFX_MUSIMULATOR_H__038486BD_7706_423C_A600_91A3B616B8ED__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "SApi.h"
#include "SRawSocket.h"
#include <math.h>
#include "sp_virtual_terminal.h"

//一个报文的最大长度
#define C_MAX_FRAME_LEN 512

#pragma pack(1)
struct stuSV92_Head1
{
	BYTE DstMac[6];
	BYTE SrcMac[6];
	BYTE VLan[2];//0x81 00
	BYTE VLan_Val[2];//0x80 08
	WORD Type;//0x88BA
	WORD AppID;
	WORD AppLen;
	WORD Res1;
	WORD Res2;
	//BYTE PDU_Len[4];//60 82 00 B5
	BYTE PDU_Len[4];//60 82 xx xx
	BYTE NumberOfAsdu[3];//80 01 01
	BYTE SeqOfAsdu[4];//A2 82 xx xx
	//BYTE Asdu_Head[4];//30 82 00 AC
	BYTE Asdu_Head[4];//30 82 XX xx
	BYTE SvId_Empty[2];//80 0? 后跟SVID字符串
};

struct stuSV92_Head2
{
	BYTE SampCnt[4];//82 02 00 00
	BYTE ConfRev[6];//83 04 00 00 00 01
	BYTE Sync[3];//85 01 01
	//BYTE Data_Head[4];//87 82 00 90
	BYTE Data_Head[4];//87 82 xx xx
};
#pragma pack(4)

//////////////////////////////////////////////////////////////////////////
// 名    称:  CMUSimulator
// 作    者:  邵凯田
// 创建时间:  2012-10-31 11:03
// 描    述:  MU模拟器
//////////////////////////////////////////////////////////////////////////
class CMUSimulator  
{
public:
	enum eMuChnType
	{
		MU_CHN_UNKNOWN = 0,
		MU_CHN_AU = 1,//交流电压
		MU_CHN_AI = 2,//交流电流
		MU_CHN_D  = 3,//直流量
		MU_DELAY  = 4,//额定延时时间
	};
	class CChannel
	{
	public:
		CChannel();
		~CChannel();

		eMuChnType m_iType;//通道类型:0:未知，1:AU，2:AI，3:D
		int m_iValue;//当前值，交流量为有效值，直流量的瞬时值
		int m_iNewValue;//新设定值，当m_iValue与其不一致时应用
		DWORD m_q;//品质
	};

	CMUSimulator(stuSclVtIedSmvOut *pSmvOut,SString srcmac);
	virtual ~CMUSimulator();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  使用通道数量初始化模拟MU
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:43
	// 参数说明:  @chns为通道数量
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool Init(int chns);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  添加一个新的通道
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 15:30
	// 参数说明:  @eType为类型
	//            @iValue为当前值
	//            @q为品质
	// 返 回 值:  新通道指针
	//////////////////////////////////////////////////////////////////////////
	CChannel* AddChannel(eMuChnType eType,int iValue,DWORD q);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新目标MAC地址
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 18:54
	// 参数说明:  @pMac为目标MAC地址
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateDstMac(BYTE *pMac);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新源MAC地址
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 18:54
	// 参数说明:  @pMac为源MAC地址
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateSrcMac(BYTE *pMac);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新APPID
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:19
	// 参数说明:  @appid
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateAppid(WORD appid);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新保留字
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:19
	// 参数说明:  @r1/r2
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateReserver(WORD r1,WORD r2);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新SVID
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:19
	// 参数说明:  @svid
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateSvID(SString svid);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新同步标识
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:19
	// 参数说明:  @sync=true表示同步，false表示失步
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateSync(bool sync);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新通道类型
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:59
	// 参数说明:  @pChn为通道
	//            @eType为类型
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateChnType(CChannel *pChn,eMuChnType eType);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新通道品质
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:20
	// 参数说明:  @pChn为对应通道
	//            @q为品质字
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateChnQ(CChannel* pChn, DWORD q);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  更新通道值
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:21
	// 参数说明:  @pChn为对应通道
	//            @iNewValue为新的值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void UpdateChnData(CChannel *pChn,int iNewValue);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  重新构建缓冲区
	// 作    者:  邵凯田
	// 创建时间:  2012-10-31 16:42
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void RebuildBuffer();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取帧长度
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 10:59
	// 参数说明:  void
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	inline int GetFrameLen(){return m_iFrameLen;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取一个新的采样点
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 10:59
	// 参数说明:  void
	// 返 回 值:  BYTE*
	//////////////////////////////////////////////////////////////////////////
	BYTE* GetNewSamplePoint();

protected:


public:
	stuSclVtIedSmvOut *m_pSmvOut;
	int m_iDistrub;//波动率，单位为万分之一，0表示数据无波动
	int m_iSampRate;//每周期的采样点数，缺省为80，实例时指针，中途不允许修改
	int m_iSampCount;//当前的采样序号0~(m_iSampRate*50-1)循环
	int m_iSampPos;//当前采样点位置0~m_iSampRate-1循环
	int m_iBadLevel;//缺造坏数据的级别，0表示不生成坏数据，1表示偶尔异常，2表示频繁异常
	WORD m_iVLanId;
	BYTE m_iVLanP;

	BYTE m_SrcMac[6];//源MAC地址
	BYTE m_DstMac[6];//目标MAC地址
	WORD m_iAppid;//APPID
	WORD m_iReserver1,m_iReserver2;//两个保留字
	int m_iAsduNum;//ASDU数量，固定为1
	SString m_sSvId;//采样标识
	DWORD m_dwConfRev;//版本号
	bool m_bSync;//同步标识
	
	int m_iChns;//通道数量
	SPtrList<CChannel> m_Chns;//全部的通道

	BYTE *m_pBuffer;//发送缓冲区大小
	int m_iFrameLen;//一条报文的长度，单位字节
	int m_iSeqPos;//SEQ所在位置
	int m_iDatPos;//数据起始位置
};

//////////////////////////////////////////////////////////////////////////
// 名    称:  CMUSimPort
// 作    者:  邵凯田
// 创建时间:  2012-11-1 11:29
// 描    述:  MU模拟器端口，一个端口可以发送多个MU
//////////////////////////////////////////////////////////////////////////
class CMUSimPort : public SService
{
public:
	CMUSimPort(SString sDevName);
	~CMUSimPort();
	////////////////////////////////////////////////////////////////////////
	// 描    述:  启动服务,虚函数，派生函数中必须先调用此函数
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 11:29
	// 参数说明:  void
	// 返 回 值:  true表示服务启动成功,false表示服务启动失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Start();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  停止服务，派生函数中必须先调用此函数
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 11:29
	// 参数说明:  void
	// 返 回 值:  true表示服务停止成功,false表示服务停止失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Stop();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  发送全部MU
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 11:40
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SendAllMu();

	static void* ThreadSend(void *lp);

	bool CheckSmvIsExist(stuSclVtIedSmvOut* pCur);
	SString m_sDevName;//发送网卡名
	SPtrList<CMUSimulator> m_MUs;//MU列表

#ifdef WIN32
	pcap_t *m_pCap;
	pcap_send_queue *m_pSendQueue;
	struct pcap_pkthdr m_PktHdr;
	char m_ErrBuf[1000];
#else
	SRawSocketSend m_Sender;
#endif
};

//////////////////////////////////////////////////////////////////////////
// 名    称:  CMUSimManager
// 作    者:  邵凯田
// 创建时间:  2012-10-31 14:21
// 描    述:  MU模拟器管理器
//////////////////////////////////////////////////////////////////////////
class CMUSimManager
{
public:
	CMUSimManager();
	virtual ~CMUSimManager();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  查找指针网卡名的端口实例，不存在则新创建
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 13:22
	// 参数说明:  @sDevName为网卡名
	// 返 回 值:  CMUSimPort*
	//////////////////////////////////////////////////////////////////////////
	CMUSimPort* SearchPort(SString sDevName);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  添加一个新的MU
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 11:59
	// 参数说明:  sDevName为网卡名
	//            @pMU为初始化后的MU实例
	// 返 回 值:  CMUSimulator*
	//////////////////////////////////////////////////////////////////////////
	CMUSimulator* AddMU(SString sDevName,CMUSimulator *pMU);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  停止全部发送，释放对象
	// 作    者:  邵凯田
	// 创建时间:  2012-11-1 11:59
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void Clear();

	SPtrList<CMUSimPort> m_Ports;
};

#endif // !defined(AFX_MUSIMULATOR_H__038486BD_7706_423C_A600_91A3B616B8ED__INCLUDED_)
