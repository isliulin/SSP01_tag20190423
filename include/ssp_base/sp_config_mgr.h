/**
 *
 * 文 件 名 : ConfigMgr.h
 * 创建日期 : 2015-7-29 13:52
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : 配置文件管理器，管理所有配置文件，支持配置文件的动态加载（自动监视配置文件变化）
 * 修改记录 : 
 *            $Log: $
 *
 * Ver  Date        Author  Comments
 * ---  ----------  ------  -------------------------------------------
 * 001	2015-7-29	邵凯田　创建文件
 *
 **/

#ifndef __SP_CONFIG_MANAGER_H__
#define __SP_CONFIG_MANAGER_H__

#include "SApi.h"
#include "SList.h"
#include "SFile.h"
#include "SDateTime.h"
#include "ssp_base_inc.h"
//////////////////////////////////////////////////////////////////////////
// 名    称:  eSpConfigType
// 作    者:  邵凯田
// 创建时间:  2015-7-29 15:31
// 描    述:  配置文件类型定义
//////////////////////////////////////////////////////////////////////////
enum eSpConfigType
{
	SPCFG_UNKNOWN=0,		//未知配置文件
	SPCFG_LOG_CONFIG=1,		//日志配置文件
	SPCFG_UNIT_CONFIG,		//单元配置文件
	SPCFG_DATA_WINDOW,		//数据窗口配置文件
	SPCFG_DB_CONFIG,		//数据库配置文件
	SPCFG_FUN_POINT,		//系统功能点配置文件
	SPCFG_SVGLIB,			//SVG图元库配置文件
	SPCFG_SYN_SHIELD,		//正向隔离同步配置文件（内、外网格式相同）

	SPCFG_USER,				//应用层自定义配置文件，多个配置可依此累加
	SPCFG_USER2,			//应用层自定义配置文件
	SPCFG_USER3,			//应用层自定义配置文件
	SPCFG_USER4,			//应用层自定义配置文件
	SPCFG_USER5,			//应用层自定义配置文件
	SPCFG_USER6,			//应用层自定义配置文件
	SPCFG_USER7,			//应用层自定义配置文件
	SPCFG_USER8,			//应用层自定义配置文件
	SPCFG_USER9,			//应用层自定义配置文件
	SPCFG_USER10,			//应用层自定义配置文件

	SPCFG_MAX_SIZE=100,		//最大支持的配置文件数量
};

//////////////////////////////////////////////////////////////////////////
// 名    称:  CConfigBase
// 作    者:  邵凯田
// 创建时间:  2015-7-29 13:56
// 描    述:  配置文件基类，定义配置文件加载、变更等公共接口，所有受控配置文件应以此接口
//			  通过该基类实例化的配置类将自动被加入配置管理器，并可按配置类型提取
//////////////////////////////////////////////////////////////////////////
class SSP_BASE_EXPORT CConfigBase
{
public:
	friend class CConfigMgr;
	CConfigBase();
	virtual ~CConfigBase();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置配置文件全路径文件名
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 14:02
	// 参数说明:  @sPathFile为全路径文件名
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetPathFile(SString sPathFile){m_sPathFile = sPathFile;};
	inline SString GetPathFile(){return m_sPathFile;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置自动加载模式
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 14:15
	// 参数说明:  @bAutoReload为true表示自动重新加载（变化时），false表示不自动加载
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetAutoReload(bool bAutoReload){m_bAutoRelaod = bAutoReload;};
	inline bool GetAutoReload(){return m_bAutoRelaod;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  加载配置文件，派生类的Load虚函数中需要调用本函数: CConfigBase::Load(sPathFile);
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 14:14
	// 参数说明:  @sPathFile为待加载文件的全路径名
	// 返 回 值:  true表示加载成功，false表示加载失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Load(SString sPathFile){m_LastModifyTime = SFile::filetime(sPathFile);m_sPathFile = sPathFile;return true;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  清除原配置并重新加载配置文件(上一次加载的文件名)，应先清除配置，后调用Load(GetPathFile());
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 14:03
	// 参数说明:  void
	// 返 回 值:  true表示加载成功，false表示加载失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool ReLoad(){return Load(GetPathFile());};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置配置文件类型
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 15:35
	// 参数说明:  @type为类型号
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetConfigType(eSpConfigType type){m_ConfigType = type;};
	inline eSpConfigType GetConfigType(){return m_ConfigType;};
private:
	SString m_sPathFile;//配置文件全路径名
	bool m_bAutoRelaod;//当文件发生变化时是否自动重新加载配置
	SDateTime m_LastModifyTime;//最后修改时间
	eSpConfigType m_ConfigType;//配置文件类型
};

//////////////////////////////////////////////////////////////////////////
// 名    称:  CConfigMgr
// 作    者:  邵凯田
// 创建时间:  2015-7-29 14:16
// 描    述:  配置文件管理器类
//////////////////////////////////////////////////////////////////////////
class SSP_BASE_EXPORT CConfigMgr
{
public:
	CConfigMgr();
	virtual ~CConfigMgr();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取唯一全局指针
	// 作    者:  邵凯田
	// 创建时间:  2017-8-4 17:06
	// 参数说明:  void
	// 返 回 值:  CConfigMgr*
	//////////////////////////////////////////////////////////////////////////
	static CConfigMgr* GetPtr();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设备唯一指针（动态库中使用）
	// 作    者:  邵凯田
	// 创建时间:  2017-8-4 17:05
	// 参数说明:  @ptr表示中唯一指针
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void SetPtr(CConfigMgr *ptr);
	
	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置重新加载间隔秒数
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 14:27
	// 参数说明:  @iSec为秒数
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void SetReloadSeconds(int iSec);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  开启重新加载服务,将启动配置文件扫描线程，定时扫描文件修改时间，
	//			  定时间隔默认5秒，可通过SetReloadSeconds修改
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 15:17
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void StartReload();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  退出重新加载服务线程，系统退出时须调用
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 15:19
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void Quit();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  添加配置文件类到管理器(由基类构造函数自动添加，不需要用户调用)
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 15:24
	// 参数说明:  @pCfg为配置文件实例指针
	// 返 回 值:  true表示添加成功，false表示失败（指定类型配置文件已存在)
	//////////////////////////////////////////////////////////////////////////
	static bool AddConfig(CConfigBase *pCfg);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  删除指定的配置文件
	// 作    者:  邵凯田
	// 创建时间:  2015-11-12 10:03
	// 参数说明:  @pCfg
	//         :  @bAddtoRemovedList是否将删除的配置文件添加到释放队列，退出应用时释放
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void RemoveConfig(CConfigBase *pCfg,bool bAddtoRemovedList=false);


	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定类型的配置文件指针
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 15:32
	// 参数说明:  @cfgType表示配置文件类型
	// 返 回 值:  CConfigBase*，NULL表示不存在
	//////////////////////////////////////////////////////////////////////////
	static CConfigBase* GetConfig(eSpConfigType cfgType);

private:
	//////////////////////////////////////////////////////////////////////////
	// 描    述:  所有受控配置文件自动重新加载的扫描线程
	// 作    者:  邵凯田
	// 创建时间:  2015-7-29 15:26
	// 参数说明:  @lp为this指针
	// 返 回 值:  NULL
	//////////////////////////////////////////////////////////////////////////
	static void* ThreadReload(void* lp);

private:
	SPtrList<CConfigBase> m_Configs;//配置文件列表
	SPtrList<CConfigBase> m_RemovedConfigs;//准备删除配置文件列表
	bool m_bQuit;//是否准备退出
	int m_iReloadSecs;//重新加载的扫描时间间隔（秒），默认5秒
	CConfigBase** m_ppConfig;//配置文件的实例指针数组
};

#endif//__SP_CONFIG_MANAGER_H__
