/**
 *
 * 文 件 名 : ssp_gui.h
 * 创建日期 : 2015-7-8 11:02
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : SSP图形人机对话程序（工作站）软件平台接口类
 * 修改记录 : 
 *            $Log: $
 *
 * Ver  Date        Author  Comments
 * ---  ----------  ------  -------------------------------------------
 * 001	2015-7-8	邵凯田　创建文件
 *
 **/
#ifndef SSP_GUI_H
#define SSP_GUI_H

#include <QtGui>
#include "ssp_database.h"
#include "../ssp_base/ssp_base.h"
#include "ssp_baseview.h"
#include "SSvgWnd.h"
#include "ssp_gui_inc.h"

// 
// #ifdef SSP_GUI_LIB
// #ifdef WIN32
// #ifdef NDEBUG
// #pragma comment(lib,"sbase_qtgui.lib")
// //#pragma comment(lib,"ssp_gui.lib")
// #else
// #pragma comment(lib,"sbase_qtguid.lib")
// //#pragma comment(lib,"ssp_guid.lib")
// #endif
// #endif
// #define SSP_GUI_EXPORT __declspec(dllexport)
// 
// #else//SSP_GUI_LIB
// 
// #define SSP_GUI_EXPORT __declspec(dllimport)
// 
// #endif//SSP_GUI_LIB

#define SSP_GUI ssp_gui::GetPtr()

//////////////////////////////////////////////////////////////////////////
// 描    述:  通用动作事件的回调函数原型定义
// 作    者:  邵凯田
// 创建时间:  2015-11-21 15:13
// 参数说明:  void
// 返 回 值:  <0表示失败，=0表示取消，>0表示成功
//////////////////////////////////////////////////////////////////////////
typedef int (*SSP_GeneralAction)();

//////////////////////////////////////////////////////////////////////////
// 描    述:  取指定的SVG提示文本内容的回调函数原型定义
// 作    者:  邵凯田
// 创建时间:  2015-12-8 14:50
// 参数说明:  @pSvgObj为图元对象指针
//         :  @sText为引用返回的文本内容
// 返 回 值:  true表示提取成功，false表示提取失败
//////////////////////////////////////////////////////////////////////////
typedef	bool (*SSP_GetSvgObjectTipText)(SSvgObject *pSvgObj,SString &sText);

class SSP_GUI_EXPORT ssp_gui : public QObject,public ssp_base
{
public:
	struct SSP_GUI_EXPORT stuGeneralActionParam
	{
		SString sActName;
		SSP_GeneralAction pFun;
	};
	ssp_gui();
	virtual ~ssp_gui();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前类的静态实例，一个进程只有一个实例（平台自动实例）
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:07
	// 参数说明:  void
	// 返 回 值:  ssp_gui*
	//////////////////////////////////////////////////////////////////////////
	static ssp_gui* GetPtr();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  加载平台图形化相关配置,图形工作站系统启动时一次性调用
	// 作    者:  邵凯田
	// 创建时间:  2015-11-22 17:14
	// 参数说明:  @sGuiStyle表示图形样式,default:缺省
	//         :  @sExtAttribute表示扩展属性
	// 返 回 值:  true表示启动成功，false表示启动失败
	//////////////////////////////////////////////////////////////////////////
	bool StartGui(SString sGuiStyle,SString sExtAttribute);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  执行登录操作，弹出登录窗口
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:13
	// 参数说明:  void
	// 返 回 值:  true表示登录成功，false表示登录失败
	//////////////////////////////////////////////////////////////////////////
	bool Login();

	//Substation风格登录
	bool LoginSubstation(bool forOper);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  操作员方式登录,用于登录操作人及监护人
	// 作    者:  邵凯田
	// 创建时间:  2016-2-22 22:48
	// 参数说明:  @sFunPointKey表示功能点类型
	//         :  @sOperTip表示操作提示文本
	//         :  @bDoubleMode表示是双用户登录（即是否含监护人）
	// 返 回 值:  true表示权限已具备，false表示权限不具备
	//////////////////////////////////////////////////////////////////////////
	bool OperatorLogin(SString sFunPointKey, SString sOperTip, bool bDoubleMode=false);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  操作人及监护人退出登录
	// 作    者:  邵凯田
	// 创建时间:  2016-2-22 22:50
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void OperatorLogout();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  退出登录
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:18
	// 参数说明:  @bOnlyGuarder为true表示仅退出监护人的登录
	// 返 回 值:  true表示退出成功，false表示退出失败
	//////////////////////////////////////////////////////////////////////////
	void Logout();

	//Substation风格登录
	void LogoutSubstation();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  检查当前用户是否具备指针功能点的权限，当无用户操作时弹出登录窗口提示用户登录
	//            当需要双用户认证，且未登录双用户时应进行双用户登录提示
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:12
	// 参数说明:  @sFunPointKey表示待验证权限的功能点名
	//         :  @bDoubleMode表示是否为双用户模式，false表示单操作员登录，true表示操作员、监护人双用户登录
	// 返 回 值:  true给具备权限，false表示不具备权限
	//////////////////////////////////////////////////////////////////////////
	bool CheckFunPointAuth(SString sFunPointKey,bool bDoubleMode=false);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  检查指定用户是否具有指定功能点的权限
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:39
	// 参数说明:  @sUserCode为用户代码
	//         :  @sFunPointKey为功能点代码
	// 返 回 值:  true表示具备权限,false表示不具备权限
	//////////////////////////////////////////////////////////////////////////
	bool CheckUserFunPointAuth(SString sUserCode,SString sFunPointKey);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置状态条控件指针
	// 作    者:  邵凯田
	// 创建时间:  2015-11-10 8:57
	// 参数说明:  @p
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetStatusTipQLabel(QLabel *p){m_plabStatusTip = p;};
	
	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置界面框架主窗口，CSspUiFrame*
	// 作    者:  邵凯田
	// 创建时间:  2016-1-11 13:24
	// 参数说明:  p为CSspUiFrame类型指针
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetUiFramePtr(void *p){m_pSspUiFrame = p;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取状态条控件指针
	// 作    者:  邵凯田
	// 创建时间:  2015-11-10 9:04
	// 参数说明:  void
	// 返 回 值:  QLabel*
	//////////////////////////////////////////////////////////////////////////
	inline QLabel* GetStatusTipQLabel(){return m_plabStatusTip;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置状态条的提示信息
	// 作    者:  邵凯田
	// 创建时间:  2015-11-10 8:50
	// 参数说明:  @sText表示提示文本
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetStatusTip(SString sText);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取登录信息描述字符串，用于界面显示
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:04
	// 参数说明:  void
	// 返 回 值:  SString，包括登录人、登录时间、超时退出时间（如果超时时间不为0）
	//////////////////////////////////////////////////////////////////////////
	SString GetLoginInfoStr();

	time_t GetLoginTime(){return m_dtLoginTime.m_t;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  是否登录已超时，超时则由上层注销登录
	// 作    者:  邵凯田
	// 创建时间:  2015-8-4 12:23
	// 参数说明:  void
	// 返 回 值:  true表示超时，false表示未超时
	//////////////////////////////////////////////////////////////////////////
	bool IsLoginTimeout();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  当前是否登录
	// 作    者:  邵凯田
	// 创建时间:  2016-2-23 0:01
	// 参数说明:  
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	inline bool IsLogin(){return m_sLoginUser.length()>0;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取操作人是否登录
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:27
	// 参数说明:  void
	// 返 回 值:  true表示已登录，false表示未登录
	//////////////////////////////////////////////////////////////////////////
	inline bool IsOperLogin(){return m_sOperUser.length() > 0;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取监护人是否登录
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:27
	// 参数说明:  void
	// 返 回 值:  true表示已登录，false表示未登录
	//////////////////////////////////////////////////////////////////////////
	inline bool IsGuarderLogin(){return m_sGuarderUser.length() > 0;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前登录用户的登录代码和名称
	// 作    者:  邵凯田
	// 创建时间:  2015-8-3 16:29
	// 参数说明:  void
	// 返 回 值:  SString，空表示尚未登录
	//////////////////////////////////////////////////////////////////////////
	inline SString GetLoginUser(){return m_sLoginUser;};
	inline SString GetLoginUserName(){return m_sLoginUserName;};
	inline SString GetOperUser(){return m_sOperUser;};
	inline SString GetGuarderUser(){return m_sGuarderUser;};
	inline SString GetOperUserName(){return m_sOperUserName;};
	inline SString GetGuarderUserName(){return m_sGuarderUserName;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打开浮动的组态窗口
	// 作    者:  邵凯田
	// 创建时间:  2015-12-30 9:52
	// 参数说明:  @wnd_sn窗口序号
	//         :  @w表示窗口宽度
	//         :  @h表示窗口高度
	//         :  @alpha表示透明度（含alpha通道的32位色彩深度时才有效）
	//         :  @title表示窗口标题
	// 返 回 值:  <0表示失败,>0表示成功创建新窗口，=0表示显示已打开过的窗口并刷新
	//////////////////////////////////////////////////////////////////////////
	int OpenFloatWnd(int wnd_sn,int w,int h,int alpha,SString title);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打开对话框式的组态窗口
	// 作    者:  邵凯田
	// 创建时间:  2015-12-31 8:50
	// 参数说明:  @wnd_sn窗口序号
	//         :  @w表示窗口宽度
	//         :  @h表示窗口高度
	//         :  @alpha表示透明度（含alpha通道的32位色彩深度时才有效）
	//         :  @title表示窗口标题
	// 返 回 值:  <0表示失败,>0表示成功创建新窗口，=0表示显示已打开过的窗口并刷新
	//////////////////////////////////////////////////////////////////////////
	int OpenDialogWnd(int wnd_sn,int w,int h,int alpha,SString title);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  创建一个嵌入式窗口
	// 作    者:  邵凯田
	// 创建时间:  2017-7-26 10:33
	// 参数说明:  @wnd_sn组态窗口序号
	//         :  @parent为父窗口指针
	//         :  @title表示窗口标题
	// 返 回 值:  QWidget*， 表示新创建的子窗口指针，NULL表示创建失败
	//////////////////////////////////////////////////////////////////////////
	QWidget* NewEmbeddedWnd(int wnd_sn,QWidget *parent,SString title="");

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  创建一个新的功能点窗口
	// 作    者:  邵凯田
	// 创建时间:  2017-8-8 13:54
	// 参数说明:  @sFunName为功能点名称
	//         :  @parent为父窗口指针
	//         :  @sExtAttr为扩展属性
	// 返 回 值:  CBaseView*, NULL表示创建失败
	//////////////////////////////////////////////////////////////////////////
	CBaseView* NewView(SString sFunName,QWidget *parent,SString sExtAttr="");

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  执行通用动作
	// 作    者:  邵凯田
	// 创建时间:  2015-12-30 9:38
	// 参数说明:  @act_sn为动作编号
	// 返 回 值:  <0表示失败(-1000表示尚未注册)，=0表示动作取消，>0表示动作执行成功
	//////////////////////////////////////////////////////////////////////////
	int RunGeneralAction(int act_sn);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  执行应用层已注册的自定义动作
	// 作    者:  邵凯田
	// 创建时间:  2015-11-21 15:30
	// 参数说明:  @sActName为动作名称
	// 返 回 值:  <0表示失败(-1000表示尚未注册)，=0表示动作取消，>0表示动作执行成功
	//////////////////////////////////////////////////////////////////////////
	int RunRegistedCustomAction(SString sActName);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  注册通用动作函数入口
	// 作    者:  邵凯田
	// 创建时间:  2015-11-21 15:37
	// 参数说明:  @sActName为全局唯一的动作关键字
	//         :  @pFun为动作入口的静态回调函数
	// 返 回 值:  true表示注册成功，false表示注册失败（如关键字已经被注册过）
	//////////////////////////////////////////////////////////////////////////
	bool RegisterGeneralAction(SString sActName,SSP_GeneralAction pFun);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  通过关键字搜索通用动作入口回调函数
	// 作    者:  邵凯田
	// 创建时间:  2015-11-21 15:41
	// 参数说明:  @sActName为动作关键字
	// 返 回 值:  SSP_GeneralAction,NULL表示指定动作尚未注册
	//////////////////////////////////////////////////////////////////////////
	SSP_GeneralAction SearchGeneranActionFun(SString sActName);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定的SVG提示文本内容
	// 作    者:  邵凯田
	// 创建时间:  2015-12-8 14:50
	// 参数说明:  @pSvgObj为图元对象指针
	//         :  @sText为引用返回的文本内容
	// 返 回 值:  true表示提取成功，false表示提取失败
	//////////////////////////////////////////////////////////////////////////
	bool GetSvgObjectTipText(SSvgObject *pSvgObj,SString &sText);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  注册取指定的SVG提示文本内容的静态回调函数
	// 作    者:  邵凯田
	// 创建时间:  2015-12-8 14:56
	// 参数说明:  @pFun
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void RegisterGetSvgobjectTipCallback(SSP_GetSvgObjectTipText pFun);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  向主界面框架的状态条右侧添加自定义WIDGET控件，应用层可以控制该控件的属性以及获取其消息
	// 作    者:  邵凯田
	// 创建时间:  2016-1-11 11:21
	// 参数说明:  @pWidget
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddStatusWidget(QWidget *pWidget);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  显示请稍候窗口
	// 作    者:  邵凯田
	// 创建时间:  2016-1-20 16:35
	// 参数说明:  
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	void ShowWaiting();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  关闭请稍候窗口
	// 作    者:  邵凯田
	// 创建时间:  2016-1-20 16:36
	// 参数说明:  
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	void HideWaiting();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  将最后一次点击的SVG组态窗口重定向到新的窗口号
	// 作    者:  邵凯田
	// 创建时间:  2016-3-1 18:19
	// 参数说明:  @wnd_sn为组态窗口号
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void JumpToSvgUiWnd(int wnd_sn);

private:
// 	//配置类
// 	CSsp_Database *m_pDatabase;			//数据库配置文件
// 	CSsp_DatawindowMgr *m_pDatawindow;	//数据窗口配置文件
// 	CSsp_FunPointConfig *m_pFunpoint;	//功能点配置文件
// 	CSp_SvgLibConfig	*m_pSvgLibCfg;	//SVG图元库

	//当前登录信息
	SString m_sLoginUser;		//登录用户
	SString m_sOperUser;		//操作，空表示尚未登录
	SString m_sGuarderUser;		//监护人，空表示尚未登录
	SString m_sLoginUserName;	//登录用户名
	SString m_sOperUserName;	//操作，空表示尚未登录
	SString m_sGuarderUserName;	//监护人，空表示尚未登录
	SDateTime m_dtLoginTime;	//登录时间
	int m_iTimeoutSecs;			//登录超时时间，0表示不超时退出
	void *m_pSspUiFrame;		//框架主窗口
	QLabel *m_plabStatusTip;	//状态条提示控件指针
	SPtrList<stuGeneralActionParam> m_GeneralActions;//通用动作列表
	SValueList<SSP_GetSvgObjectTipText> m_GetSvgObjectTipTextFun;
	SPtrList<CBaseView> m_ViewFloat;//浮动窗口
};

#endif // SSP_GUI_H
