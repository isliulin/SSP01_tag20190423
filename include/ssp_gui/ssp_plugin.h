/**
 *
 * 文 件 名 : ssp_plugin.h
 * 创建日期 : 2017-8-4 9:53
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : SSP_GUI插件定义头文件
 * 修改记录 : 
 *            $Log: $
 *
 * Ver  Date        Author  Comments
 * ---  ----------  ------  -------------------------------------------
 * 001	2017-8-4	邵凯田　创建文件
 *
 **/

#ifndef __SSP_PLUGIN_H__
#define __SSP_PLUGIN_H__

#include <string.h>

#ifdef WIN32
#define PLUGIN_EXPORT __declspec(dllexport)
#else 
#define PLUGIN_EXPORT
#endif

// #define SSP_PLUGIN_SET_PTR \
// 	switch(type) \
// 	{ \
// 	case 1: \
// 		CConfigMgr::SetPtr((CConfigMgr*)ptr); \
// 		break; \
// 	case 2: \
// 		ssp_base::SetPtr((ssp_base*)ptr); \
// 		break; \
// 	} 

#ifndef WIN32
#ifndef QT_NO_DEBUG
#ifndef _DEBUG
#define _DEBUG
#endif
#endif
#endif

//////////////////////////////////////////////////////////////////////////
// 描    述:  检查DLL中的DEBUG宏与容器主程序是否一致，必须在pFun_SSP_Init中调用，返回非0时异常，应返回失败
// 作    者:  邵凯田
// 创建时间:  2017-8-8 9:13
// 参数说明:  @sExtAttr
// 返 回 值:  
//////////////////////////////////////////////////////////////////////////

#ifdef _DEBUG

//当前插件是DEBUG版本，但容器程序不是DEBUG版本
#define SSP_PLUGIN_INIT \
	if(strstr(sExtAttr,"debug=true;") == NULL) \
	{ \
		return 1; \
	} 

#else

//当前插件不是DEBUG版本，但窗口程序是DEBUG版本
#define SSP_PLUGIN_INIT \
	if(strstr(sExtAttr,"debug=true;") != NULL) \
	{ \
		return 2; \
	} 

#endif

//////////////////////////////////////////////////////////////////////////
// 描    述:  初始化插件
// 作    者:  邵凯田
// 创建时间:  2017-8-7 18:58
// 参数说明:  @sExtAttr表示扩展属性字符串，debug=true;时表示调试版本
// 返 回 值:  int, 0表示成功，其他表示失败
//////////////////////////////////////////////////////////////////////////
typedef int (*pFun_SSP_Init)(const char* sExtAttr);

//////////////////////////////////////////////////////////////////////////
// 描    述:  退出插件【可选实现】
// 作    者:  邵凯田
// 创建时间:  2017-9-14 13:44
// 参数说明:  void
// 返 回 值:  int
//////////////////////////////////////////////////////////////////////////
typedef int (*pFun_SSP_Exit)();

//////////////////////////////////////////////////////////////////////////
// 描    述:  取当前插件的名称
// 作    者:  邵凯田
// 创建时间:  2017-8-4 10:26
// 参数说明:  void
// 返 回 值:  char*, 插件名称
//////////////////////////////////////////////////////////////////////////
typedef const char* (*pFun_SSP_GetPluginName)();

//////////////////////////////////////////////////////////////////////////
// 描    述:  取当前插件的版本号
// 作    者:  邵凯田
// 创建时间:  2017-8-4 10:27
// 参数说明:  void
// 返 回 值:  char*, 插件版本号
//////////////////////////////////////////////////////////////////////////
typedef const char* (*pFun_SSP_GetPluginVer)();

//////////////////////////////////////////////////////////////////////////
// 描    述:  返回当前插件支持的所有功能点名称与描述
// 作    者:  邵凯田
// 创建时间:  2017-8-4 10:22
// 参数说明:  void
// 返 回 值:  char*, 如： ia_homepage=智能告警主界面;ia_report=告警告警简报;
//////////////////////////////////////////////////////////////////////////
typedef const char* (*pFun_SSP_FunPointSupported)();

//////////////////////////////////////////////////////////////////////////
// 描    述:  返回当前插件支持的所有通用动作名称与描述【可选实现】
// 作    者:  邵凯田
// 创建时间:  2017-8-22 14:10
// 参数说明:  void
// 返 回 值:  char*, 如：gact.nam.station.start=启动厂站网分通信;gact.nam.station.stop=停止厂站网分通信;
//////////////////////////////////////////////////////////////////////////
typedef const char* (*pFun_SSP_GActSupported)();

//////////////////////////////////////////////////////////////////////////
// 描    述:  设置全局指针
// 作    者:  邵凯田
// 创建时间:  2017-8-4 16:44
// 参数说明:  @type为指针类型
//         :  @ptr为指针内容
// 返 回 值:  void
//////////////////////////////////////////////////////////////////////////
//typedef void (*pFun_SSP_SetGlobalPtr)(int type,void* ptr);

//////////////////////////////////////////////////////////////////////////
// 描    述:  创建新功能点窗口
// 作    者:  邵凯田
// 创建时间:  2017-8-4 10:20
// 参数说明:  @sFunName为待打开功能点名称
//         :  @parentWidget为父窗口指针，真实类型为QWidget*
// 返 回 值:  返回新打开的窗口指针，真实类型为CBaseView*，NULL表示非本插件对应的功能点
//////////////////////////////////////////////////////////////////////////
typedef void* (*pFun_SSP_NewView)(const char* sFunName,const void* parentWidget);

#endif//__SSP_PLUGIN_H__
