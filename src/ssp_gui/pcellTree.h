/**
 *
 * 文 件 名 : pcellTree.h
 * 创建日期 : 2015-7-30 10:38
 * 作    者 : 褚冰冰
 * 修改日期 : 2015-7-30 10:38
 * 当前版本 : 1.0
 * 功能描述 : 树数据结构实现
 * 修改记录 : 
 *            $Log: $
 *
 * Ver  Date        Author  Comments
 * ---  ----------  ------  -------------------------------------------
 * 001	2015-7-30	褚冰冰　树数据结构实现
 *
 **/
#ifndef _TREE_H
#define _TREE_H
#include <list>
#include "SApi.h"
using namespace std;
//////////////////////////////////////////////////////////////////////////
// 名    称:  pcell_CTree
// 作    者:  褚冰冰
// 创建时间:  2015-7-30 10:41
// 描    述:  存放树类型数据
//////////////////////////////////////////////////////////////////////////
template<class T>
class pcell_CTree
{
public:
	pcell_CTree(void)
	{
		m_level = 0;
		m_data = T();
		m_parent = NULL;
	}
	~pcell_CTree(void)
	{
		clear();
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  添加子节点
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:57
	// 参数说明:  @pChild 子节点指针
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void addChild(pcell_CTree *pChild)
	{
		reNumChild(pChild,m_level+1);
		pChild->m_parent = this;
		m_childList.push_back(pChild);
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  获取父节点
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:56
	// 参数说明:  @
	// 返 回 值:  父节点指针，没有返回空
	//////////////////////////////////////////////////////////////////////////
	pcell_CTree* getParent()
	{
		return m_parent;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  是否有下级节点
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:56
	// 参数说明:  @
	// 返 回 值:  有返回true 没有返回false
	//////////////////////////////////////////////////////////////////////////
	bool hasChild()
	{
		return !m_childList.empty();
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  获取下级节点个数
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:55
	// 参数说明:  @
	// 返 回 值:  下级节点个数
	//////////////////////////////////////////////////////////////////////////
	int childCount()
	{
		return m_childList.size();
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  获取指定索引的子节点
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:52
	// 参数说明:  @index字节点索引
	// 返 回 值:  子节点指针
	//////////////////////////////////////////////////////////////////////////
	pcell_CTree * childAt(int index)
	{
		if (index>=m_childList.size()||index<0)
		{
			return NULL;
		}
		
		list<void *>::iterator it = m_childList.begin();
		int i = 0;
		while(i<m_childList.size())
		{

			if (i==index)
			{
				return (pcell_CTree*)*it;
			}
			it++;
			i++;
		}
		return NULL;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置当前节点所带数据
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:51
	// 参数说明:  @data表示要设置的数据
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	void setData(T &data)
	{
		m_data = data;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  获取当前节点数据
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:52
	// 参数说明:  @
	// 返 回 值:  当前节点所带数据
	//////////////////////////////////////////////////////////////////////////
	T getData(){return m_data;}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  获取当前节点的子节点
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:49
	// 参数说明:  @
	// 返 回 值:  子节点列表
	//////////////////////////////////////////////////////////////////////////
	list<void *>* getChildren()
	{
		return &m_childList;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  清空树结构
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:47
	// 参数说明:  @
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void clear()
	{
		for (list<void *>::iterator it=m_childList.begin();it!=m_childList.end();it++)
		{
			if ((*it)!=NULL)
			{
				delete (pcell_CTree*)(*it);
				(*it)=NULL;
			}
		}
		m_childList.clear();
	}
private:
	//////////////////////////////////////////////////////////////////////////
	// 描    述:  给子节及其下所有节点点重新编号
	// 作    者:  褚冰冰
	// 创建时间:  2015-7-30 10:42
	// 参数说明:  @cChild 子节点
	//         :  @iLevel 子节点编号
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void reNumChild(pcell_CTree * cChild,int iLevel)
	{
		cChild->m_level = iLevel;
		for(list<void*>::iterator it = cChild->m_childList.begin();it!=cChild->m_childList.end();it++)
		{
			((pcell_CTree*)(*it))->m_level = cChild->m_level+1;
			if (((pcell_CTree*)(*it))->hasChild())
			{
				reNumChild((pcell_CTree*)*it,((pcell_CTree*)(*it))->m_level+1);
			}else
			{
				continue;
			}
		}
	}
	//list<pcell_CTree *> m_childList;//子节点列表
	list<void *> m_childList;//子节点列表
	int m_level;//表示当前在第几层
	T m_data;//当前节点数据
	pcell_CTree * m_parent;//父节点
};
#endif


